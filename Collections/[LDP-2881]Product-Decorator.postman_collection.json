{
	"info": {
		"_postman_id": "c7a5b27e-ee65-4b31-b876-f201a647c182",
		"name": "[LDP-2881]Product-Decorator",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "[LDP-2888] - Review Controller",
			"item": [
				{
					"name": "Positive Tests",
					"item": [
						{
							"name": "GET_Review_Controller_200_with_mandatory_query_params_only.",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseURL}}/v1/reviews/{{upc}}?lang=en",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"v1",
										"reviews",
										"{{upc}}"
									],
									"query": [
										{
											"key": "lang",
											"value": "en"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "GET_Review_Controller_200_with_all_the_query_params.",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseURL}}/v1/reviews/{{upc}}?lang=en&include_rollup=true&tenantId=JOE_FRESH",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"v1",
										"reviews",
										"{{upc}}"
									],
									"query": [
										{
											"key": "lang",
											"value": "en"
										},
										{
											"key": "include_rollup",
											"value": "true"
										},
										{
											"key": "tenantId",
											"value": "JOE_FRESH"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "GET_Review_Controller_200_with_include_rollup_as_true",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseURL}}/v1/reviews/{{upc}}?lang=en&include_rollup=true",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"v1",
										"reviews",
										"{{upc}}"
									],
									"query": [
										{
											"key": "lang",
											"value": "en"
										},
										{
											"key": "include_rollup",
											"value": "true"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "GET_Review_Controller_200_with_include_rollup_as_false",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseURL}}/v1/reviews/{{upc}}?lang=en&include_rollup=false",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"v1",
										"reviews",
										"{{upc}}"
									],
									"query": [
										{
											"key": "lang",
											"value": "en"
										},
										{
											"key": "include_rollup",
											"value": "false"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "GET_Review_Controller_200_with_lang_as_en",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseURL}}/v1/reviews/{{upc}}?lang=en",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"v1",
										"reviews",
										"{{upc}}"
									],
									"query": [
										{
											"key": "lang",
											"value": "en"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "GET_Review_Controller_200_with_lang_as_fr",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseURL}}/v1/reviews/{{upc}}?lang=fr",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"v1",
										"reviews",
										"{{upc}}"
									],
									"query": [
										{
											"key": "lang",
											"value": "fr"
										}
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									"const responseSchemaReviewController = {",
									"  \"type\": \"object\",",
									"  \"properties\": {",
									"    \"name\": {",
									"      \"type\": \"string\"",
									"    },",
									"    \"paging\": {",
									"      \"type\": \"object\",",
									"      \"properties\": {",
									"        \"total_results\": {",
									"          \"type\": \"integer\"",
									"        },",
									"        \"pages_total\": {",
									"          \"type\": \"integer\"",
									"        },",
									"        \"page_size\": {",
									"          \"type\": \"integer\"",
									"        },",
									"        \"current_page_number\": {",
									"          \"type\": \"integer\"",
									"        },",
									"        \"next_page_url\": {",
									"          \"type\": [\"string\",\"null\"]",
									"        }",
									"      },",
									"      \"required\": [",
									"        \"total_results\",",
									"        \"pages_total\",",
									"        \"page_size\",",
									"        \"current_page_number\"",
									"      ]",
									"    },",
									"    \"results\": {",
									"      \"type\": \"array\",",
									"      \"items\": [",
									"        {",
									"          \"type\": \"object\",",
									"          \"properties\": {",
									"            \"page_id\": {",
									"              \"type\": \"string\"",
									"            },",
									"            \"rollup\": {",
									"              \"type\": [\"object\",\"null\"]",
									"            },",
									"            \"reviews\": {",
									"              \"type\": \"array\"",
									"            }",
									"          },",
									"          \"required\": [",
									"            \"page_id\",",
									"            \"rollup\",",
									"            \"reviews\"",
									"          ]",
									"        }",
									"      ]",
									"    },",
									"    \"nativeFilter\": {",
									"      \"type\": [\"boolean\",\"null\"]",
									"    }",
									"  },",
									"  \"required\": [",
									"  ]",
									"}",
									"",
									"pm.environment.set('responseSchemaReviewController', JSON.stringify(responseSchemaReviewController));"
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.test('Status Code | 200 OK', function(){",
									"    pm.response.to.have.status(200)",
									"})",
									"",
									"const schemaToBeValidatedWith = JSON.parse(pm.environment.get('responseSchemaReviewController'));",
									"",
									"pm.test(\"Validate Response against Schema\", function(){",
									"    pm.response.to.have.jsonSchema(schemaToBeValidatedWith)",
									"})"
								]
							}
						}
					]
				},
				{
					"name": "Negative Tests",
					"item": [
						{
							"name": "GET_Review_Controller_400_with_upc_made_of_special_characters",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Status Code | 400 Bad Request', function(){",
											"    pm.response.to.have.status(400)",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseURL}}/v1/reviews/&*%(&*^%$^&$?lang=en",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"v1",
										"reviews",
										"&*%(&*^%$^&$"
									],
									"query": [
										{
											"key": "lang",
											"value": "en"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "GET_Review_Controller_404_when_upc_is_missing",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Status Code | 404 Not Found', function(){",
											"    pm.response.to.have.status(404)",
											"})",
											"",
											"var responseData = pm.response.json();",
											"",
											"pm.test('Validate status code in response body', function(){",
											"    pm.expect(responseData.status).to.eql(404)",
											"})",
											"",
											"pm.test('Validate error message', function(){",
											"    pm.expect(responseData.error).to.eql('Not Found')",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseURL}}/v1/reviews/?lang=en",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"v1",
										"reviews",
										""
									],
									"query": [
										{
											"key": "lang",
											"value": "en"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "GET_Review_Controller_400_when_lang_missing",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Status Code | 400 bad Request', function(){",
											"    pm.response.to.have.status(400)",
											"})",
											"",
											"var responseData = pm.response.json();",
											"",
											"pm.test('Validate error code in repsonse', function(){",
											"    pm.expect(responseData.error_code).to.be.eql(\"400\")",
											"})",
											"",
											"pm.test('Validate error message', function(){",
											"    pm.expect(responseData.message).to.be.eql('getProductReview.lang: language code is required')",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseURL}}/v1/reviews/{{upc}}",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"v1",
										"reviews",
										"{{upc}}"
									],
									"query": [
										{
											"key": "lang",
											"value": "en",
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "GET_Review_Controller_400_when_lang_having_invalid_value",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Status Code | 400 Bad Request', function(){",
											"    pm.response.to.have.status(400)",
											"})",
											"",
											"var responseData = pm.response.json();",
											"",
											"pm.test('Validate error message', function(){",
											"    pm.expect(pm.response.text()).to.contain('invalid language')",
											"})",
											"",
											"pm.test('Validate error code in response body', function(){",
											"    pm.expect(responseData.error_code).to.eql(\"400\")",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseURL}}/v1/reviews/{{upc}}?lang=ri",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"v1",
										"reviews",
										"{{upc}}"
									],
									"query": [
										{
											"key": "lang",
											"value": "ri"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "GET_Review_Controller_400_when_lang_is_made_of_special_characters",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Status Code | 400 bad Request', function(){",
											"    pm.response.to.have.status(400)",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseURL}}/v1/reviews/{{upc}}?lang=%26*^%^%26$(^%26",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"v1",
										"reviews",
										"{{upc}}"
									],
									"query": [
										{
											"key": "lang",
											"value": "&*^%^&$(^&"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "GET_Review_Controller_400_when_with_include_rollup_having_invalid_value",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Status Code | 400 bad Request', function(){",
											"    pm.response.to.have.status(400)",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseURL}}/v1/reviews/{{upc}}?lang=en&include_rollup=jdowe",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"v1",
										"reviews",
										"{{upc}}"
									],
									"query": [
										{
											"key": "lang",
											"value": "en"
										},
										{
											"key": "include_rollup",
											"value": "jdowe"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "GET_Review_Controller_400_when_with_include_rollup_made_of_special_characters",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Status Code | 400 bad Request', function(){",
											"    pm.response.to.have.status(400)",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseURL}}/v1/reviews/{{upc}}?lang=en&include_rollup=*(%26(*^%26*%$",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"v1",
										"reviews",
										"{{upc}}"
									],
									"query": [
										{
											"key": "lang",
											"value": "en"
										},
										{
											"key": "include_rollup",
											"value": "*(&(*^&*%$"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "GET_Review_Controller_400_with_lang_empty",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Status Code | 400 Bad Request', function(){",
											"    pm.response.to.have.status(400)",
											"})",
											"",
											"var responseData = pm.response.json();",
											"",
											"pm.test('Validate error message', function(){",
											"    pm.expect(pm.response.text()).to.contain('invalid language')",
											"})",
											"",
											"pm.test('Validate error code in response body', function(){",
											"    pm.expect(responseData.error_code).to.eql(\"400\")",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseURL}}/v1/reviews/{{upc}}?lang=",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"v1",
										"reviews",
										"{{upc}}"
									],
									"query": [
										{
											"key": "lang",
											"value": ""
										}
									]
								}
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "Product-Details-Controller",
			"item": [
				{
					"name": "Positive Tests",
					"item": [
						{
							"name": "GET_Product_Details_Controller_200_with_mandatory_query_params_only.",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var Ajv = require('ajv'),",
											"    ajv = new Ajv({logger: console,  allErrors: true});",
											"",
											"var responseData = pm.response.json();",
											"",
											"var prices = responseData.prices;",
											"var priceingUnit = responseData.pricing_units;",
											"var badge = responseData.badges",
											"var specifications = responseData.specifications;",
											"",
											"const priceSchema = JSON.parse(pm.environment.get('priceSchema'));",
											"const pricingUnitsSchema = JSON.parse(pm.environment.get('pricingUnitsSchema'));",
											"const badgeSchema = JSON.parse(pm.environment.get('badgeSchema'));",
											"const specificationSchema = JSON.parse(pm.environment.get('specificationSchema'));",
											"const productSchema = JSON.parse(pm.environment.get('productObjectSchemaProductDetails'));",
											"var product = responseData.product;",
											"",
											"pm.test('Validated Product Object', function() {",
											"    pm.expect(ajv.validate(productSchema, product)).to.be.true;",
											"});",
											"",
											"var images = responseData.product.image_assets",
											"const imagesSchema = JSON.parse(pm.environment.get('imagesSchema'));",
											"",
											"images.forEach(function(index){",
											"pm.test('Validated Images in response', function() {",
											"    pm.expect(ajv.validate(imagesSchema, index)).to.be.true;",
											"});",
											"})",
											"",
											"pm.test('Validated Price Object', function() {",
											"    pm.expect(ajv.validate(priceSchema, prices)).to.be.true;",
											"});",
											"",
											"pm.test('Validated Pricing Unit Object', function() {",
											"    pm.expect(ajv.validate(pricingUnitsSchema, priceingUnit)).to.be.true;",
											"});",
											"",
											"badge.forEach(function(index){",
											"pm.test('Validated Badge Object', function() {",
											"    pm.expect(ajv.validate(badgeSchema, index)).to.be.true;",
											"});",
											"});",
											"",
											"pm.test('Validated specifications Object', function() {",
											"    pm.expect(ajv.validate(specificationSchema, specifications)).to.be.true;",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseURL}}/v1/products/{{productCode}}?lang={{langEnglish}}&banner=loblaw&bookingDate={{currentDate}}&storeId={{storeId}}&tenantId=JOE_FRESH",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"v1",
										"products",
										"{{productCode}}"
									],
									"query": [
										{
											"key": "lang",
											"value": "{{langEnglish}}"
										},
										{
											"key": "banner",
											"value": "loblaw"
										},
										{
											"key": "bookingDate",
											"value": "{{currentDate}}"
										},
										{
											"key": "storeId",
											"value": "{{storeId}}"
										},
										{
											"key": "tenantId",
											"value": "JOE_FRESH"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "GET_Product_Details_Controller_200_with_all_the_query_params",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var Ajv = require('ajv'),",
											"    ajv = new Ajv({logger: console,  allErrors: true});",
											"",
											"var responseData = pm.response.json();",
											"",
											"var prices = responseData.prices;",
											"var priceingUnit = responseData.pricing_units;",
											"var specifications = responseData.specifications;",
											"",
											"const priceSchema = JSON.parse(pm.environment.get('priceSchema'));",
											"const pricingUnitsSchema = JSON.parse(pm.environment.get('pricingUnitsSchema'));",
											"const badgeSchema = JSON.parse(pm.environment.get('badgeSchema'));",
											"const specificationSchema = JSON.parse(pm.environment.get('specificationSchema'));",
											"const productSchema = JSON.parse(pm.environment.get('productObjectSchemaProductDetails'));",
											"var product = responseData.product;",
											"",
											"pm.test('Validated Product Object', function() {",
											"    pm.expect(ajv.validate(productSchema, product)).to.be.true;",
											"});",
											"",
											"var images = responseData.product.image_assets",
											"const imagesSchema = JSON.parse(pm.environment.get('imagesSchema'));",
											"",
											"images.forEach(function(index){",
											"pm.test('Validated Images in response', function() {",
											"    pm.expect(ajv.validate(imagesSchema, index)).to.be.true;",
											"});",
											"})",
											"",
											"pm.test('Validated Price Object', function() {",
											"    pm.expect(ajv.validate(priceSchema, prices)).to.be.true;",
											"});",
											"",
											"pm.test('Validated Pricing Unit Object', function() {",
											"    pm.expect(ajv.validate(pricingUnitsSchema, priceingUnit)).to.be.true;",
											"});",
											"",
											"pm.test('Validated specifications Object', function() {",
											"    pm.expect(ajv.validate(specificationSchema, specifications)).to.be.true;",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseURL}}/v1/products/{{productCode}}?lang={{langEnglish}}&banner=loblaw&bookingDate={{currentDate}}&storeId={{storeId}}&pickupType=STORE&pcId=1234&includeRatings=yes&includeNutrition=yes&is_upc=false&tenantId=JOE_FRESH",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"v1",
										"products",
										"{{productCode}}"
									],
									"query": [
										{
											"key": "lang",
											"value": "{{langEnglish}}"
										},
										{
											"key": "banner",
											"value": "loblaw"
										},
										{
											"key": "bookingDate",
											"value": "{{currentDate}}"
										},
										{
											"key": "storeId",
											"value": "{{storeId}}"
										},
										{
											"key": "pickupType",
											"value": "STORE"
										},
										{
											"key": "pcId",
											"value": "1234"
										},
										{
											"key": "includeRatings",
											"value": "yes"
										},
										{
											"key": "includeNutrition",
											"value": "yes"
										},
										{
											"key": "is_upc",
											"value": "false"
										},
										{
											"key": "tenantId",
											"value": "JOE_FRESH"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "GET_Product_Details_Controller_200_with_lang_query_param_as_en",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var Ajv = require('ajv'),",
											"    ajv = new Ajv({logger: console,  allErrors: true});",
											"",
											"var responseData = pm.response.json();",
											"",
											"var prices = responseData.prices;",
											"var priceingUnit = responseData.pricing_units;",
											"var badge = responseData.badges",
											"var specifications = responseData.specifications;",
											"",
											"const priceSchema = JSON.parse(pm.environment.get('priceSchema'));",
											"const pricingUnitsSchema = JSON.parse(pm.environment.get('pricingUnitsSchema'));",
											"const badgeSchema = JSON.parse(pm.environment.get('badgeSchema'));",
											"const specificationSchema = JSON.parse(pm.environment.get('specificationSchema'));",
											"const productSchema = JSON.parse(pm.environment.get('productObjectSchemaProductDetails'));",
											"var product = responseData.product;",
											"",
											"pm.test('Validated Product Object', function() {",
											"    pm.expect(ajv.validate(productSchema, product)).to.be.true;",
											"});",
											"",
											"var images = responseData.product.image_assets",
											"const imagesSchema = JSON.parse(pm.environment.get('imagesSchema'));",
											"",
											"images.forEach(function(index){",
											"pm.test('Validated Images in response', function() {",
											"    pm.expect(ajv.validate(imagesSchema, index)).to.be.true;",
											"});",
											"})",
											"",
											"pm.test('Validated Price Object', function() {",
											"    pm.expect(ajv.validate(priceSchema, prices)).to.be.true;",
											"});",
											"",
											"pm.test('Validated Pricing Unit Object', function() {",
											"    pm.expect(ajv.validate(pricingUnitsSchema, priceingUnit)).to.be.true;",
											"});",
											"",
											"badge.forEach(function(index){",
											"pm.test('Validated Badge Object', function() {",
											"    pm.expect(ajv.validate(badgeSchema, index)).to.be.true;",
											"});",
											"});",
											"",
											"pm.test('Validated specifications Object', function() {",
											"    pm.expect(ajv.validate(specificationSchema, specifications)).to.be.true;",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseURL}}/v1/products/{{productCode}}?lang={{langEnglish}}&banner=loblaw&bookingDate={{currentDate}}&storeId={{storeId}}&tenantId=JOE_FRESH",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"v1",
										"products",
										"{{productCode}}"
									],
									"query": [
										{
											"key": "lang",
											"value": "{{langEnglish}}"
										},
										{
											"key": "banner",
											"value": "loblaw"
										},
										{
											"key": "bookingDate",
											"value": "{{currentDate}}"
										},
										{
											"key": "storeId",
											"value": "{{storeId}}"
										},
										{
											"key": "tenantId",
											"value": "JOE_FRESH"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "GET_Product_Details_Controller_200_with_lang_query_param_as_fr",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var Ajv = require('ajv'),",
											"    ajv = new Ajv({logger: console,  allErrors: true});",
											"",
											"var responseData = pm.response.json();",
											"",
											"var prices = responseData.prices;",
											"var priceingUnit = responseData.pricing_units;",
											"var badge = responseData.badges",
											"var specifications = responseData.specifications;",
											"",
											"const priceSchema = JSON.parse(pm.environment.get('priceSchema'));",
											"const pricingUnitsSchema = JSON.parse(pm.environment.get('pricingUnitsSchema'));",
											"const badgeSchema = JSON.parse(pm.environment.get('badgeSchema'));",
											"const specificationSchema = JSON.parse(pm.environment.get('specificationSchema'));",
											"const productSchema = JSON.parse(pm.environment.get('productObjectSchemaProductDetails'));",
											"var product = responseData.product;",
											"",
											"pm.test('Validated Product Object', function() {",
											"    pm.expect(ajv.validate(productSchema, product)).to.be.true;",
											"});",
											"",
											"var images = responseData.product.image_assets",
											"const imagesSchema = JSON.parse(pm.environment.get('imagesSchema'));",
											"",
											"images.forEach(function(index){",
											"pm.test('Validated Images in response', function() {",
											"    pm.expect(ajv.validate(imagesSchema, index)).to.be.true;",
											"});",
											"})",
											"",
											"pm.test('Validated Price Object', function() {",
											"    pm.expect(ajv.validate(priceSchema, prices)).to.be.true;",
											"});",
											"",
											"pm.test('Validated Pricing Unit Object', function() {",
											"    pm.expect(ajv.validate(pricingUnitsSchema, priceingUnit)).to.be.true;",
											"});",
											"",
											"badge.forEach(function(index){",
											"pm.test('Validated Badge Object', function() {",
											"    pm.expect(ajv.validate(badgeSchema, index)).to.be.true;",
											"});",
											"});",
											"",
											"pm.test('Validated specifications Object', function() {",
											"    pm.expect(ajv.validate(specificationSchema, specifications)).to.be.true;",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseURL}}/v1/products/{{productCode}}?lang={{langFrench}}&banner=loblaw&bookingDate={{currentDate}}&storeId={{storeId}}&tenantId=JOE_FRESH",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"v1",
										"products",
										"{{productCode}}"
									],
									"query": [
										{
											"key": "lang",
											"value": "{{langFrench}}"
										},
										{
											"key": "banner",
											"value": "loblaw"
										},
										{
											"key": "bookingDate",
											"value": "{{currentDate}}"
										},
										{
											"key": "storeId",
											"value": "{{storeId}}"
										},
										{
											"key": "tenantId",
											"value": "JOE_FRESH"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "GET_Product_Details_Controller_200_with_banner_as_jfcom",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var Ajv = require('ajv'),",
											"    ajv = new Ajv({logger: console,  allErrors: true});",
											"",
											"var responseData = pm.response.json();",
											"",
											"var prices = responseData.prices;",
											"var priceingUnit = responseData.pricing_units;",
											"var badge = responseData.badges",
											"var specifications = responseData.specifications;",
											"",
											"const priceSchema = JSON.parse(pm.environment.get('priceSchema'));",
											"const pricingUnitsSchema = JSON.parse(pm.environment.get('pricingUnitsSchema'));",
											"const badgeSchema = JSON.parse(pm.environment.get('badgeSchema'));",
											"const specificationSchema = JSON.parse(pm.environment.get('specificationSchema'));",
											"const productSchema = JSON.parse(pm.environment.get('productObjectSchemaProductDetails'));",
											"var product = responseData.product;",
											"",
											"pm.test('Validated Product Object', function() {",
											"    pm.expect(ajv.validate(productSchema, product)).to.be.true;",
											"});",
											"",
											"var images = responseData.product.image_assets",
											"const imagesSchema = JSON.parse(pm.environment.get('imagesSchema'));",
											"",
											"images.forEach(function(index){",
											"pm.test('Validated Images in response', function() {",
											"    pm.expect(ajv.validate(imagesSchema, index)).to.be.true;",
											"});",
											"})",
											"",
											"pm.test('Validated Price Object', function() {",
											"    pm.expect(ajv.validate(priceSchema, prices)).to.be.true;",
											"});",
											"",
											"pm.test('Validated Pricing Unit Object', function() {",
											"    pm.expect(ajv.validate(pricingUnitsSchema, priceingUnit)).to.be.true;",
											"});",
											"",
											"badge.forEach(function(index){",
											"pm.test('Validated Badge Object', function() {",
											"    pm.expect(ajv.validate(badgeSchema, index)).to.be.true;",
											"});",
											"});",
											"",
											"pm.test('Validated specifications Object', function() {",
											"    pm.expect(ajv.validate(specificationSchema, specifications)).to.be.true;",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseURL}}/v1/products/{{productCode}}?lang={{langEnglish}}&banner=jfcom&bookingDate={{currentDate}}&storeId={{storeId}}&tenantId=JOE_FRESH",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"v1",
										"products",
										"{{productCode}}"
									],
									"query": [
										{
											"key": "lang",
											"value": "{{langEnglish}}"
										},
										{
											"key": "banner",
											"value": "jfcom"
										},
										{
											"key": "bookingDate",
											"value": "{{currentDate}}"
										},
										{
											"key": "storeId",
											"value": "{{storeId}}"
										},
										{
											"key": "tenantId",
											"value": "JOE_FRESH"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "GET_Product_Details_Controller_200_with_a_pickupType_as_TRUCK",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var Ajv = require('ajv'),",
											"    ajv = new Ajv({logger: console,  allErrors: true});",
											"",
											"var responseData = pm.response.json();",
											"",
											"var prices = responseData.prices;",
											"var priceingUnit = responseData.pricing_units;",
											"var badge = responseData.badges",
											"var specifications = responseData.specifications;",
											"",
											"const priceSchema = JSON.parse(pm.environment.get('priceSchema'));",
											"const pricingUnitsSchema = JSON.parse(pm.environment.get('pricingUnitsSchema'));",
											"const badgeSchema = JSON.parse(pm.environment.get('badgeSchema'));",
											"const specificationSchema = JSON.parse(pm.environment.get('specificationSchema'));",
											"const productSchema = JSON.parse(pm.environment.get('productObjectSchemaProductDetails'));",
											"var product = responseData.product;",
											"",
											"pm.test('Validated Product Object', function() {",
											"    pm.expect(ajv.validate(productSchema, product)).to.be.true;",
											"});",
											"",
											"var images = responseData.product.image_assets",
											"const imagesSchema = JSON.parse(pm.environment.get('imagesSchema'));",
											"",
											"images.forEach(function(index){",
											"pm.test('Validated Images in response', function() {",
											"    pm.expect(ajv.validate(imagesSchema, index)).to.be.true;",
											"});",
											"})",
											"",
											"pm.test('Validated Price Object', function() {",
											"    pm.expect(ajv.validate(priceSchema, prices)).to.be.true;",
											"});",
											"",
											"pm.test('Validated Pricing Unit Object', function() {",
											"    pm.expect(ajv.validate(pricingUnitsSchema, priceingUnit)).to.be.true;",
											"});",
											"",
											"badge.forEach(function(index){",
											"pm.test('Validated Badge Object', function() {",
											"    pm.expect(ajv.validate(badgeSchema, index)).to.be.true;",
											"});",
											"});",
											"",
											"pm.test('Validated specifications Object', function() {",
											"    pm.expect(ajv.validate(specificationSchema, specifications)).to.be.true;",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseURL}}/v1/products/{{productCode}}?lang={{langEnglish}}&banner=loblaw&bookingDate={{currentDate}}&storeId={{storeId}}&pickupType=TRUCK&tenantId=JOE_FRESH",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"v1",
										"products",
										"{{productCode}}"
									],
									"query": [
										{
											"key": "lang",
											"value": "{{langEnglish}}"
										},
										{
											"key": "banner",
											"value": "loblaw"
										},
										{
											"key": "bookingDate",
											"value": "{{currentDate}}"
										},
										{
											"key": "storeId",
											"value": "{{storeId}}"
										},
										{
											"key": "pickupType",
											"value": "TRUCK"
										},
										{
											"key": "tenantId",
											"value": "JOE_FRESH"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "GET_Product_Details_Controller_200_with_a_pickupType_as_CONTAINER",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var Ajv = require('ajv'),",
											"    ajv = new Ajv({logger: console,  allErrors: true});",
											"",
											"var responseData = pm.response.json();",
											"",
											"var prices = responseData.prices;",
											"var priceingUnit = responseData.pricing_units;",
											"var badge = responseData.badges",
											"var specifications = responseData.specifications;",
											"",
											"const priceSchema = JSON.parse(pm.environment.get('priceSchema'));",
											"const pricingUnitsSchema = JSON.parse(pm.environment.get('pricingUnitsSchema'));",
											"const badgeSchema = JSON.parse(pm.environment.get('badgeSchema'));",
											"const specificationSchema = JSON.parse(pm.environment.get('specificationSchema'));",
											"const productSchema = JSON.parse(pm.environment.get('productObjectSchemaProductDetails'));",
											"var product = responseData.product;",
											"",
											"pm.test('Validated Product Object', function() {",
											"    pm.expect(ajv.validate(productSchema, product)).to.be.true;",
											"});",
											"",
											"var images = responseData.product.image_assets",
											"const imagesSchema = JSON.parse(pm.environment.get('imagesSchema'));",
											"",
											"images.forEach(function(index){",
											"pm.test('Validated Images in response', function() {",
											"    pm.expect(ajv.validate(imagesSchema, index)).to.be.true;",
											"});",
											"})",
											"",
											"pm.test('Validated Price Object', function() {",
											"    pm.expect(ajv.validate(priceSchema, prices)).to.be.true;",
											"});",
											"",
											"pm.test('Validated Pricing Unit Object', function() {",
											"    pm.expect(ajv.validate(pricingUnitsSchema, priceingUnit)).to.be.true;",
											"});",
											"",
											"badge.forEach(function(index){",
											"pm.test('Validated Badge Object', function() {",
											"    pm.expect(ajv.validate(badgeSchema, index)).to.be.true;",
											"});",
											"});",
											"",
											"pm.test('Validated specifications Object', function() {",
											"    pm.expect(ajv.validate(specificationSchema, specifications)).to.be.true;",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseURL}}/v1/products/{{productCode}}?lang={{langEnglish}}&banner=loblaw&bookingDate={{currentDate}}&storeId={{storeId}}&pickupType=CONTAINER&tenantId=JOE_FRESH",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"v1",
										"products",
										"{{productCode}}"
									],
									"query": [
										{
											"key": "lang",
											"value": "{{langEnglish}}"
										},
										{
											"key": "banner",
											"value": "loblaw"
										},
										{
											"key": "bookingDate",
											"value": "{{currentDate}}"
										},
										{
											"key": "storeId",
											"value": "{{storeId}}"
										},
										{
											"key": "pickupType",
											"value": "CONTAINER"
										},
										{
											"key": "tenantId",
											"value": "JOE_FRESH"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "GET_Product_Details_Controller_200_with_a_different_procudCode",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var Ajv = require('ajv'),",
											"    ajv = new Ajv({logger: console,  allErrors: true});",
											"",
											"var responseData = pm.response.json();",
											"",
											"var prices = responseData.prices;",
											"var priceingUnit = responseData.pricing_units;",
											"var badge = responseData.badges",
											"var specifications = responseData.specifications;",
											"",
											"const priceSchema = JSON.parse(pm.environment.get('priceSchema'));",
											"const pricingUnitsSchema = JSON.parse(pm.environment.get('pricingUnitsSchema'));",
											"const badgeSchema = JSON.parse(pm.environment.get('badgeSchema'));",
											"const specificationSchema = JSON.parse(pm.environment.get('specificationSchema'));",
											"const productSchema = JSON.parse(pm.environment.get('productObjectSchemaProductDetails'));",
											"var product = responseData.product;",
											"",
											"pm.test('Validated Product Object', function() {",
											"    pm.expect(ajv.validate(productSchema, product)).to.be.true;",
											"});",
											"",
											"var images = responseData.product.image_assets",
											"const imagesSchema = JSON.parse(pm.environment.get('imagesSchema'));",
											"",
											"images.forEach(function(index){",
											"pm.test('Validated Images in response', function() {",
											"    pm.expect(ajv.validate(imagesSchema, index)).to.be.true;",
											"});",
											"})",
											"",
											"pm.test('Validated Price Object', function() {",
											"    pm.expect(ajv.validate(priceSchema, prices)).to.be.true;",
											"});",
											"",
											"pm.test('Validated Pricing Unit Object', function() {",
											"    pm.expect(ajv.validate(pricingUnitsSchema, priceingUnit)).to.be.true;",
											"});",
											"",
											"badge.forEach(function(index){",
											"pm.test('Validated Badge Object', function() {",
											"    pm.expect(ajv.validate(badgeSchema, index)).to.be.true;",
											"});",
											"});",
											"",
											"pm.test('Validated specifications Object', function() {",
											"    pm.expect(ajv.validate(specificationSchema, specifications)).to.be.true;",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseURL}}/v1/products/{{productCode}}?lang={{langEnglish}}&banner=loblaw&bookingDate={{currentDate}}&storeId={{storeId}}&tenantId=JOE_FRESH",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"v1",
										"products",
										"{{productCode}}"
									],
									"query": [
										{
											"key": "lang",
											"value": "{{langEnglish}}"
										},
										{
											"key": "banner",
											"value": "loblaw"
										},
										{
											"key": "bookingDate",
											"value": "{{currentDate}}"
										},
										{
											"key": "storeId",
											"value": "{{storeId}}"
										},
										{
											"key": "",
											"value": "{{productCode}}",
											"disabled": true
										},
										{
											"key": "tenantId",
											"value": "JOE_FRESH"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "GET_Product_Details_Controller_200_all_image_URL_should_be_present",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"var Ajv = require('ajv'),",
											"    ajv = new Ajv({logger: console,  allErrors: true});",
											"",
											"var responseData = pm.response.json();",
											"",
											"var images = responseData.product.image_assets[0];",
											"const imageSchema = JSON.parse(pm.environment.get('imageResponseSchema'))",
											"",
											"pm.test('Validated Images in response', function() {",
											"    pm.expect(ajv.validate(imageSchema, images)).to.be.true;",
											"});",
											"",
											"var prices = responseData.prices;",
											"var priceingUnit = responseData.pricing_units;",
											"var badge = responseData.badges",
											"var specifications = responseData.specifications;",
											"",
											"const priceSchema = JSON.parse(pm.environment.get('priceSchema'));",
											"const pricingUnitsSchema = JSON.parse(pm.environment.get('pricingUnitsSchema'));",
											"const badgeSchema = JSON.parse(pm.environment.get('badgeSchema'));",
											"const specificationSchema = JSON.parse(pm.environment.get('specificationSchema'));",
											"const productSchema = JSON.parse(pm.environment.get('productObjectSchemaProductDetails'));",
											"var product = responseData.product;",
											"",
											"pm.test('Validated Product Object', function() {",
											"    pm.expect(ajv.validate(productSchema, product)).to.be.true;",
											"});",
											"",
											"var images = responseData.product.image_assets",
											"const imagesSchema = JSON.parse(pm.environment.get('imagesSchema'));",
											"",
											"images.forEach(function(index){",
											"pm.test('Validated Images in response', function() {",
											"    pm.expect(ajv.validate(imagesSchema, index)).to.be.true;",
											"});",
											"})",
											"",
											"pm.test('Validated Price Object', function() {",
											"    pm.expect(ajv.validate(priceSchema, prices)).to.be.true;",
											"});",
											"",
											"pm.test('Validated Pricing Unit Object', function() {",
											"    pm.expect(ajv.validate(pricingUnitsSchema, priceingUnit)).to.be.true;",
											"});",
											"",
											"badge.forEach(function(index){",
											"pm.test('Validated Badge Object', function() {",
											"    pm.expect(ajv.validate(badgeSchema, index)).to.be.true;",
											"});",
											"});",
											"",
											"pm.test('Validated specifications Object', function() {",
											"    pm.expect(ajv.validate(specificationSchema, specifications)).to.be.true;",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseURL}}/v1/products/{{productCode}}?lang={{langEnglish}}&banner=loblaw&bookingDate={{currentDate}}&storeId={{storeId}}&tenantId=JOE_FRESH",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"v1",
										"products",
										"{{productCode}}"
									],
									"query": [
										{
											"key": "lang",
											"value": "{{langEnglish}}"
										},
										{
											"key": "banner",
											"value": "loblaw"
										},
										{
											"key": "bookingDate",
											"value": "{{currentDate}}"
										},
										{
											"key": "storeId",
											"value": "{{storeId}}"
										},
										{
											"key": "tenantId",
											"value": "JOE_FRESH"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "GET_Product_Details_Controller_200_list_of_applicable_size_should_be_present",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var Ajv = require('ajv'),",
											"    ajv = new Ajv({logger: console,  allErrors: true});",
											"",
											"var responseData = pm.response.json();",
											"",
											"pm.test('Size should be present in response', function(){",
											"    pm.expect(responseData.product.variant_theme).to.have.property('size')",
											"})",
											"",
											"pm.test('Size should be of type object', function(){",
											"    pm.expect(responseData.product.variant_theme.size).to.be.a('object')",
											"})",
											"",
											"pm.test('Size should be have actual and standard size', function(){",
											"    pm.expect(responseData.product.variant_theme.size).to.have.property('actual');",
											"    pm.expect(responseData.product.variant_theme.size).to.have.property('standard')",
											"})",
											"",
											"pm.test('actual and standard size should be of type string and should not be null', function(){",
											"    pm.expect(responseData.product.variant_theme.size.actual).to.be.a('string');",
											"    pm.expect(responseData.product.variant_theme.size.standard).to.be.a('string');",
											"    pm.expect(responseData.product.variant_theme.size.actual).to.not.eql(null);",
											"    pm.expect(responseData.product.variant_theme.size.standard).to.not.eql(null);",
											"})",
											"",
											"var prices = responseData.prices;",
											"var priceingUnit = responseData.pricing_units;",
											"var badge = responseData.badges",
											"var specifications = responseData.specifications;",
											"",
											"const priceSchema = JSON.parse(pm.environment.get('priceSchema'));",
											"const pricingUnitsSchema = JSON.parse(pm.environment.get('pricingUnitsSchema'));",
											"const badgeSchema = JSON.parse(pm.environment.get('badgeSchema'));",
											"const specificationSchema = JSON.parse(pm.environment.get('specificationSchema'));",
											"",
											"const productSchema = JSON.parse(pm.environment.get('productObjectSchemaProductDetails'));",
											"var product = responseData.product;",
											"",
											"pm.test('Validated Product Object', function() {",
											"    pm.expect(ajv.validate(productSchema, product)).to.be.true;",
											"});",
											"",
											"var images = responseData.product.image_assets",
											"const imagesSchema = JSON.parse(pm.environment.get('imagesSchema'));",
											"",
											"images.forEach(function(index){",
											"pm.test('Validated Images in response', function() {",
											"    pm.expect(ajv.validate(imagesSchema, index)).to.be.true;",
											"});",
											"})",
											"",
											"pm.test('Validated Price Object', function() {",
											"    pm.expect(ajv.validate(priceSchema, prices)).to.be.true;",
											"});",
											"",
											"pm.test('Validated Pricing Unit Object', function() {",
											"    pm.expect(ajv.validate(pricingUnitsSchema, priceingUnit)).to.be.true;",
											"});",
											"",
											"badge.forEach(function(index){",
											"pm.test('Validated Badge Object', function() {",
											"    pm.expect(ajv.validate(badgeSchema, index)).to.be.true;",
											"});",
											"});",
											"",
											"pm.test('Validated specifications Object', function() {",
											"    pm.expect(ajv.validate(specificationSchema, specifications)).to.be.true;",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseURL}}/v1/products/{{productCode}}?lang={{langEnglish}}&banner=loblaw&bookingDate={{currentDate}}&storeId={{storeId}}&tenantId=JOE_FRESH",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"v1",
										"products",
										"{{productCode}}"
									],
									"query": [
										{
											"key": "lang",
											"value": "{{langEnglish}}"
										},
										{
											"key": "banner",
											"value": "loblaw"
										},
										{
											"key": "bookingDate",
											"value": "{{currentDate}}"
										},
										{
											"key": "storeId",
											"value": "{{storeId}}"
										},
										{
											"key": "tenantId",
											"value": "JOE_FRESH"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "GET_Product_Details_Controller_200_availability_status_should_be_present_in_the_response",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var Ajv = require('ajv'),",
											"    ajv = new Ajv({logger: console,  allErrors: true});",
											"",
											"var responseData = pm.response.json();",
											"",
											"pm.test('Avaiability status(stock status) should be present in the response', function(){",
											"    pm.expect(responseData).to.have.property('stock_status')",
											"})",
											"",
											"var prices = responseData.prices;",
											"var priceingUnit = responseData.pricing_units;",
											"var badge = responseData.badges",
											"var specifications = responseData.specifications;",
											"",
											"const priceSchema = JSON.parse(pm.environment.get('priceSchema'));",
											"const pricingUnitsSchema = JSON.parse(pm.environment.get('pricingUnitsSchema'));",
											"const badgeSchema = JSON.parse(pm.environment.get('badgeSchema'));",
											"const specificationSchema = JSON.parse(pm.environment.get('specificationSchema'));",
											"const productSchema = JSON.parse(pm.environment.get('productObjectSchemaProductDetails'));",
											"var product = responseData.product;",
											"",
											"pm.test('Validated Product Object', function() {",
											"    pm.expect(ajv.validate(productSchema, product)).to.be.true;",
											"});",
											"",
											"var images = responseData.product.image_assets",
											"const imagesSchema = JSON.parse(pm.environment.get('imagesSchema'));",
											"",
											"images.forEach(function(index){",
											"pm.test('Validated Images in response', function() {",
											"    pm.expect(ajv.validate(imagesSchema, index)).to.be.true;",
											"});",
											"})",
											"",
											"pm.test('Validated Price Object', function() {",
											"    pm.expect(ajv.validate(priceSchema, prices)).to.be.true;",
											"});",
											"",
											"pm.test('Validated Pricing Unit Object', function() {",
											"    pm.expect(ajv.validate(pricingUnitsSchema, priceingUnit)).to.be.true;",
											"});",
											"",
											"badge.forEach(function(index){",
											"pm.test('Validated Badge Object', function() {",
											"    pm.expect(ajv.validate(badgeSchema, index)).to.be.true;",
											"});",
											"});",
											"",
											"pm.test('Validated specifications Object', function() {",
											"    pm.expect(ajv.validate(specificationSchema, specifications)).to.be.true;",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseURL}}/v1/products/{{productCode}}?lang={{langEnglish}}&banner=loblaw&bookingDate={{currentDate}}&storeId={{storeId}}&tenantId=JOE_FRESH",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"v1",
										"products",
										"{{productCode}}"
									],
									"query": [
										{
											"key": "lang",
											"value": "{{langEnglish}}"
										},
										{
											"key": "banner",
											"value": "loblaw"
										},
										{
											"key": "bookingDate",
											"value": "{{currentDate}}"
										},
										{
											"key": "storeId",
											"value": "{{storeId}}"
										},
										{
											"key": "tenantId",
											"value": "JOE_FRESH"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "GET_Product_Details_Controller_200_applicable_promotions_details_should_be_present_in_the_response",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var Ajv = require('ajv'),",
											"    ajv = new Ajv({logger: console,  allErrors: true});",
											"",
											"var responseData = pm.response.json();",
											"",
											"pm.test('Promotions should be present in response', function(){",
											"    pm.expect(responseData).to.have.property('promotions')",
											"})",
											"",
											"pm.test('Promotions should not be null', function(){",
											"    pm.expect(responseData.promotions).to.not.eql(null)",
											"})",
											"",
											"var prices = responseData.prices;",
											"var priceingUnit = responseData.pricing_units;",
											"var badge = responseData.badges",
											"var specifications = responseData.specifications;",
											"",
											"const priceSchema = JSON.parse(pm.environment.get('priceSchema'));",
											"const pricingUnitsSchema = JSON.parse(pm.environment.get('pricingUnitsSchema'));",
											"const badgeSchema = JSON.parse(pm.environment.get('badgeSchema'));",
											"const specificationSchema = JSON.parse(pm.environment.get('specificationSchema'));",
											"const productSchema = JSON.parse(pm.environment.get('productObjectSchemaProductDetails'));",
											"var product = responseData.product;",
											"",
											"pm.test('Validated Product Object', function() {",
											"    pm.expect(ajv.validate(productSchema, product)).to.be.true;",
											"});",
											"",
											"",
											"var images = responseData.product.image_assets",
											"const imagesSchema = JSON.parse(pm.environment.get('imagesSchema'));",
											"",
											"images.forEach(function(index){",
											"pm.test('Validated Images in response', function() {",
											"    pm.expect(ajv.validate(imagesSchema, index)).to.be.true;",
											"});",
											"})",
											"",
											"pm.test('Validated Price Object', function() {",
											"    pm.expect(ajv.validate(priceSchema, prices)).to.be.true;",
											"});",
											"",
											"pm.test('Validated Pricing Unit Object', function() {",
											"    pm.expect(ajv.validate(pricingUnitsSchema, priceingUnit)).to.be.true;",
											"});",
											"",
											"badge.forEach(function(index){",
											"pm.test('Validated Badge Object', function() {",
											"    pm.expect(ajv.validate(badgeSchema, index)).to.be.true;",
											"});",
											"});",
											"",
											"pm.test('Validated specifications Object', function() {",
											"    pm.expect(ajv.validate(specificationSchema, specifications)).to.be.true;",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseURL}}/v1/products/{{productCode}}?lang={{langEnglish}}&banner=loblaw&bookingDate={{currentDate}}&storeId={{storeId}}&tenantId=JOE_FRESH",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"v1",
										"products",
										"{{productCode}}"
									],
									"query": [
										{
											"key": "lang",
											"value": "{{langEnglish}}"
										},
										{
											"key": "banner",
											"value": "loblaw"
										},
										{
											"key": "bookingDate",
											"value": "{{currentDate}}"
										},
										{
											"key": "storeId",
											"value": "{{storeId}}"
										},
										{
											"key": "tenantId",
											"value": "JOE_FRESH"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "GET_Product_Details_Controller_200_variants_information_should_be_present_in_the_response",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var Ajv = require('ajv'),",
											"    ajv = new Ajv({logger: console,  allErrors: true});",
											"",
											"var responseData = pm.response.json();",
											"",
											"pm.test('Variants should be present in request', function(){",
											"    pm.expect(responseData).to.have.property('variants')",
											"})",
											"",
											"pm.test('Variants should not be null but array', function(){",
											"    pm.expect(responseData.variants).to.not.eql(null)",
											"    pm.expect(responseData.variants).to.be.a('array')",
											"})",
											"",
											"var prices = responseData.prices;",
											"var priceingUnit = responseData.pricing_units;",
											"var badge = responseData.badges",
											"var specifications = responseData.specifications;",
											"const productSchema = JSON.parse(pm.environment.get('productObjectSchemaProductDetails'));",
											"var product = responseData.product;",
											"",
											"pm.test('Validated Product Object', function() {",
											"    pm.expect(ajv.validate(productSchema, product)).to.be.true;",
											"});",
											"",
											"const priceSchema = JSON.parse(pm.environment.get('priceSchema'));",
											"const pricingUnitsSchema = JSON.parse(pm.environment.get('pricingUnitsSchema'));",
											"const badgeSchema = JSON.parse(pm.environment.get('badgeSchema'));",
											"const specificationSchema = JSON.parse(pm.environment.get('specificationSchema'));",
											"",
											"pm.test('Validated Price Object', function() {",
											"    pm.expect(ajv.validate(priceSchema, prices)).to.be.true;",
											"});",
											"",
											"var images = responseData.product.image_assets",
											"const imagesSchema = JSON.parse(pm.environment.get('imagesSchema'));",
											"",
											"images.forEach(function(index){",
											"pm.test('Validated Images in response', function() {",
											"    pm.expect(ajv.validate(imagesSchema, index)).to.be.true;",
											"});",
											"})",
											"",
											"pm.test('Validated Pricing Unit Object', function() {",
											"    pm.expect(ajv.validate(pricingUnitsSchema, priceingUnit)).to.be.true;",
											"});",
											"",
											"badge.forEach(function(index){",
											"pm.test('Validated Badge Object', function() {",
											"    pm.expect(ajv.validate(badgeSchema, index)).to.be.true;",
											"});",
											"});",
											"",
											"pm.test('Validated specifications Object', function() {",
											"    pm.expect(ajv.validate(specificationSchema, specifications)).to.be.true;",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseURL}}/v1/products/{{productCode}}?lang={{langEnglish}}&banner=loblaw&bookingDate={{currentDate}}&storeId={{storeId}}&tenantId=JOE_FRESH",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"v1",
										"products",
										"{{productCode}}"
									],
									"query": [
										{
											"key": "lang",
											"value": "{{langEnglish}}"
										},
										{
											"key": "banner",
											"value": "loblaw"
										},
										{
											"key": "bookingDate",
											"value": "{{currentDate}}"
										},
										{
											"key": "storeId",
											"value": "{{storeId}}"
										},
										{
											"key": "tenantId",
											"value": "JOE_FRESH"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "GET_Product_Details_Controller_200_badges_info_should_be_present_in_the_response",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var Ajv = require('ajv'),",
											"    ajv = new Ajv({logger: console,  allErrors: true});",
											"",
											"var responseData = pm.response.json();",
											"",
											"var prices = responseData.prices;",
											"var priceingUnit = responseData.pricing_units;",
											"var badge = responseData.badges",
											"var specifications = responseData.specifications;",
											"",
											"const priceSchema = JSON.parse(pm.environment.get('priceSchema'));",
											"const pricingUnitsSchema = JSON.parse(pm.environment.get('pricingUnitsSchema'));",
											"const badgeSchema = JSON.parse(pm.environment.get('badgeSchema'));",
											"const specificationSchema = JSON.parse(pm.environment.get('specificationSchema'));",
											"const productSchema = JSON.parse(pm.environment.get('productObjectSchemaProductDetails'));",
											"var product = responseData.product;",
											"",
											"pm.test('Validated Product Object', function() {",
											"    pm.expect(ajv.validate(productSchema, product)).to.be.true;",
											"});",
											"",
											"var images = responseData.product.image_assets",
											"const imagesSchema = JSON.parse(pm.environment.get('imagesSchema'));",
											"",
											"images.forEach(function(index){",
											"pm.test('Validated Images in response', function() {",
											"    pm.expect(ajv.validate(imagesSchema, index)).to.be.true;",
											"});",
											"})",
											"",
											"pm.test('Validated Price Object', function() {",
											"    pm.expect(ajv.validate(priceSchema, prices)).to.be.true;",
											"});",
											"",
											"pm.test('Validated Pricing Unit Object', function() {",
											"    pm.expect(ajv.validate(pricingUnitsSchema, priceingUnit)).to.be.true;",
											"});",
											"",
											"badge.forEach(function(index){",
											"pm.test('Validated Badge Object', function() {",
											"    pm.expect(ajv.validate(badgeSchema, index)).to.be.true;",
											"});",
											"});",
											"",
											"pm.test('Validated specifications Object', function() {",
											"    pm.expect(ajv.validate(specificationSchema, specifications)).to.be.true;",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseURL}}/v1/products/{{productCode}}?lang={{langEnglish}}&banner=loblaw&bookingDate={{currentDate}}&storeId={{storeId}}&tenantId=JOE_FRESH",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"v1",
										"products",
										"{{productCode}}"
									],
									"query": [
										{
											"key": "lang",
											"value": "{{langEnglish}}"
										},
										{
											"key": "banner",
											"value": "loblaw"
										},
										{
											"key": "bookingDate",
											"value": "{{currentDate}}"
										},
										{
											"key": "storeId",
											"value": "{{storeId}}"
										},
										{
											"key": "tenantId",
											"value": "JOE_FRESH"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "GET_Product_Details_Controller_200_ratings_should_be_returned",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var Ajv = require('ajv'),",
											"    ajv = new Ajv({logger: console,  allErrors: true});",
											"",
											"var responseData = pm.response.json();",
											"",
											"pm.test('Product Ratings should be returned in response', function(){",
											"    pm.expect(responseData).to.have.property('ratings')",
											"})",
											"",
											"var prices = responseData.prices;",
											"var priceingUnit = responseData.pricing_units;",
											"var badge = responseData.badges",
											"var specifications = responseData.specifications;",
											"",
											"const priceSchema = JSON.parse(pm.environment.get('priceSchema'));",
											"const pricingUnitsSchema = JSON.parse(pm.environment.get('pricingUnitsSchema'));",
											"const badgeSchema = JSON.parse(pm.environment.get('badgeSchema'));",
											"const specificationSchema = JSON.parse(pm.environment.get('specificationSchema'));",
											"const productSchema = JSON.parse(pm.environment.get('productObjectSchemaProductDetails'));",
											"var product = responseData.product;",
											"",
											"pm.test('Validated Product Object', function() {",
											"    pm.expect(ajv.validate(productSchema, product)).to.be.true;",
											"});",
											"",
											"var images = responseData.product.image_assets",
											"const imagesSchema = JSON.parse(pm.environment.get('imagesSchema'));",
											"",
											"images.forEach(function(index){",
											"pm.test('Validated Images in response', function() {",
											"    pm.expect(ajv.validate(imagesSchema, index)).to.be.true;",
											"});",
											"})",
											"",
											"pm.test('Validated Price Object', function() {",
											"    pm.expect(ajv.validate(priceSchema, prices)).to.be.true;",
											"});",
											"",
											"pm.test('Validated Pricing Unit Object', function() {",
											"    pm.expect(ajv.validate(pricingUnitsSchema, priceingUnit)).to.be.true;",
											"});",
											"",
											"badge.forEach(function(index){",
											"pm.test('Validated Badge Object', function() {",
											"    pm.expect(ajv.validate(badgeSchema, index)).to.be.true;",
											"});",
											"});",
											"",
											"pm.test('Validated specifications Object', function() {",
											"    pm.expect(ajv.validate(specificationSchema, specifications)).to.be.true;",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseURL}}/v1/products/{{productCode}}?lang={{langEnglish}}&banner=loblaw&bookingDate={{currentDate}}&storeId={{storeId}}&tenantId=JOE_FRESH",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"v1",
										"products",
										"{{productCode}}"
									],
									"query": [
										{
											"key": "lang",
											"value": "{{langEnglish}}"
										},
										{
											"key": "banner",
											"value": "loblaw"
										},
										{
											"key": "bookingDate",
											"value": "{{currentDate}}"
										},
										{
											"key": "storeId",
											"value": "{{storeId}}"
										},
										{
											"key": "tenantId",
											"value": "JOE_FRESH"
										}
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									"const productSchemaProductDetials = {",
									"  \"type\": \"object\",",
									"  \"properties\": {",
									"    \"name\": {",
									"      \"type\": \"string\"",
									"    },",
									"    \"description\": {",
									"      \"type\": [\"string\",\"null\"]",
									"    },",
									"    \"brand\": {",
									"      \"type\": \"string\"",
									"    },",
									"    \"link\": {",
									"      \"type\": \"object\",",
									"      \"properties\": {",
									"        \"en\": {",
									"          \"type\": \"string\"",
									"        },",
									"        \"fr\": {",
									"          \"type\": \"string\"",
									"        }",
									"      },",
									"      \"required\": [",
									"        \"en\",",
									"        \"fr\"",
									"      ]",
									"    },",
									"    \"image_assets\": {",
									"      \"type\": \"array\"",
									"    },",
									"    \"package_size\": {",
									"      \"type\": [\"string\",\"null\"]",
									"    },",
									"    \"average_weight\": {",
									"      \"type\": [\"null\",\"string\"]",
									"    },",
									"    \"article_number\": {",
									"      \"type\": [\"string\",\"null\"]",
									"    },",
									"    \"mch_code\": {",
									"      \"type\": [\"string\",\"null\"]",
									"    },",
									"    \"uom\": {",
									"      \"type\": [\"string\",\"null\"]",
									"    },",
									"    \"upc\": {",
									"      \"type\": [\"string\",\"null\"]",
									"    },",
									"    \"aisle\": {",
									"      \"type\": [\"string\",\"null\"]",
									"    },",
									"    \"dietary_callouts\": {",
									"      \"type\": \"object\"",
									"    },",
									"    \"is_variant\": {",
									"      \"type\": \"boolean\"",
									"    },",
									"    \"primary_variant\": {",
									"      \"type\": \"boolean\"",
									"    },",
									"    \"variant_group_id\": {",
									"      \"type\": \"string\"",
									"    },",
									"    \"variant_template\": {",
									"      \"type\": \"array\",",
									"      \"items\": [",
									"        {",
									"          \"type\": \"string\"",
									"        },",
									"        {",
									"          \"type\": \"string\"",
									"        }",
									"      ]",
									"    },",
									"    \"variant_theme\": {",
									"      \"type\": \"object\",",
									"      \"properties\": {",
									"        \"color\": {",
									"          \"type\": \"object\",",
									"          \"properties\": {",
									"            \"actual\": {",
									"              \"type\": \"string\"",
									"            },",
									"            \"standard\": {",
									"              \"type\": \"string\"",
									"            },",
									"            \"url\": {",
									"              \"type\": \"string\"",
									"            },",
									"            \"sort_rank\":{",
									"                \"type\": [\"integer\",\"null\"]",
									"            }",
									"          },",
									"          \"required\": [",
									"          ]",
									"        },",
									"        \"size\": {",
									"          \"type\": \"object\",",
									"          \"properties\": {",
									"            \"actual\": {",
									"              \"type\": \"string\"",
									"            },",
									"            \"standard\": {",
									"              \"type\": \"string\"",
									"            },",
									"            \"sort_rank\": {",
									"              \"type\": \"integer\"",
									"            },",
									"            \"url\": {",
									"              \"type\": \"string\"",
									"            }",
									"          },",
									"          \"required\": [",
									"          ]",
									"        }",
									"      },",
									"      \"required\": [",
									"      ]",
									"    }",
									"  },",
									"  \"required\": [",
									"  ]",
									"}",
									"",
									"pm.environment.set('productObjectSchemaProductDetails', JSON.stringify(productSchemaProductDetials))"
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.test('Status Code | 200 OK', function(){",
									"    pm.response.to.have.status(200)",
									"})",
									"",
									"const schemaToBeValidatedWith = JSON.parse(pm.environment.get('responseSchemaProductDetail'));",
									"",
									"pm.test(\"Validate Response against Schema\", function(){",
									"    pm.response.to.have.jsonSchema(schemaToBeValidatedWith)",
									"})"
								]
							}
						}
					]
				},
				{
					"name": "Negative Tests",
					"item": [
						{
							"name": "GET_Product_Details_Controller_400_with_productCode_made_of_special_characters_only",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Status code | 400 Bad Request', function(){",
											"    pm.response.to.have.status(400)",
											"})",
											"",
											"var responseData = pm.response.json();",
											"",
											"pm.test('Validate error message', function(){",
											"    pm.expect(responseData.message).to.eql(\"400 BAD_REQUEST \\\"Required String parameter 'banner' is not present\\\"\")",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseURL}}/v1/products/)(@_#&*(#@?lang={{langEnglish}}&banner=loblaw&bookingDate={{currentDate}}&storeId=1011",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"v1",
										"products",
										")(@_"
									],
									"hash": "&*(#@?lang={{langEnglish}}&banner=loblaw&bookingDate={{currentDate}}&storeId=1011"
								}
							},
							"response": []
						},
						{
							"name": "GET_Product_Details_Controller_400_with_productCode_is_missing_from_the_query_params",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Status code | 400 Bad Request', function(){",
											"    pm.response.to.have.status(400)",
											"})",
											"",
											"var responseData = pm.response.json();",
											"",
											"pm.test('Validate error message', function(){",
											"    pm.expect(responseData.message).to.eql(\"400 BAD_REQUEST \\\"Required String parameter 'productCodes' is not present\\\"\")",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseURL}}/v1/products/?lang={{langEnglish}}&banner=loblaw&bookingDate={{currentDate}}&storeId=1011",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"v1",
										"products",
										""
									],
									"query": [
										{
											"key": "lang",
											"value": "{{langEnglish}}"
										},
										{
											"key": "banner",
											"value": "loblaw"
										},
										{
											"key": "bookingDate",
											"value": "{{currentDate}}"
										},
										{
											"key": "storeId",
											"value": "1011"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "GET_Product_Details_Controller_400_with_productCode_is_kep_as_empty",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Status code | 400 Bad Request', function(){",
											"    pm.response.to.have.status(400)",
											"})",
											"",
											"var responseData = pm.response.json();",
											"",
											"pm.test('Validate error code in response body', function(){",
											"    pm.expect(responseData.error_code).to.eql(\"400\")",
											"});",
											"",
											"pm.test('Validate error message', function(){",
											"    pm.expect(responseData.message).to.eql(\"getProductDetails.lang: language code is required\")",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseURL}}/v1/products/{{productCode}}?banner=loblaw&bookingDate={{currentDate}}&storeId=1011",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"v1",
										"products",
										"{{productCode}}"
									],
									"query": [
										{
											"key": "lang",
											"value": "{{langEnglish}}",
											"disabled": true
										},
										{
											"key": "banner",
											"value": "loblaw"
										},
										{
											"key": "bookingDate",
											"value": "{{currentDate}}"
										},
										{
											"key": "storeId",
											"value": "1011"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "GET_Product_Details_Controller_400_with_lang_kept_as_empty",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Status Code | 400 Bad Request', function(){",
											"    pm.response.to.have.status(400)",
											"})",
											"",
											"var responseData = pm.response.json();",
											"",
											"pm.test('Validate error message', function(){",
											"    pm.expect(pm.response.text()).to.contain('invalid language')",
											"})",
											"",
											"pm.test('Validate error code in response body', function(){",
											"    pm.expect(responseData.error_code).to.eql(\"400\")",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseURL}}/v1/products/{{productCode}}?lang=&banner=loblaw&bookingDate={{currentDate}}&storeId=1011",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"v1",
										"products",
										"{{productCode}}"
									],
									"query": [
										{
											"key": "lang",
											"value": ""
										},
										{
											"key": "banner",
											"value": "loblaw"
										},
										{
											"key": "bookingDate",
											"value": "{{currentDate}}"
										},
										{
											"key": "storeId",
											"value": "1011"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "GET_Product_Details_Controller_400_with_invalid_lang",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Status Code | 400 Bad Request', function(){",
											"    pm.response.to.have.status(400)",
											"})",
											"",
											"var responseData = pm.response.json();",
											"",
											"pm.test('Validate error message', function(){",
											"    pm.expect(pm.response.text()).to.contain('invalid language')",
											"})",
											"",
											"pm.test('Validate error code in response body', function(){",
											"    pm.expect(responseData.error_code).to.eql(\"400\")",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseURL}}/v1/products/{{productCode}}?lang=ir&banner=loblaw&bookingDate={{currentDate}}&storeId=1011",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"v1",
										"products",
										"{{productCode}}"
									],
									"query": [
										{
											"key": "lang",
											"value": "ir"
										},
										{
											"key": "banner",
											"value": "loblaw"
										},
										{
											"key": "bookingDate",
											"value": "{{currentDate}}"
										},
										{
											"key": "storeId",
											"value": "1011"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "GET_Product_Details_Controller_400_with_lang_made_of_special_characters",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Status code | 400 Bad Request', function(){",
											"    pm.response.to.have.status(400)",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseURL}}/v1/products/{{productCode}}?lang=%^%26*&banner=loblaw&bookingDate={{currentDate}}&storeId=1011",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"v1",
										"products",
										"{{productCode}}"
									],
									"query": [
										{
											"key": "lang",
											"value": "%^%26*"
										},
										{
											"key": "banner",
											"value": "loblaw"
										},
										{
											"key": "bookingDate",
											"value": "{{currentDate}}"
										},
										{
											"key": "storeId",
											"value": "1011"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "GET_Product_Details_Controller_400_with_banner_missing",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Status code | 400 Bad Request', function(){",
											"    pm.response.to.have.status(400)",
											"})",
											"",
											"var responseData = pm.response.json();",
											"",
											"pm.test('Validate error code in response body', function(){",
											"    pm.expect(responseData.error_code).to.eql(\"400\")",
											"});",
											"",
											"pm.test('Validate error message', function(){",
											"    pm.expect(responseData.message).to.eql(\"400 BAD_REQUEST \\\"Required String parameter 'banner' is not present\\\"\")",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseURL}}/v1/products/{{productCode}}?lang={{langEnglish}}&bookingDate={{currentDate}}&storeId=1011",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"v1",
										"products",
										"{{productCode}}"
									],
									"query": [
										{
											"key": "lang",
											"value": "{{langEnglish}}"
										},
										{
											"key": "banner",
											"value": "loblaw",
											"disabled": true
										},
										{
											"key": "bookingDate",
											"value": "{{currentDate}}"
										},
										{
											"key": "storeId",
											"value": "1011"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "GET_Product_Details_Controller_400_with_banner_empty",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Status code | 400 bad Request', function(){",
											"    pm.response.to.have.status(400)",
											"})",
											"",
											"var responseBody = pm.response.json();",
											"",
											"pm.test('Valiated the error message', function(){",
											"    pm.expect(responseBody.message).to.eql('getProductDetails.banner: Invalid banner value')",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseURL}}/v1/products/{{productCode}}?lang={{langEnglish}}&banner=&bookingDate={{currentDate}}&storeId=1011",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"v1",
										"products",
										"{{productCode}}"
									],
									"query": [
										{
											"key": "lang",
											"value": "{{langEnglish}}"
										},
										{
											"key": "banner",
											"value": ""
										},
										{
											"key": "bookingDate",
											"value": "{{currentDate}}"
										},
										{
											"key": "storeId",
											"value": "1011"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "GET_Product_Details_Controller_400_with_banner_invalid",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Status code | 400 bad Request', function(){",
											"    pm.response.to.have.status(400)",
											"})",
											"",
											"var responseBody = pm.response.json();",
											"",
											"pm.test('Valiated the error message', function(){",
											"    pm.expect(responseBody.message).to.eql('getProductDetails.banner: Invalid banner value')",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseURL}}/v1/products/{{productCode}}?lang={{langEnglish}}&banner=online&bookingDate={{currentDate}}&storeId=1011",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"v1",
										"products",
										"{{productCode}}"
									],
									"query": [
										{
											"key": "lang",
											"value": "{{langEnglish}}"
										},
										{
											"key": "banner",
											"value": "online"
										},
										{
											"key": "bookingDate",
											"value": "{{currentDate}}"
										},
										{
											"key": "storeId",
											"value": "1011"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "GET_Product_Details_Controller_400_with_banner_made_of_special_characters.",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Status code | 400 bad Request', function(){",
											"    pm.response.to.have.status(400)",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseURL}}/v1/products/{{productCode}}?lang={{langEnglish}}&banner=%%23*%&bookingDate={{currentDate}}&storeId=1011",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"v1",
										"products",
										"{{productCode}}"
									],
									"query": [
										{
											"key": "lang",
											"value": "{{langEnglish}}"
										},
										{
											"key": "banner",
											"value": "%%23*%"
										},
										{
											"key": "bookingDate",
											"value": "{{currentDate}}"
										},
										{
											"key": "storeId",
											"value": "1011"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "GET_Product_Details_Controller_400_with_bookingDate_missing",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Status code | 400 Bad Request', function(){",
											"    pm.response.to.have.status(400)",
											"})",
											"",
											"var responseData = pm.response.json();",
											"",
											"pm.test('Validate error code in response body', function(){",
											"    pm.expect(responseData.error_code).to.eql(\"400\")",
											"});",
											"",
											"pm.test('Validate error message', function(){",
											"    pm.expect(responseData.message).to.eql(\"400 BAD_REQUEST \\\"Required String parameter 'bookingDate' is not present\\\"\")",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseURL}}/v1/products/{{productCode}}?lang={{langEnglish}}&banner=loblaw&storeId=1011",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"v1",
										"products",
										"{{productCode}}"
									],
									"query": [
										{
											"key": "lang",
											"value": "{{langEnglish}}"
										},
										{
											"key": "banner",
											"value": "loblaw"
										},
										{
											"key": "bookingDate",
											"value": "{{currentDate}}",
											"disabled": true
										},
										{
											"key": "storeId",
											"value": "1011"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "GET_Product_Details_Controller_400_with_bookingDate_empty",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Status code | 400 Bad Request', function(){",
											"    pm.response.to.have.status(400)",
											"})",
											"",
											"var responseData = pm.response.json();",
											"",
											"pm.test('Validate error code in response body', function(){",
											"    pm.expect(responseData.error_code).to.eql(\"400\")",
											"});",
											"",
											"pm.test('Validate error message', function(){",
											"    pm.expect(responseData.message).to.eql(\"getProductDetails.bookingDate: invalid date format\")",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseURL}}/v1/products/{{productCode}}?lang={{langEnglish}}&banner=loblaw&bookingDate=&storeId=1011",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"v1",
										"products",
										"{{productCode}}"
									],
									"query": [
										{
											"key": "lang",
											"value": "{{langEnglish}}"
										},
										{
											"key": "banner",
											"value": "loblaw"
										},
										{
											"key": "bookingDate",
											"value": ""
										},
										{
											"key": "storeId",
											"value": "1011"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "GET_Product_Details_Controller_400_with_bookingDate_of_invalid_format",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Status code | 400 Bad Request', function(){",
											"    pm.response.to.have.status(400)",
											"})",
											"",
											"var responseData = pm.response.json();",
											"",
											"pm.test('Validate error code in response body', function(){",
											"    pm.expect(responseData.error_code).to.eql(\"400\")",
											"});",
											"",
											"pm.test('Validate error message', function(){",
											"    pm.expect(responseData.message).to.eql(\"getProductDetails.bookingDate: invalid date format\")",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseURL}}/v1/products/{{productCode}}?lang={{langEnglish}}&banner=loblaw&bookingDate=20222-09-21&storeId=1011",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"v1",
										"products",
										"{{productCode}}"
									],
									"query": [
										{
											"key": "lang",
											"value": "{{langEnglish}}"
										},
										{
											"key": "banner",
											"value": "loblaw"
										},
										{
											"key": "bookingDate",
											"value": "20222-09-21"
										},
										{
											"key": "storeId",
											"value": "1011"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "GET_Product_Details_Controller_400_with_storeId_missing",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Status code | 400 Bad Request', function(){",
											"    pm.response.to.have.status(400)",
											"})",
											"",
											"var responseData = pm.response.json();",
											"",
											"pm.test('Validate error code in response body', function(){",
											"    pm.expect(responseData.error_code).to.eql(\"400\")",
											"});",
											"",
											"pm.test('Validate error message', function(){",
											"    pm.expect(responseData.message).to.eql(\"400 BAD_REQUEST \\\"Required String parameter 'storeId' is not present\\\"\")",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseURL}}/v1/products/{{productCode}}?lang={{langEnglish}}&banner=loblaw&bookingDate={{currentDate}}",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"v1",
										"products",
										"{{productCode}}"
									],
									"query": [
										{
											"key": "lang",
											"value": "{{langEnglish}}"
										},
										{
											"key": "banner",
											"value": "loblaw"
										},
										{
											"key": "bookingDate",
											"value": "{{currentDate}}"
										},
										{
											"key": "storeId",
											"value": "1011",
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "GET_Product_Details_Controller_400_with_storeId_empty",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Status code | 400 Bad Request', function(){",
											"    pm.response.to.have.status(400)",
											"})",
											"",
											"var responseData = pm.response.json();",
											"",
											"pm.test('Validate error code in response body', function(){",
											"    pm.expect(responseData.error_code).to.eql(\"400\")",
											"});",
											"",
											"pm.test('Validate error message', function(){",
											"    pm.expect(responseData.message).to.eql(\"getProductDetails.storeId: store id must not be blank\")",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseURL}}/v1/products/{{productCode}}?lang={{langEnglish}}&banner=loblaw&bookingDate={{currentDate}}&storeId=",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"v1",
										"products",
										"{{productCode}}"
									],
									"query": [
										{
											"key": "lang",
											"value": "{{langEnglish}}"
										},
										{
											"key": "banner",
											"value": "loblaw"
										},
										{
											"key": "bookingDate",
											"value": "{{currentDate}}"
										},
										{
											"key": "storeId",
											"value": ""
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "GET_Product_Details_Controller_400_with_storeId_made_of_special_characters.",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Status code | 400 Bad Request', function(){",
											"    pm.response.to.have.status(400)",
											"})",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseURL}}/v1/products/{{productCode}}?lang={{langEnglish}}&banner=loblaw&bookingDate={{currentDate}}&storeId=^%26*^%26*",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"v1",
										"products",
										"{{productCode}}"
									],
									"query": [
										{
											"key": "lang",
											"value": "{{langEnglish}}"
										},
										{
											"key": "banner",
											"value": "loblaw"
										},
										{
											"key": "bookingDate",
											"value": "{{currentDate}}"
										},
										{
											"key": "storeId",
											"value": "^%26*^%26*"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "GET_Product_Details_Controller_404_with_invalid_pickupType",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Status code | 404 Not Found', function(){",
											"    pm.response.to.have.status(404)",
											"})",
											"",
											"var repsonseData = pm.response.json();",
											"",
											"pm.test('Validate error code in response body', function(){",
											"    pm.expect(repsonseData.error_code).to.eql(\"404\")",
											"})",
											"",
											"pm.test('Validate error message', function(){",
											"    pm.expect(pm.response.text()).to.contain('not found')",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseURL}}/v1/products/{{productCode}}?lang={{langEnglish}}&banner=loblaw&bookingDate={{currentDate}}&storeId=1011&pickupType=abcd",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"v1",
										"products",
										"{{productCode}}"
									],
									"query": [
										{
											"key": "lang",
											"value": "{{langEnglish}}"
										},
										{
											"key": "banner",
											"value": "loblaw"
										},
										{
											"key": "bookingDate",
											"value": "{{currentDate}}"
										},
										{
											"key": "storeId",
											"value": "1011"
										},
										{
											"key": "pickupType",
											"value": "abcd"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "GET_Product_Details_Controller_400_with_pickupType_made_of_special_characters",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Status code | 400 bad Request', function(){",
											"    pm.response.to.have.status(400)",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseURL}}/v1/products/{{productCode}}?lang={{langEnglish}}&banner=loblaw&bookingDate={{currentDate}}&storeId=1011&pickupType=()*^%26(*^",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"v1",
										"products",
										"{{productCode}}"
									],
									"query": [
										{
											"key": "lang",
											"value": "{{langEnglish}}"
										},
										{
											"key": "banner",
											"value": "loblaw"
										},
										{
											"key": "bookingDate",
											"value": "{{currentDate}}"
										},
										{
											"key": "storeId",
											"value": "1011"
										},
										{
											"key": "pickupType",
											"value": "()*^%26(*^"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "GET_Product_Details_Controller_400_with_timeSlot_is_of_invalid_format",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Status code | 400 bad Request', function(){",
											"    pm.response.to.have.status(400)",
											"})",
											"",
											"var responseBody = pm.response.json();",
											"",
											"pm.test('Valiated the error message', function(){",
											"    pm.expect(responseBody.message).to.eql('getProductDetails.timeSlot: Invalid timeSlot. Provide valid UTC Epoch time format. Ex: 1663679905')",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseURL}}/v1/products/{{productCode}}?lang={{langEnglish}}&banner=loblaw&bookingDate={{currentDate}}&storeId=1011&timeSlot=202008-22T12:54:03.707Z",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"v1",
										"products",
										"{{productCode}}"
									],
									"query": [
										{
											"key": "lang",
											"value": "{{langEnglish}}"
										},
										{
											"key": "banner",
											"value": "loblaw"
										},
										{
											"key": "bookingDate",
											"value": "{{currentDate}}"
										},
										{
											"key": "storeId",
											"value": "1011"
										},
										{
											"key": "timeSlot",
											"value": "202008-22T12:54:03.707Z"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "GET_Product_Details_Controller_404_with_invalid_tenantId",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Status code | 404 Not Found', function(){",
											"    pm.response.to.have.status(404)",
											"})",
											"",
											"var repsonseData = pm.response.json();",
											"",
											"pm.test('Validate error code in response body', function(){",
											"    pm.expect(repsonseData.error_code).to.eql(\"404\")",
											"})",
											"",
											"pm.test('Validate error message', function(){",
											"    pm.expect(pm.response.text()).to.contain('not found')",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseURL}}/v1/products/{{productCode}}?lang={{langEnglish}}&banner=loblaw&bookingDate={{currentDate}}&storeId=1011&tenantId=abcd23232",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"v1",
										"products",
										"{{productCode}}"
									],
									"query": [
										{
											"key": "lang",
											"value": "{{langEnglish}}"
										},
										{
											"key": "banner",
											"value": "loblaw"
										},
										{
											"key": "bookingDate",
											"value": "{{currentDate}}"
										},
										{
											"key": "storeId",
											"value": "1011"
										},
										{
											"key": "tenantId",
											"value": "abcd23232"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "GET_Product_Details_Controller_400_with_tenantId_made_of_special_characters",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Status code | 400 bad Request', function(){",
											"    pm.response.to.have.status(400)",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseURL}}/v1/products/{{productCode}}?lang={{langEnglish}}&banner=loblaw&bookingDate={{currentDate}}&storeId=1011&tenantId=(*^*%26%$%26^",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"v1",
										"products",
										"{{productCode}}"
									],
									"query": [
										{
											"key": "lang",
											"value": "{{langEnglish}}"
										},
										{
											"key": "banner",
											"value": "loblaw"
										},
										{
											"key": "bookingDate",
											"value": "{{currentDate}}"
										},
										{
											"key": "storeId",
											"value": "1011"
										},
										{
											"key": "tenantId",
											"value": "(*^*%26%$%26^"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "GET_Product_Details_Controller_405_with_invalid_HTTP_method",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Status code | 405 Method Not Allowed', function(){",
											"    pm.response.to.have.status(405)",
											"})",
											"",
											"var responseData = pm.response.json();",
											"",
											"pm.test('Validate status code in response', function(){",
											"    pm.expect(responseData.status).to.eql(405)",
											"})",
											"",
											"pm.test('Validate error message', function(){",
											"    pm.expect(responseData.error).to.eql(\"Method Not Allowed\")",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [],
								"url": {
									"raw": "{{baseURL}}/v1/products/{{productCode}}?lang={{langEnglish}}&banner=loblaw&bookingDate={{currentDate}}&storeId=1011",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"v1",
										"products",
										"{{productCode}}"
									],
									"query": [
										{
											"key": "lang",
											"value": "{{langEnglish}}"
										},
										{
											"key": "banner",
											"value": "loblaw"
										},
										{
											"key": "bookingDate",
											"value": "{{currentDate}}"
										},
										{
											"key": "storeId",
											"value": "1011"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "GET_Product_Details_Controller_400_with_isupc_made_of_special_characters",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Status code | 400 Bad Request', function(){",
											"    pm.response.to.have.status(400)",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseURL}}/v1/products/{{productCode}}?lang={{langEnglish}}&banner=loblaw&bookingDate={{currentDate}}&storeId=1011&is_upc=%%26*%",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"v1",
										"products",
										"{{productCode}}"
									],
									"query": [
										{
											"key": "lang",
											"value": "{{langEnglish}}"
										},
										{
											"key": "banner",
											"value": "loblaw"
										},
										{
											"key": "bookingDate",
											"value": "{{currentDate}}"
										},
										{
											"key": "storeId",
											"value": "1011"
										},
										{
											"key": "is_upc",
											"value": "%%26*%"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "GET_Product_Details_Controller_400_with_isupc_not_of_type_boolean",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Status code | 400 Bad Request', function(){",
											"    pm.response.to.have.status(400)",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseURL}}/v1/products/{{productCode}}?lang={{langEnglish}}&banner=loblaw&bookingDate={{currentDate}}&storeId=1011&is_upc=sdfewfew",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"v1",
										"products",
										"{{productCode}}"
									],
									"query": [
										{
											"key": "lang",
											"value": "{{langEnglish}}"
										},
										{
											"key": "banner",
											"value": "loblaw"
										},
										{
											"key": "bookingDate",
											"value": "{{currentDate}}"
										},
										{
											"key": "storeId",
											"value": "1011"
										},
										{
											"key": "is_upc",
											"value": "sdfewfew"
										}
									]
								}
							},
							"response": []
						}
					]
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							"const responseSchemaProductDetail = ",
							"    {",
							"      \"type\": \"object\",",
							"      \"properties\": {",
							"        \"code\": {",
							"          \"type\": \"string\"",
							"        },",
							"        \"product\": {",
							"          \"type\": \"object\"",
							"        },",
							"        \"prices\": {",
							"          \"type\": \"object\"",
							"        },",
							"        \"pricing_units\": {",
							"          \"type\": \"object\"",
							"        },",
							"        \"badges\": {",
							"          \"type\": \"array\"",
							"        },",
							"        \"ratings\": {",
							"          \"type\": [\"object\",\"null\"]",
							"        },",
							"        \"promotions\": {",
							"          \"type\": \"array\"",
							"        },",
							"        \"shoppable\": {",
							"          \"type\": \"boolean\"",
							"        },",
							"        \"stock\": {",
							"          \"type\": [\"integer\", \"null\"]",
							"        },",
							"        \"stock_status\": {",
							"          \"type\": [\"string\",\"null\"]",
							"        },",
							"        \"seller_id\": {",
							"          \"type\": [\"string\", \"null\"]",
							"        },",
							"        \"seller_name\": {",
							"          \"type\": [\"string\", \"null\"]",
							"        },",
							"        \"taxes\": {",
							"          \"type\": \"object\"",
							"        },",
							"        \"fees\": {",
							"          \"type\": \"object\"",
							"        },",
							"        \"specifications\": {",
							"          \"type\": [\"object\",\"null\"]",
							"        },",
							"        \"custom_specifications\": {",
							"          \"type\": [\"string\", \"null\"]",
							"        },",
							"        \"offer_type\": {",
							"          \"type\": [\"string\", \"null\"]",
							"        },",
							"        \"offer_id\": {",
							"          \"type\": [\"string\", \"null\"]",
							"        },",
							"        \"relative_delivery_quantity\": {",
							"          \"type\": [\"integer\", \"null\"]",
							"        },",
							"        \"fulfillment\": {",
							"          \"type\": [\"object\", \"null\"]",
							"        },",
							"        \"nav_categories\": {",
							"          \"type\": \"array\"",
							"        },",
							"        \"nutrition_facts\": {",
							"          \"type\": [\"array\",\"null\"]",
							"        },",
							"        \"variants\": {",
							"          \"type\": \"array\"",
							"        }",
							"      },",
							"      \"required\": [",
							"        \"code\",",
							"        \"badges\"",
							"      ]",
							"    }",
							"",
							"pm.environment.set('responseSchemaProductDetail', JSON.stringify(responseSchemaProductDetail));",
							"",
							"const imagesSchema = {",
							"  \"type\": \"object\",",
							"  \"properties\": {",
							"    \"image_url\": {",
							"      \"type\": [\"null\",\"string\"]",
							"    },",
							"    \"small_url\": {",
							"      \"type\": \"string\"",
							"    },",
							"    \"medium_url\": {",
							"      \"type\": \"string\"",
							"    },",
							"    \"large_url\": {",
							"      \"type\": \"string\"",
							"    },",
							"    \"small_retina_url\": {",
							"      \"type\": \"string\"",
							"    },",
							"    \"medium_retina_url\": {",
							"      \"type\": \"string\"",
							"    },",
							"    \"large_retina_url\": {",
							"      \"type\": \"string\"",
							"    },",
							"    \"alt_text\": {",
							"      \"type\": [\"null\",\"string\"]",
							"    },",
							"    \"bg_color\": {",
							"      \"type\": [\"null\",\"string\"]",
							"    },",
							"    \"format\": {",
							"      \"type\": [\"null\",\"string\"]",
							"    },",
							"    \"gallery_index\": {",
							"      \"type\": [\"null\",\"string\"]",
							"    },",
							"    \"type\": {",
							"      \"type\": [\"null\",\"string\"]",
							"    },",
							"    \"url\": {",
							"      \"type\": [\"null\",\"string\"]",
							"    }",
							"  },",
							"  \"required\": [",
							"  ]",
							"}",
							"",
							"pm.environment.set('imagesSchema', JSON.stringify(imagesSchema));"
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "Product-lite-controller",
			"item": [
				{
					"name": "Positive Tests",
					"item": [
						{
							"name": "GET_Product_Lite_200_with_all_the_query_params",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"var Ajv = require('ajv'),",
											"    ajv = new Ajv({logger: console,  allErrors: true});",
											"",
											"var responseData = pm.response.json();",
											"var product = responseData[0].product;",
											"var prices = responseData[0].prices;",
											"var badge = responseData[0].badges;",
											"var variants = responseData[0].variants[0];",
											"var variants_second = responseData[0].variants[1];",
											"var specifications = responseData[0].specifications;",
											"",
											"const productSchemaForLite = JSON.parse(pm.environment.get('productSchemaForLite'));",
											"const priceSchema = JSON.parse(pm.environment.get('priceSchema'));",
											"const badgeSchema = JSON.parse(pm.environment.get('badgeSchema'));",
											"const variantSchemaForLite = JSON.parse(pm.environment.get('variantSchemaForLite'));",
											"const specificationSchema = JSON.parse(pm.environment.get('specificationSchema'));",
											"",
											"var images = responseData[0].product.image_assets;",
											"const imagesSchema = JSON.parse(pm.environment.get('imagesSchema'));",
											"",
											"images.forEach(function(index){",
											"pm.test('Validated Images in response', function() {",
											"    pm.expect(ajv.validate(imagesSchema, index)).to.be.true;",
											"});",
											"})",
											"",
											"pm.test('Validated Product Object', function() {",
											"    pm.expect(ajv.validate(productSchemaForLite, product)).to.be.true;",
											"});",
											"",
											"pm.test('Validated Price Object', function() {",
											"    pm.expect(ajv.validate(priceSchema, prices)).to.be.true;",
											"});",
											"",
											"badge.forEach(function(index){",
											"pm.test('Validated Badge Object', function() {",
											"    pm.expect(ajv.validate(badgeSchema, index)).to.be.true;",
											"});",
											"});",
											"",
											"pm.test('Validated specifications Object', function() {",
											"    pm.expect(ajv.validate(specificationSchema, specifications)).to.be.true;",
											"});",
											"",
											"pm.test('Validated variant object', function() {",
											"    pm.expect(ajv.validate(variantSchemaForLite, variants)).to.be.true;",
											"});",
											"",
											"pm.test('Validated variant second object', function() {",
											"    pm.expect(ajv.validate(variantSchemaForLite, variants_second)).to.be.true;",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseURL}}/v1/products/light?productCodes={{productCode}}&lang={{langEnglish}}&banner=loblaw&bookingDate={{currentDate}}&storeId={{storeId}}&pickupType=STORE&pcId=99971809&tenantId=JOE_FRESH",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"v1",
										"products",
										"light"
									],
									"query": [
										{
											"key": "productCodes",
											"value": "{{productCode}}"
										},
										{
											"key": "lang",
											"value": "{{langEnglish}}"
										},
										{
											"key": "banner",
											"value": "loblaw"
										},
										{
											"key": "bookingDate",
											"value": "{{currentDate}}"
										},
										{
											"key": "storeId",
											"value": "{{storeId}}"
										},
										{
											"key": "pickupType",
											"value": "STORE"
										},
										{
											"key": "pcId",
											"value": "99971809"
										},
										{
											"key": "tenantId",
											"value": "JOE_FRESH"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "GET_Product_Lite_200_with_mandatory_query_params_only",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var Ajv = require('ajv'),",
											"    ajv = new Ajv({logger: console,  allErrors: true});",
											"",
											"var responseData = pm.response.json();",
											"var product = responseData[0].product;",
											"var prices = responseData[0].prices;",
											"var badge = responseData[0].badges;",
											"var variants = responseData[0].variants[0];",
											"var variants_second = responseData[0].variants[1];",
											"var specifications = responseData[0].specifications;",
											"",
											"const productSchemaForLite = JSON.parse(pm.environment.get('productSchemaForLite'));",
											"const priceSchema = JSON.parse(pm.environment.get('priceSchema'));",
											"const badgeSchema = JSON.parse(pm.environment.get('badgeSchema'));",
											"const variantSchemaForLite = JSON.parse(pm.environment.get('variantSchemaForLite'));",
											"const specificationSchema = JSON.parse(pm.environment.get('specificationSchema'));",
											"",
											"var images = responseData[0].product.image_assets;",
											"const imagesSchema = JSON.parse(pm.environment.get('imagesSchema'));",
											"",
											"images.forEach(function(index){",
											"pm.test('Validated Images in response', function() {",
											"    pm.expect(ajv.validate(imagesSchema, index)).to.be.true;",
											"});",
											"})",
											"",
											"pm.test('Validated Product Object', function() {",
											"    pm.expect(ajv.validate(productSchemaForLite, product)).to.be.true;",
											"});",
											"",
											"pm.test('Validated Price Object', function() {",
											"    pm.expect(ajv.validate(priceSchema, prices)).to.be.true;",
											"});",
											"",
											"badge.forEach(function(index){",
											"pm.test('Validated Badge Object', function() {",
											"    pm.expect(ajv.validate(badgeSchema, index)).to.be.true;",
											"});",
											"});",
											"",
											"pm.test('Validated variant object', function() {",
											"    pm.expect(ajv.validate(variantSchemaForLite, variants)).to.be.true;",
											"});",
											"",
											"pm.test('Validated variant second object', function() {",
											"    pm.expect(ajv.validate(variantSchemaForLite, variants_second)).to.be.true;",
											"});",
											"",
											"pm.test('Validated specifications Object', function() {",
											"    pm.expect(ajv.validate(specificationSchema, specifications)).to.be.true;",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseURL}}/v1/products/light?productCodes={{productCode}}&lang={{langEnglish}}&banner=loblaw&bookingDate={{currentDate}}&storeId={{storeId}}&tenantId=JOE_FRESH",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"v1",
										"products",
										"light"
									],
									"query": [
										{
											"key": "productCodes",
											"value": "{{productCode}}"
										},
										{
											"key": "lang",
											"value": "{{langEnglish}}"
										},
										{
											"key": "banner",
											"value": "loblaw"
										},
										{
											"key": "bookingDate",
											"value": "{{currentDate}}"
										},
										{
											"key": "storeId",
											"value": "{{storeId}}"
										},
										{
											"key": "tenantId",
											"value": "JOE_FRESH"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "GET_Product_Lite_200_with_lang_query_param_en",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var Ajv = require('ajv'),",
											"    ajv = new Ajv({logger: console,  allErrors: true});",
											"",
											"var responseData = pm.response.json();",
											"var product = responseData[0].product;",
											"var prices = responseData[0].prices;",
											"var badge = responseData[0].badges;",
											"var variants = responseData[0].variants[0];",
											"var variants_second = responseData[0].variants[1];",
											"var specifications = responseData[0].specifications;",
											"",
											"const productSchemaForLite = JSON.parse(pm.environment.get('productSchemaForLite'));",
											"const priceSchema = JSON.parse(pm.environment.get('priceSchema'));",
											"const badgeSchema = JSON.parse(pm.environment.get('badgeSchema'));",
											"const variantSchemaForLite = JSON.parse(pm.environment.get('variantSchemaForLite'));",
											"const specificationSchema = JSON.parse(pm.environment.get('specificationSchema'));",
											"",
											"var images = responseData[0].product.image_assets;",
											"const imagesSchema = JSON.parse(pm.environment.get('imagesSchema'));",
											"",
											"images.forEach(function(index){",
											"pm.test('Validated Images in response', function() {",
											"    pm.expect(ajv.validate(imagesSchema, index)).to.be.true;",
											"});",
											"})",
											"",
											"pm.test('Validated Product Object', function() {",
											"    pm.expect(ajv.validate(productSchemaForLite, product)).to.be.true;",
											"});",
											"",
											"pm.test('Validated Price Object', function() {",
											"    pm.expect(ajv.validate(priceSchema, prices)).to.be.true;",
											"});",
											"",
											"badge.forEach(function(index){",
											"pm.test('Validated Badge Object', function() {",
											"    pm.expect(ajv.validate(badgeSchema, index)).to.be.true;",
											"});",
											"});",
											"",
											"pm.test('Validated variant object', function() {",
											"    pm.expect(ajv.validate(variantSchemaForLite, variants)).to.be.true;",
											"});",
											"",
											"pm.test('Validated variant second object', function() {",
											"    pm.expect(ajv.validate(variantSchemaForLite, variants_second)).to.be.true;",
											"});",
											"",
											"pm.test('Validated specifications Object', function() {",
											"    pm.expect(ajv.validate(specificationSchema, specifications)).to.be.true;",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseURL}}/v1/products/light?productCodes={{productCode}}&lang={{langEnglish}}&banner=loblaw&bookingDate={{currentDate}}&storeId={{storeId}}&tenantId=JOE_FRESH",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"v1",
										"products",
										"light"
									],
									"query": [
										{
											"key": "productCodes",
											"value": "{{productCode}}"
										},
										{
											"key": "lang",
											"value": "{{langEnglish}}"
										},
										{
											"key": "banner",
											"value": "loblaw"
										},
										{
											"key": "bookingDate",
											"value": "{{currentDate}}"
										},
										{
											"key": "storeId",
											"value": "{{storeId}}"
										},
										{
											"key": "tenantId",
											"value": "JOE_FRESH"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "GET_Product_Lite_200_with_lang_query_param_fr",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var Ajv = require('ajv'),",
											"    ajv = new Ajv({logger: console,  allErrors: true});",
											"",
											"var responseData = pm.response.json();",
											"var product = responseData[0].product;",
											"var prices = responseData[0].prices;",
											"var badge = responseData[0].badges;",
											"var variants = responseData[0].variants[0];",
											"var variants_second = responseData[0].variants[1];",
											"var specifications = responseData[0].specifications;",
											"",
											"const productSchemaForLite = JSON.parse(pm.environment.get('productSchemaForLite'));",
											"const priceSchema = JSON.parse(pm.environment.get('priceSchema'));",
											"const badgeSchema = JSON.parse(pm.environment.get('badgeSchema'));",
											"const variantSchemaForLite = JSON.parse(pm.environment.get('variantSchemaForLite'));",
											"const specificationSchema = JSON.parse(pm.environment.get('specificationSchema'));",
											"",
											"var images = responseData[0].product.image_assets;",
											"const imagesSchema = JSON.parse(pm.environment.get('imagesSchema'));",
											"",
											"images.forEach(function(index){",
											"pm.test('Validated Images in response', function() {",
											"    pm.expect(ajv.validate(imagesSchema, index)).to.be.true;",
											"});",
											"})",
											"",
											"pm.test('Validated Product Object', function() {",
											"    pm.expect(ajv.validate(productSchemaForLite, product)).to.be.true;",
											"});",
											"",
											"pm.test('Validated Price Object', function() {",
											"    pm.expect(ajv.validate(priceSchema, prices)).to.be.true;",
											"});",
											"",
											"badge.forEach(function(index){",
											"pm.test('Validated Badge Object', function() {",
											"    pm.expect(ajv.validate(badgeSchema, index)).to.be.true;",
											"});",
											"});",
											"",
											"pm.test('Validated variant object', function() {",
											"    pm.expect(ajv.validate(variantSchemaForLite, variants)).to.be.true;",
											"});",
											"",
											"pm.test('Validated variant second object', function() {",
											"    pm.expect(ajv.validate(variantSchemaForLite, variants_second)).to.be.true;",
											"});",
											"",
											"pm.test('Validated specifications Object', function() {",
											"    pm.expect(ajv.validate(specificationSchema, specifications)).to.be.true;",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseURL}}/v1/products/light?productCodes={{productCode}}&lang={{langFrench}}&banner=loblaw&bookingDate={{currentDate}}&storeId={{storeId}}&tenantId=JOE_FRESH",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"v1",
										"products",
										"light"
									],
									"query": [
										{
											"key": "productCodes",
											"value": "{{productCode}}"
										},
										{
											"key": "lang",
											"value": "{{langFrench}}"
										},
										{
											"key": "banner",
											"value": "loblaw"
										},
										{
											"key": "bookingDate",
											"value": "{{currentDate}}"
										},
										{
											"key": "storeId",
											"value": "{{storeId}}"
										},
										{
											"key": "tenantId",
											"value": "JOE_FRESH"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "GET_Product_Lite_200_with_banner_as_jfcom",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var Ajv = require('ajv'),",
											"    ajv = new Ajv({logger: console,  allErrors: true});",
											"",
											"var responseData = pm.response.json();",
											"var product = responseData[0].product;",
											"var prices = responseData[0].prices;",
											"var badge = responseData[0].badges;",
											"var variants = responseData[0].variants[0];",
											"var variants_second = responseData[0].variants[1];",
											"var specifications = responseData[0].specifications;",
											"",
											"const productSchemaForLite = JSON.parse(pm.environment.get('productSchemaForLite'));",
											"const priceSchema = JSON.parse(pm.environment.get('priceSchema'));",
											"const badgeSchema = JSON.parse(pm.environment.get('badgeSchema'));",
											"const variantSchemaForLite = JSON.parse(pm.environment.get('variantSchemaForLite'));",
											"const specificationSchema = JSON.parse(pm.environment.get('specificationSchema'));",
											"",
											"var images = responseData[0].product.image_assets;",
											"const imagesSchema = JSON.parse(pm.environment.get('imagesSchema'));",
											"",
											"images.forEach(function(index){",
											"pm.test('Validated Images in response', function() {",
											"    pm.expect(ajv.validate(imagesSchema, index)).to.be.true;",
											"});",
											"})",
											"",
											"pm.test('Validated Product Object', function() {",
											"    pm.expect(ajv.validate(productSchemaForLite, product)).to.be.true;",
											"});",
											"",
											"pm.test('Validated Price Object', function() {",
											"    pm.expect(ajv.validate(priceSchema, prices)).to.be.true;",
											"});",
											"",
											"badge.forEach(function(index){",
											"pm.test('Validated Badge Object', function() {",
											"    pm.expect(ajv.validate(badgeSchema, index)).to.be.true;",
											"});",
											"});",
											"",
											"pm.test('Validated variant object', function() {",
											"    pm.expect(ajv.validate(variantSchemaForLite, variants)).to.be.true;",
											"});",
											"",
											"pm.test('Validated variant second object', function() {",
											"    pm.expect(ajv.validate(variantSchemaForLite, variants_second)).to.be.true;",
											"});",
											"",
											"pm.test('Validated specifications Object', function() {",
											"    pm.expect(ajv.validate(specificationSchema, specifications)).to.be.true;",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseURL}}/v1/products/light?productCodes={{productCode}}&lang={{langEnglish}}&banner=jfcom&bookingDate={{currentDate}}&storeId={{storeId}}&tenantId=JOE_FRESH",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"v1",
										"products",
										"light"
									],
									"query": [
										{
											"key": "productCodes",
											"value": "{{productCode}}"
										},
										{
											"key": "lang",
											"value": "{{langEnglish}}"
										},
										{
											"key": "banner",
											"value": "jfcom"
										},
										{
											"key": "bookingDate",
											"value": "{{currentDate}}"
										},
										{
											"key": "storeId",
											"value": "{{storeId}}"
										},
										{
											"key": "tenantId",
											"value": "JOE_FRESH"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "GET_Product_Lite_200_with_pickupType_as_TRUCK",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var Ajv = require('ajv'),",
											"    ajv = new Ajv({logger: console,  allErrors: true});",
											"",
											"var responseData = pm.response.json();",
											"var product = responseData[0].product;",
											"var prices = responseData[0].prices;",
											"var badge = responseData[0].badges;",
											"var variants = responseData[0].variants[0];",
											"var variants_second = responseData[0].variants[1];",
											"var specifications = responseData[0].specifications;",
											"",
											"const productSchemaForLite = JSON.parse(pm.environment.get('productSchemaForLite'));",
											"const priceSchema = JSON.parse(pm.environment.get('priceSchema'));",
											"const badgeSchema = JSON.parse(pm.environment.get('badgeSchema'));",
											"const variantSchemaForLite = JSON.parse(pm.environment.get('variantSchemaForLite'));",
											"const specificationSchema = JSON.parse(pm.environment.get('specificationSchema'));",
											"",
											"var images = responseData[0].product.image_assets;",
											"const imagesSchema = JSON.parse(pm.environment.get('imagesSchema'));",
											"",
											"images.forEach(function(index){",
											"pm.test('Validated Images in response', function() {",
											"    pm.expect(ajv.validate(imagesSchema, index)).to.be.true;",
											"});",
											"})",
											"",
											"pm.test('Validated Product Object', function() {",
											"    pm.expect(ajv.validate(productSchemaForLite, product)).to.be.true;",
											"});",
											"",
											"pm.test('Validated Price Object', function() {",
											"    pm.expect(ajv.validate(priceSchema, prices)).to.be.true;",
											"});",
											"",
											"badge.forEach(function(index){",
											"pm.test('Validated Badge Object', function() {",
											"    pm.expect(ajv.validate(badgeSchema, index)).to.be.true;",
											"});",
											"});",
											"",
											"pm.test('Validated variant object', function() {",
											"    pm.expect(ajv.validate(variantSchemaForLite, variants)).to.be.true;",
											"});",
											"",
											"pm.test('Validated variant second object', function() {",
											"    pm.expect(ajv.validate(variantSchemaForLite, variants_second)).to.be.true;",
											"});",
											"",
											"pm.test('Validated specifications Object', function() {",
											"    pm.expect(ajv.validate(specificationSchema, specifications)).to.be.true;",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseURL}}/v1/products/light?productCodes={{productCode}}&lang={{langEnglish}}&banner=loblaw&bookingDate={{currentDate}}&storeId={{storeId}}&pickupType=TRUCK&tenantId=JOE_FRESH",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"v1",
										"products",
										"light"
									],
									"query": [
										{
											"key": "productCodes",
											"value": "{{productCode}}"
										},
										{
											"key": "lang",
											"value": "{{langEnglish}}"
										},
										{
											"key": "banner",
											"value": "loblaw"
										},
										{
											"key": "bookingDate",
											"value": "{{currentDate}}"
										},
										{
											"key": "storeId",
											"value": "{{storeId}}"
										},
										{
											"key": "pickupType",
											"value": "TRUCK"
										},
										{
											"key": "tenantId",
											"value": "JOE_FRESH"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "GET_Product_Lite_200_with_pickupType_as_SELF_SERVE_LIGHT",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var Ajv = require('ajv'),",
											"    ajv = new Ajv({logger: console,  allErrors: true});",
											"",
											"var responseData = pm.response.json();",
											"var product = responseData[0].product;",
											"var prices = responseData[0].prices;",
											"var badge = responseData[0].badges;",
											"var variants = responseData[0].variants[0];",
											"var variants_second = responseData[0].variants[1];",
											"var specifications = responseData[0].specifications;",
											"",
											"const productSchemaForLite = JSON.parse(pm.environment.get('productSchemaForLite'));",
											"const priceSchema = JSON.parse(pm.environment.get('priceSchema'));",
											"const badgeSchema = JSON.parse(pm.environment.get('badgeSchema'));",
											"const variantSchemaForLite = JSON.parse(pm.environment.get('variantSchemaForLite'));",
											"const specificationSchema = JSON.parse(pm.environment.get('specificationSchema'));",
											"",
											"var images = responseData[0].product.image_assets;",
											"const imagesSchema = JSON.parse(pm.environment.get('imagesSchema'));",
											"",
											"images.forEach(function(index){",
											"pm.test('Validated Images in response', function() {",
											"    pm.expect(ajv.validate(imagesSchema, index)).to.be.true;",
											"});",
											"})",
											"",
											"pm.test('Validated Product Object', function() {",
											"    pm.expect(ajv.validate(productSchemaForLite, product)).to.be.true;",
											"});",
											"",
											"pm.test('Validated Price Object', function() {",
											"    pm.expect(ajv.validate(priceSchema, prices)).to.be.true;",
											"});",
											"",
											"badge.forEach(function(index){",
											"pm.test('Validated Badge Object', function() {",
											"    pm.expect(ajv.validate(badgeSchema, index)).to.be.true;",
											"});",
											"});",
											"",
											"pm.test('Validated variant object', function() {",
											"    pm.expect(ajv.validate(variantSchemaForLite, variants)).to.be.true;",
											"});",
											"",
											"pm.test('Validated variant second object', function() {",
											"    pm.expect(ajv.validate(variantSchemaForLite, variants_second)).to.be.true;",
											"});",
											"",
											"pm.test('Validated specifications Object', function() {",
											"    pm.expect(ajv.validate(specificationSchema, specifications)).to.be.true;",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseURL}}/v1/products/light?productCodes={{productCode}}&lang={{langEnglish}}&banner=loblaw&bookingDate={{currentDate}}&storeId={{storeId}}&pickupType=SELF_SERVE_LIGHT&tenantId=JOE_FRESH",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"v1",
										"products",
										"light"
									],
									"query": [
										{
											"key": "productCodes",
											"value": "{{productCode}}"
										},
										{
											"key": "lang",
											"value": "{{langEnglish}}"
										},
										{
											"key": "banner",
											"value": "loblaw"
										},
										{
											"key": "bookingDate",
											"value": "{{currentDate}}"
										},
										{
											"key": "storeId",
											"value": "{{storeId}}"
										},
										{
											"key": "pickupType",
											"value": "SELF_SERVE_LIGHT"
										},
										{
											"key": "tenantId",
											"value": "JOE_FRESH"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "GET_Product_Lite_200_with_multiple_productCode_in_the_query_param",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var Ajv = require('ajv'),",
											"    ajv = new Ajv({logger: console,  allErrors: true});",
											"",
											"var responseData = pm.response.json();",
											"let lenghtOfResponse = responseData.length;",
											"    console.log(lenghtOfResponse)",
											"",
											"for(let iterator = 0; iterator< lenghtOfResponse; iterator++){",
											"    var bodyOfResponse = pm.response.json();",
											"var product = bodyOfResponse[iterator].product;",
											"var prices = bodyOfResponse[iterator].prices;",
											"var badge = bodyOfResponse[iterator].badges;",
											"var variants = bodyOfResponse[iterator].variants[0];",
											"var variants_second = bodyOfResponse[iterator].variants[1];",
											"var specifications = bodyOfResponse[iterator].specifications;",
											"",
											"const productSchemaForLite = JSON.parse(pm.environment.get('productSchemaForLite'));",
											"const priceSchema = JSON.parse(pm.environment.get('priceSchema'));",
											"const badgeSchema = JSON.parse(pm.environment.get('badgeSchema'));",
											"const variantSchemaForLite = JSON.parse(pm.environment.get('variantSchemaForLite'));",
											"const specificationSchema = JSON.parse(pm.environment.get('specificationSchema'));",
											"",
											"var images = bodyOfResponse[iterator].product.image_assets;",
											"const imagesSchema = JSON.parse(pm.environment.get('imagesSchema'));",
											"",
											"images.forEach(function(index){",
											"pm.test('Validated Images in response', function() {",
											"    pm.expect(ajv.validate(imagesSchema, index)).to.be.true;",
											"});",
											"})",
											"",
											"pm.test('Validated Product Object', function() {",
											"    pm.expect(ajv.validate(productSchemaForLite, product)).to.be.true;",
											"});",
											"",
											"pm.test('Validated Price Object', function() {",
											"    pm.expect(ajv.validate(priceSchema, prices)).to.be.true;",
											"});",
											"",
											"badge.forEach(function(index){",
											"pm.test('Validated Badge Object', function() {",
											"    pm.expect(ajv.validate(badgeSchema, index)).to.be.true;",
											"});",
											"});",
											"",
											"pm.test('Validated variant object', function() {",
											"    pm.expect(ajv.validate(variantSchemaForLite, variants)).to.be.true;",
											"});",
											"",
											"pm.test('Validated variant second object', function() {",
											"    pm.expect(ajv.validate(variantSchemaForLite, variants_second)).to.be.true;",
											"});",
											"",
											"pm.test('Validated specifications Object', function() {",
											"    pm.expect(ajv.validate(specificationSchema, specifications)).to.be.true;",
											"});",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseURL}}/v1/products/light?productCodes={{productCode}},U2WP028547012_EA,U2WR027842001_EA,U2WR027842007_EA,U2WR027842004_EA,U2WR027842011_EA,U2WR027842013_EA,U2WR028836002_EA,U2WP028547003_EA,U2WP028547004_EA,U2WP028547002_EA,U2WP028547013_EA,U2WR027846005_EA,U2WR028554009_EA,U2WP028551018_EA,U2WP028551013_EA&lang={{langEnglish}}&banner=loblaw&bookingDate={{currentDate}}&storeId={{storeId}}&tenantId=JOE_FRESH",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"v1",
										"products",
										"light"
									],
									"query": [
										{
											"key": "productCodes",
											"value": "{{productCode}},U2WP028547012_EA,U2WR027842001_EA,U2WR027842007_EA,U2WR027842004_EA,U2WR027842011_EA,U2WR027842013_EA,U2WR028836002_EA,U2WP028547003_EA,U2WP028547004_EA,U2WP028547002_EA,U2WP028547013_EA,U2WR027846005_EA,U2WR028554009_EA,U2WP028551018_EA,U2WP028551013_EA"
										},
										{
											"key": "lang",
											"value": "{{langEnglish}}"
										},
										{
											"key": "banner",
											"value": "loblaw"
										},
										{
											"key": "bookingDate",
											"value": "{{currentDate}}"
										},
										{
											"key": "storeId",
											"value": "{{storeId}}"
										},
										{
											"key": "tenantId",
											"value": "JOE_FRESH"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "GET_Product_Lite_200_pricing_info_should_be_returned",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var Ajv = require('ajv'),",
											"    ajv = new Ajv({logger: console,  allErrors: true});",
											"",
											"var responseData = pm.response.json();",
											"var product = responseData[0].product;",
											"var prices = responseData[0].prices;",
											"var badge = responseData[0].badges;",
											"var variants = responseData[0].variants[0];",
											"var variants_second = responseData[0].variants[1];",
											"var specifications = responseData[0].specifications;",
											"",
											"const productSchemaForLite = JSON.parse(pm.environment.get('productSchemaForLite'));",
											"const priceSchema = JSON.parse(pm.environment.get('priceSchema'));",
											"const badgeSchema = JSON.parse(pm.environment.get('badgeSchema'));",
											"const variantSchemaForLite = JSON.parse(pm.environment.get('variantSchemaForLite'));",
											"const specificationSchema = JSON.parse(pm.environment.get('specificationSchema'));",
											"",
											"var images = responseData[0].product.image_assets;",
											"const imagesSchema = JSON.parse(pm.environment.get('imagesSchema'));",
											"",
											"images.forEach(function(index){",
											"pm.test('Validated Images in response', function() {",
											"    pm.expect(ajv.validate(imagesSchema, index)).to.be.true;",
											"});",
											"})",
											"",
											"pm.test('Validated Product Object', function() {",
											"    pm.expect(ajv.validate(productSchemaForLite, product)).to.be.true;",
											"});",
											"",
											"pm.test('Validated Price Object', function() {",
											"    pm.expect(ajv.validate(priceSchema, prices)).to.be.true;",
											"});",
											"",
											"badge.forEach(function(index){",
											"pm.test('Validated Badge Object', function() {",
											"    pm.expect(ajv.validate(badgeSchema, index)).to.be.true;",
											"});",
											"});",
											"",
											"pm.test('Validated variant object', function() {",
											"    pm.expect(ajv.validate(variantSchemaForLite, variants)).to.be.true;",
											"});",
											"",
											"pm.test('Validated variant second object', function() {",
											"    pm.expect(ajv.validate(variantSchemaForLite, variants_second)).to.be.true;",
											"});",
											"",
											"pm.test('Validated specifications Object', function() {",
											"    pm.expect(ajv.validate(specificationSchema, specifications)).to.be.true;",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseURL}}/v1/products/light?productCodes={{productCode}}&lang={{langEnglish}}&banner=loblaw&bookingDate={{currentDate}}&storeId={{storeId}}&tenantId=JOE_FRESH",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"v1",
										"products",
										"light"
									],
									"query": [
										{
											"key": "productCodes",
											"value": "{{productCode}}"
										},
										{
											"key": "lang",
											"value": "{{langEnglish}}"
										},
										{
											"key": "banner",
											"value": "loblaw"
										},
										{
											"key": "bookingDate",
											"value": "{{currentDate}}"
										},
										{
											"key": "storeId",
											"value": "{{storeId}}"
										},
										{
											"key": "tenantId",
											"value": "JOE_FRESH"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "GET_Product_Lite_200_badges_info_should_be_returned",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var Ajv = require('ajv'),",
											"    ajv = new Ajv({logger: console,  allErrors: true});",
											"",
											"var responseData = pm.response.json();",
											"var product = responseData[0].product;",
											"var prices = responseData[0].prices;",
											"var badge = responseData[0].badges;",
											"var variants = responseData[0].variants[0];",
											"var variants_second = responseData[0].variants[1];",
											"var specifications = responseData[0].specifications;",
											"",
											"const productSchemaForLite = JSON.parse(pm.environment.get('productSchemaForLite'));",
											"const priceSchema = JSON.parse(pm.environment.get('priceSchema'));",
											"const badgeSchema = JSON.parse(pm.environment.get('badgeSchema'));",
											"const variantSchemaForLite = JSON.parse(pm.environment.get('variantSchemaForLite'));",
											"const specificationSchema = JSON.parse(pm.environment.get('specificationSchema'));",
											"",
											"var images = responseData[0].product.image_assets;",
											"const imagesSchema = JSON.parse(pm.environment.get('imagesSchema'));",
											"",
											"images.forEach(function(index){",
											"pm.test('Validated Images in response', function() {",
											"    pm.expect(ajv.validate(imagesSchema, index)).to.be.true;",
											"});",
											"})",
											"",
											"pm.test('Validated Product Object', function() {",
											"    pm.expect(ajv.validate(productSchemaForLite, product)).to.be.true;",
											"});",
											"",
											"pm.test('Validated Price Object', function() {",
											"    pm.expect(ajv.validate(priceSchema, prices)).to.be.true;",
											"});",
											"",
											"badge.forEach(function(index){",
											"pm.test('Validated Badge Object', function() {",
											"    pm.expect(ajv.validate(badgeSchema, index)).to.be.true;",
											"});",
											"});",
											"",
											"pm.test('Validated variant object', function() {",
											"    pm.expect(ajv.validate(variantSchemaForLite, variants)).to.be.true;",
											"});",
											"",
											"pm.test('Validated variant second object', function() {",
											"    pm.expect(ajv.validate(variantSchemaForLite, variants_second)).to.be.true;",
											"});",
											"",
											"pm.test('Validated specifications Object', function() {",
											"    pm.expect(ajv.validate(specificationSchema, specifications)).to.be.true;",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseURL}}/v1/products/light?productCodes={{productCode}}&lang={{langEnglish}}&banner=loblaw&bookingDate={{currentDate}}&storeId={{storeId}}&tenantId=JOE_FRESH",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"v1",
										"products",
										"light"
									],
									"query": [
										{
											"key": "productCodes",
											"value": "{{productCode}}"
										},
										{
											"key": "lang",
											"value": "{{langEnglish}}"
										},
										{
											"key": "banner",
											"value": "loblaw"
										},
										{
											"key": "bookingDate",
											"value": "{{currentDate}}"
										},
										{
											"key": "storeId",
											"value": "{{storeId}}"
										},
										{
											"key": "tenantId",
											"value": "JOE_FRESH"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "GET_Product_Lite_200_rating_should_be_present_in_the_response",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var Ajv = require('ajv'),",
											"    ajv = new Ajv({logger: console,  allErrors: true});",
											"",
											"var responseData = pm.response.json();",
											"var product = responseData[0].product;",
											"var prices = responseData[0].prices;",
											"var badge = responseData[0].badges;",
											"var variants = responseData[0].variants[0];",
											"var variants_second = responseData[0].variants[1];",
											"var specifications = responseData[0].specifications;",
											"",
											"const productSchemaForLite = JSON.parse(pm.environment.get('productSchemaForLite'));",
											"const priceSchema = JSON.parse(pm.environment.get('priceSchema'));",
											"const badgeSchema = JSON.parse(pm.environment.get('badgeSchema'));",
											"const variantSchemaForLite = JSON.parse(pm.environment.get('variantSchemaForLite'));",
											"const specificationSchema = JSON.parse(pm.environment.get('specificationSchema'));",
											"",
											"var images = responseData[0].product.image_assets;",
											"const imagesSchema = JSON.parse(pm.environment.get('imagesSchema'));",
											"",
											"images.forEach(function(index){",
											"pm.test('Validated Images in response', function() {",
											"    pm.expect(ajv.validate(imagesSchema, index)).to.be.true;",
											"});",
											"})",
											"",
											"pm.test('Validated Product Object', function() {",
											"    pm.expect(ajv.validate(productSchemaForLite, product)).to.be.true;",
											"});",
											"",
											"pm.test('Validated Price Object', function() {",
											"    pm.expect(ajv.validate(priceSchema, prices)).to.be.true;",
											"});",
											"",
											"badge.forEach(function(index){",
											"pm.test('Validated Badge Object', function() {",
											"    pm.expect(ajv.validate(badgeSchema, index)).to.be.true;",
											"});",
											"});",
											"",
											"pm.test('Validated variant object', function() {",
											"    pm.expect(ajv.validate(variantSchemaForLite, variants)).to.be.true;",
											"});",
											"",
											"pm.test('Validated variant second object', function() {",
											"    pm.expect(ajv.validate(variantSchemaForLite, variants_second)).to.be.true;",
											"});",
											"",
											"pm.test('Validated specifications Object', function() {",
											"    pm.expect(ajv.validate(specificationSchema, specifications)).to.be.true;",
											"});",
											"",
											"pm.test('Rating should be returned in the response', function() {",
											"    pm.expect(responseData[0]).to.have.property('ratings');",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseURL}}/v1/products/light?productCodes={{productCode}}&lang={{langEnglish}}&banner=loblaw&bookingDate={{currentDate}}&storeId={{storeId}}&tenantId=JOE_FRESH",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"v1",
										"products",
										"light"
									],
									"query": [
										{
											"key": "productCodes",
											"value": "{{productCode}}"
										},
										{
											"key": "lang",
											"value": "{{langEnglish}}"
										},
										{
											"key": "banner",
											"value": "loblaw"
										},
										{
											"key": "bookingDate",
											"value": "{{currentDate}}"
										},
										{
											"key": "storeId",
											"value": "{{storeId}}"
										},
										{
											"key": "tenantId",
											"value": "JOE_FRESH"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "GET_Product_Lite_200_shoppable_flag_should_be_returned",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var Ajv = require('ajv'),",
											"    ajv = new Ajv({logger: console,  allErrors: true});",
											"",
											"var responseData = pm.response.json();",
											"var product = responseData[0].product;",
											"var prices = responseData[0].prices;",
											"var badge = responseData[0].badges;",
											"var variants = responseData[0].variants[0];",
											"var variants_second = responseData[0].variants[1];",
											"var specifications = responseData[0].specifications;",
											"",
											"const productSchemaForLite = JSON.parse(pm.environment.get('productSchemaForLite'));",
											"const priceSchema = JSON.parse(pm.environment.get('priceSchema'));",
											"const badgeSchema = JSON.parse(pm.environment.get('badgeSchema'));",
											"const variantSchemaForLite = JSON.parse(pm.environment.get('variantSchemaForLite'));",
											"const specificationSchema = JSON.parse(pm.environment.get('specificationSchema'));",
											"",
											"var images = responseData[0].product.image_assets;",
											"const imagesSchema = JSON.parse(pm.environment.get('imagesSchema'));",
											"",
											"images.forEach(function(index){",
											"pm.test('Validated Images in response', function() {",
											"    pm.expect(ajv.validate(imagesSchema, index)).to.be.true;",
											"});",
											"})",
											"",
											"pm.test('Validated Product Object', function() {",
											"    pm.expect(ajv.validate(productSchemaForLite, product)).to.be.true;",
											"});",
											"",
											"pm.test('Validated Price Object', function() {",
											"    pm.expect(ajv.validate(priceSchema, prices)).to.be.true;",
											"});",
											"",
											"badge.forEach(function(index){",
											"pm.test('Validated Badge Object', function() {",
											"    pm.expect(ajv.validate(badgeSchema, index)).to.be.true;",
											"});",
											"});",
											"",
											"pm.test('Validated variant object', function() {",
											"    pm.expect(ajv.validate(variantSchemaForLite, variants)).to.be.true;",
											"});",
											"",
											"pm.test('Validated variant second object', function() {",
											"    pm.expect(ajv.validate(variantSchemaForLite, variants_second)).to.be.true;",
											"});",
											"",
											"pm.test('Validated specifications Object', function() {",
											"    pm.expect(ajv.validate(specificationSchema, specifications)).to.be.true;",
											"});",
											"",
											"pm.test('Rating should be returned in the response', function() {",
											"    pm.expect(responseData[0]).to.have.property('ratings');",
											"});",
											"",
											"var shoppable = responseData[0].shoppable;",
											"",
											"pm.test('Shoppable flag should be present', function(){",
											"    pm.expect(responseData[0]).to.have.property('shoppable')",
											"})",
											"",
											"pm.test('Shoppable flag should not be null', function(){",
											"    pm.expect(shoppable).to.not.eql(null)",
											"})",
											"",
											"pm.test('Shoppable flag should be of type boolean', function(){",
											"    pm.expect(shoppable).to.be.a(\"boolean\")",
											"})",
											"",
											"pm.test('Shoppable flag should be true', function(){",
											"    pm.expect(shoppable).to.eql(true)",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseURL}}/v1/products/light?productCodes={{productCode}}&lang={{langEnglish}}&banner=loblaw&bookingDate={{currentDate}}&storeId={{storeId}}&tenantId=JOE_FRESH",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"v1",
										"products",
										"light"
									],
									"query": [
										{
											"key": "productCodes",
											"value": "{{productCode}}"
										},
										{
											"key": "lang",
											"value": "{{langEnglish}}"
										},
										{
											"key": "banner",
											"value": "loblaw"
										},
										{
											"key": "bookingDate",
											"value": "{{currentDate}}"
										},
										{
											"key": "storeId",
											"value": "{{storeId}}"
										},
										{
											"key": "tenantId",
											"value": "JOE_FRESH"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "GET_Product_Lite_200_promotion_list_should_be_present",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var Ajv = require('ajv'),",
											"    ajv = new Ajv({logger: console,  allErrors: true});",
											"",
											"var responseData = pm.response.json();",
											"var product = responseData[0].product;",
											"var prices = responseData[0].prices;",
											"var badge = responseData[0].badges;",
											"var variants = responseData[0].variants[0];",
											"var variants_second = responseData[0].variants[1];",
											"var specifications = responseData[0].specifications;",
											"",
											"const productSchemaForLite = JSON.parse(pm.environment.get('productSchemaForLite'));",
											"const priceSchema = JSON.parse(pm.environment.get('priceSchema'));",
											"const badgeSchema = JSON.parse(pm.environment.get('badgeSchema'));",
											"const variantSchemaForLite = JSON.parse(pm.environment.get('variantSchemaForLite'));",
											"const specificationSchema = JSON.parse(pm.environment.get('specificationSchema'));",
											"",
											"var images = responseData[0].product.image_assets;",
											"const imagesSchema = JSON.parse(pm.environment.get('imagesSchema'));",
											"",
											"images.forEach(function(index){",
											"pm.test('Validated Images in response', function() {",
											"    pm.expect(ajv.validate(imagesSchema, index)).to.be.true;",
											"});",
											"})",
											"",
											"pm.test('Validated Product Object', function() {",
											"    pm.expect(ajv.validate(productSchemaForLite, product)).to.be.true;",
											"});",
											"",
											"pm.test('Validated Price Object', function() {",
											"    pm.expect(ajv.validate(priceSchema, prices)).to.be.true;",
											"});",
											"",
											"badge.forEach(function(index){",
											"pm.test('Validated Badge Object', function() {",
											"    pm.expect(ajv.validate(badgeSchema, index)).to.be.true;",
											"});",
											"});",
											"",
											"pm.test('Validated variant object', function() {",
											"    pm.expect(ajv.validate(variantSchemaForLite, variants)).to.be.true;",
											"});",
											"",
											"pm.test('Validated variant second object', function() {",
											"    pm.expect(ajv.validate(variantSchemaForLite, variants_second)).to.be.true;",
											"});",
											"",
											"pm.test('Validated specifications Object', function() {",
											"    pm.expect(ajv.validate(specificationSchema, specifications)).to.be.true;",
											"});",
											"",
											"pm.test('promotions should be present', function(){",
											"    pm.expect(responseData[0]).to.have.property('promotions')",
											"})",
											"",
											"pm.test('promotions should not be null', function(){",
											"    pm.expect(responseData[0].promotions).to.not.eql(null)",
											"})",
											"",
											"pm.test('promotions should be of type array', function(){",
											"    pm.expect(responseData[0].promotions).to.be.a(\"array\")",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseURL}}/v1/products/light?productCodes={{productCode}}&lang={{langEnglish}}&banner=loblaw&bookingDate={{currentDate}}&storeId={{storeId}}&tenantId=JOE_FRESH",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"v1",
										"products",
										"light"
									],
									"query": [
										{
											"key": "productCodes",
											"value": "{{productCode}}"
										},
										{
											"key": "lang",
											"value": "{{langEnglish}}"
										},
										{
											"key": "banner",
											"value": "loblaw"
										},
										{
											"key": "bookingDate",
											"value": "{{currentDate}}"
										},
										{
											"key": "storeId",
											"value": "{{storeId}}"
										},
										{
											"key": "tenantId",
											"value": "JOE_FRESH"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "GET_Product_Lite_200_all_varaints_should_be_returned_in_response",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var Ajv = require('ajv'),",
											"    ajv = new Ajv({logger: console,  allErrors: true});",
											"",
											"var responseData = pm.response.json();",
											"var product = responseData[0].product;",
											"var prices = responseData[0].prices;",
											"var badge = responseData[0].badges;",
											"var variants = responseData[0].variants[0];",
											"var variants_second = responseData[0].variants[1];",
											"var specifications = responseData[0].specifications;",
											"",
											"const productSchemaForLite = JSON.parse(pm.environment.get('productSchemaForLite'));",
											"const priceSchema = JSON.parse(pm.environment.get('priceSchema'));",
											"const badgeSchema = JSON.parse(pm.environment.get('badgeSchema'));",
											"const variantSchemaForLite = JSON.parse(pm.environment.get('variantSchemaForLite'));",
											"const specificationSchema = JSON.parse(pm.environment.get('specificationSchema'));",
											"",
											"var images = responseData[0].product.image_assets;",
											"const imagesSchema = JSON.parse(pm.environment.get('imagesSchema'));",
											"",
											"images.forEach(function(index){",
											"pm.test('Validated Images in response', function() {",
											"    pm.expect(ajv.validate(imagesSchema, index)).to.be.true;",
											"});",
											"})",
											"",
											"pm.test('Validated Product Object', function() {",
											"    pm.expect(ajv.validate(productSchemaForLite, product)).to.be.true;",
											"});",
											"",
											"pm.test('Validated Price Object', function() {",
											"    pm.expect(ajv.validate(priceSchema, prices)).to.be.true;",
											"});",
											"",
											"badge.forEach(function(index){",
											"pm.test('Validated Badge Object', function() {",
											"    pm.expect(ajv.validate(badgeSchema, index)).to.be.true;",
											"});",
											"});",
											"",
											"pm.test('Validated variant object', function() {",
											"    pm.expect(ajv.validate(variantSchemaForLite, variants)).to.be.true;",
											"});",
											"",
											"pm.test('Validated variant second object', function() {",
											"    pm.expect(ajv.validate(variantSchemaForLite, variants_second)).to.be.true;",
											"});",
											"",
											"pm.test('Validated specifications Object', function() {",
											"    pm.expect(ajv.validate(specificationSchema, specifications)).to.be.true;",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseURL}}/v1/products/light?productCodes={{productCode}}&lang={{langEnglish}}&banner=loblaw&bookingDate={{currentDate}}&storeId={{storeId}}&tenantId=JOE_FRESH",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"v1",
										"products",
										"light"
									],
									"query": [
										{
											"key": "productCodes",
											"value": "{{productCode}}"
										},
										{
											"key": "lang",
											"value": "{{langEnglish}}"
										},
										{
											"key": "banner",
											"value": "loblaw"
										},
										{
											"key": "bookingDate",
											"value": "{{currentDate}}"
										},
										{
											"key": "storeId",
											"value": "{{storeId}}"
										},
										{
											"key": "tenantId",
											"value": "JOE_FRESH"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "GET_Product_Lite_200_specifications_should_be_returned_in_accordance_to_lang_provided",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var Ajv = require('ajv'),",
											"    ajv = new Ajv({logger: console,  allErrors: true});",
											"",
											"var responseData = pm.response.json();",
											"var product = responseData[0].product;",
											"var prices = responseData[0].prices;",
											"var badge = responseData[0].badges;",
											"var variants = responseData[0].variants[0];",
											"var variants_second = responseData[0].variants[1];",
											"var specifications = responseData[0].specifications;",
											"",
											"const productSchemaForLite = JSON.parse(pm.environment.get('productSchemaForLite'));",
											"const priceSchema = JSON.parse(pm.environment.get('priceSchema'));",
											"const badgeSchema = JSON.parse(pm.environment.get('badgeSchema'));",
											"const variantSchemaForLite = JSON.parse(pm.environment.get('variantSchemaForLite'));",
											"const specificationSchema = JSON.parse(pm.environment.get('specificationSchema'));",
											"",
											"var images = responseData[0].product.image_assets;",
											"const imagesSchema = JSON.parse(pm.environment.get('imagesSchema'));",
											"",
											"images.forEach(function(index){",
											"pm.test('Validated Images in response', function() {",
											"    pm.expect(ajv.validate(imagesSchema, index)).to.be.true;",
											"});",
											"})",
											"",
											"pm.test('Validated Product Object', function() {",
											"    pm.expect(ajv.validate(productSchemaForLite, product)).to.be.true;",
											"});",
											"",
											"pm.test('Validated Price Object', function() {",
											"    pm.expect(ajv.validate(priceSchema, prices)).to.be.true;",
											"});",
											"",
											"badge.forEach(function(index){",
											"pm.test('Validated Badge Object', function() {",
											"    pm.expect(ajv.validate(badgeSchema, index)).to.be.true;",
											"});",
											"});",
											"",
											"pm.test('Validated variant object', function() {",
											"    pm.expect(ajv.validate(variantSchemaForLite, variants)).to.be.true;",
											"});",
											"",
											"pm.test('Validated variant second object', function() {",
											"    pm.expect(ajv.validate(variantSchemaForLite, variants_second)).to.be.true;",
											"});",
											"",
											"pm.test('Validated specifications Object', function() {",
											"    pm.expect(ajv.validate(specificationSchema, specifications)).to.be.true;",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseURL}}/v1/products/light?productCodes={{productCode}}&lang={{langEnglish}}&banner=loblaw&bookingDate={{currentDate}}&storeId={{storeId}}&tenantId=JOE_FRESH",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"v1",
										"products",
										"light"
									],
									"query": [
										{
											"key": "productCodes",
											"value": "{{productCode}}"
										},
										{
											"key": "lang",
											"value": "{{langEnglish}}"
										},
										{
											"key": "banner",
											"value": "loblaw"
										},
										{
											"key": "bookingDate",
											"value": "{{currentDate}}"
										},
										{
											"key": "storeId",
											"value": "{{storeId}}"
										},
										{
											"key": "tenantId",
											"value": "JOE_FRESH"
										}
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									"const productLiteResponseSchema = {",
									"  \"type\": \"array\",",
									"  \"items\": [",
									"    {",
									"      \"type\": \"object\",",
									"      \"properties\": {",
									"        \"code\": {",
									"          \"type\": \"string\"",
									"        },",
									"        \"product\": {",
									"          \"type\": \"object\"",
									"        },",
									"        \"prices\": {",
									"          \"type\": \"object\"",
									"        },",
									"        \"badges\": {",
									"          \"type\": \"array\"",
									"        },",
									"        \"ratings\": {",
									"          \"type\": [\"object\",\"null\"]",
									"        },",
									"        \"promotions\": {",
									"          \"type\": \"array\"",
									"        },",
									"        \"shoppable\": {",
									"          \"type\": \"boolean\"",
									"        },",
									"        \"stock\": {",
									"          \"type\": [\"integer\",\"null\"]",
									"        },",
									"        \"stock_status\": {",
									"          \"type\": [\"string\",\"null\"]",
									"        },",
									"        \"nav_categories\": {",
									"          \"type\": \"array\"",
									"        },",
									"        \"variants\": {",
									"          \"type\": \"array\"",
									"        },",
									"        \"specifications\": {",
									"          \"type\": [\"object\",\"null\"]",
									"        }",
									"      },",
									"      \"required\": [",
									"        \"code\",",
									"        \"badges\"",
									"      ]",
									"    }",
									"  ]",
									"}",
									"",
									"const productSchemaForLite = {",
									"  \"type\": \"object\",",
									"  \"properties\": {",
									"    \"name\": {",
									"      \"type\": \"string\"",
									"    },",
									"    \"link\": {",
									"      \"type\": \"object\",",
									"      \"properties\": {",
									"        \"en\": {",
									"          \"type\": \"string\"",
									"        },",
									"        \"fr\": {",
									"          \"type\": \"string\"",
									"        }",
									"      },",
									"      \"required\": [",
									"      ]",
									"    },",
									"    \"image_assets\": {",
									"      \"type\": \"array\",",
									"      \"items\": [",
									"        {",
									"          \"type\": \"object\",",
									"          \"properties\": {",
									"            \"image_url\": {",
									"              \"type\": [\"string\",\"null\"]",
									"            },",
									"            \"small_url\": {",
									"              \"type\": \"string\"",
									"            },",
									"            \"medium_url\": {",
									"              \"type\": \"string\"",
									"            },",
									"            \"large_url\": {",
									"              \"type\": \"string\"",
									"            },",
									"            \"small_retina_url\": {",
									"              \"type\": \"string\"",
									"            },",
									"            \"medium_retina_url\": {",
									"              \"type\": \"string\"",
									"            },",
									"            \"large_retina_url\": {",
									"              \"type\": \"string\"",
									"            }",
									"          },",
									"          \"required\": [",
									"          ]",
									"        }",
									"      ]",
									"    },",
									"    \"uom\": {",
									"      \"type\": \"string\"",
									"    },",
									"    \"upc\": {",
									"      \"type\": \"string\"",
									"    },",
									"    \"is_variant\": {",
									"      \"type\": \"boolean\"",
									"    },",
									"    \"variant_group\": {",
									"      \"type\": [\"string\",\"null\"]",
									"    },",
									"    \"variant_template\": {",
									"      \"type\": [\"array\",\"null\"]",
									"    },",
									"    \"variant_theme\": {",
									"      \"type\": [\"object\",\"null\"],",
									"      \"properties\": {",
									"        \"color\": {",
									"          \"type\": \"object\",",
									"          \"properties\": {",
									"            \"actual\": {",
									"              \"type\": \"string\"",
									"            },",
									"            \"standard\": {",
									"              \"type\": \"string\"",
									"            },",
									"            \"url\": {",
									"              \"type\": \"string\"",
									"            }",
									"          },",
									"          \"required\": [",
									"          ]",
									"        },",
									"        \"size\": {",
									"          \"type\": \"object\",",
									"          \"properties\": {",
									"            \"actual\": {",
									"              \"type\": \"string\"",
									"            },",
									"            \"standard\": {",
									"              \"type\": \"string\"",
									"            },",
									"            \"url\": {",
									"              \"type\": \"string\"",
									"            }",
									"          },",
									"          \"required\": [",
									"          ]",
									"        }",
									"      },",
									"      \"required\": [",
									"      ]",
									"    }",
									"  },",
									"  \"required\": [",
									"  ]",
									"}",
									"",
									"const variantSchema = {  ",
									"      \"type\": \"object\",",
									"      \"properties\": {",
									"        \"code\": {",
									"          \"type\": \"string\"",
									"        },",
									"        \"product\": {",
									"          \"type\": \"object\",",
									"          \"properties\": {",
									"            \"image_assets\": {",
									"              \"type\": \"array\"",
									"            },",
									"            \"variant_theme\": {",
									"              \"type\": \"object\",",
									"              \"properties\": {",
									"                \"color\": {",
									"                  \"type\": \"object\",",
									"                  \"properties\": {",
									"                    \"actual\": {",
									"                      \"type\": \"string\"",
									"                    },",
									"                    \"standard\": {",
									"                      \"type\": \"string\"",
									"                    },",
									"                    \"url\": {",
									"                      \"type\": \"string\"",
									"                    },",
									"                    \"sort_rank\":{",
									"                        \"type\": [\"integer\",\"null\"]",
									"                    }",
									"                  },",
									"                  \"required\": [",
									"                  ]",
									"                },",
									"                \"size\": {",
									"                  \"type\": \"object\",",
									"                  \"properties\": {",
									"                    \"actual\": {",
									"                      \"type\": \"string\"",
									"                    },",
									"                    \"standard\": {",
									"                      \"type\": \"string\"",
									"                    },",
									"                    \"url\": {",
									"                      \"type\": \"string\"",
									"                    },",
									"                    \"sort_rank\":{",
									"                        \"type\": [\"integer\",\"null\"]",
									"                    }",
									"                  },",
									"                  \"required\": [",
									"                  ]",
									"                }",
									"              },",
									"              \"required\": [",
									"              ]",
									"            },",
									"            \"upc\": {",
									"              \"type\": [\"string\",\"null\"]",
									"            }",
									"          },",
									"          \"required\": [",
									"          ]",
									"        },",
									"        \"shoppable\": {",
									"          \"type\": \"boolean\"",
									"        }",
									"      },",
									"      \"required\": [",
									"      ]",
									"    }    ",
									"",
									"pm.environment.set('productLiteResponseSchema', JSON.stringify(productLiteResponseSchema));",
									"pm.environment.set('productSchemaForLite', JSON.stringify(productSchemaForLite));",
									"pm.environment.set('variantSchemaForLite', JSON.stringify(variantSchema));"
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.test('Status Code | 200 OK', function(){",
									"    pm.response.to.have.status(200)",
									"})",
									"",
									"const productLiteResponseSchema = JSON.parse(pm.environment.get('productLiteResponseSchema'));",
									"",
									"pm.test(\"Validate Response against Schema\", function(){",
									"    pm.response.to.have.jsonSchema(productLiteResponseSchema)",
									"})"
								]
							}
						}
					]
				},
				{
					"name": "Negative Tests",
					"item": [
						{
							"name": "GET_Product_Lite_400_having_multiple_productCode_all_of_them_made_of_special_characetrs_only",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Status code | 400 Bad Request', function(){",
											"    pm.response.to.have.status(400)",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseURL}}/v1/products/light?productCodes=!*%26%%23%26*%23,)(%26*()%23%26(*%23&lang={{langEnglish}}&banner=loblaw&bookingDate={{currentDate}}&storeId=1032",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"v1",
										"products",
										"light"
									],
									"query": [
										{
											"key": "productCodes",
											"value": "!*%26%%23%26*%23,)(%26*()%23%26(*%23"
										},
										{
											"key": "lang",
											"value": "{{langEnglish}}"
										},
										{
											"key": "banner",
											"value": "loblaw"
										},
										{
											"key": "bookingDate",
											"value": "{{currentDate}}"
										},
										{
											"key": "storeId",
											"value": "1032"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "GET_Product_Lite_400_having_productCode_missing_from_the_request",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Status Code | 400 Bad Request', function(){",
											"pm.response.to.have.status(400)",
											"})",
											"",
											"var responseData = pm.response.json();",
											"",
											"pm.test('Validate Error message', function(){",
											"    pm.expect(responseData.message).to.eql(\"400 BAD_REQUEST \\\"Required String parameter 'productCodes' is not present\\\"\")",
											"})",
											"",
											"pm.test('Validate error error code in response', function(){",
											"    pm.expect(responseData.error_code).to.eql(\"400\")",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseURL}}/v1/products/light?lang={{langEnglish}}&banner=loblaw&bookingDate={{currentDate}}&storeId=1032",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"v1",
										"products",
										"light"
									],
									"query": [
										{
											"key": "productCodes",
											"value": "{{productCode_first}}",
											"disabled": true
										},
										{
											"key": "lang",
											"value": "{{langEnglish}}"
										},
										{
											"key": "banner",
											"value": "loblaw"
										},
										{
											"key": "bookingDate",
											"value": "{{currentDate}}"
										},
										{
											"key": "storeId",
											"value": "1032"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "GET_Product_Lite_400_having_productCode_as_an_empty_query_param.",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Status Code | 400 Bad Request', function(){",
											"pm.response.to.have.status(400)",
											"})",
											"",
											"var responseData = pm.response.json();",
											"",
											"pm.test('Validate Error message', function(){",
											"    pm.expect(responseData.message).to.eql(\"getLiteProducts.productCodes: product codes must not be blank\")",
											"})",
											"",
											"pm.test('Validate error error code in response', function(){",
											"    pm.expect(responseData.error_code).to.eql(\"400\")",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseURL}}/v1/products/light?productCodes=&lang={{langEnglish}}&banner=loblaw&bookingDate={{currentDate}}&storeId=1032",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"v1",
										"products",
										"light"
									],
									"query": [
										{
											"key": "productCodes",
											"value": ""
										},
										{
											"key": "lang",
											"value": "{{langEnglish}}"
										},
										{
											"key": "banner",
											"value": "loblaw"
										},
										{
											"key": "bookingDate",
											"value": "{{currentDate}}"
										},
										{
											"key": "storeId",
											"value": "1032"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "GET_Product_Lite_400_having_lang_missing_from_the_request.",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Status Code | 400 Bad Request', function(){",
											"pm.response.to.have.status(400)",
											"})",
											"",
											"var responseData = pm.response.json();",
											"",
											"pm.test('Validate Error message', function(){",
											"    pm.expect(responseData.message).to.eql(\"getLiteProducts.lang: language code is required\")",
											"})",
											"",
											"pm.test('Validate error error code in response', function(){",
											"    pm.expect(responseData.error_code).to.eql(\"400\")",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseURL}}/v1/products/light?banner=loblaw&bookingDate={{currentDate}}&storeId=1032&productCodes={{productCode}}",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"v1",
										"products",
										"light"
									],
									"query": [
										{
											"key": "lang",
											"value": "{{langEnglish}}",
											"disabled": true
										},
										{
											"key": "banner",
											"value": "loblaw"
										},
										{
											"key": "bookingDate",
											"value": "{{currentDate}}"
										},
										{
											"key": "storeId",
											"value": "1032"
										},
										{
											"key": "productCodes",
											"value": "{{productCode}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "GET_Product_Lite_400_having_lang_as_empty_query_param.",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Status Code | 400 Bad Request', function(){",
											"    pm.response.to.have.status(400)",
											"})",
											"",
											"var responseData = pm.response.json();",
											"",
											"pm.test('Validate error message', function(){",
											"    pm.expect(pm.response.text()).to.contain('invalid language')",
											"})",
											"",
											"pm.test('Validate error code in response body', function(){",
											"    pm.expect(responseData.error_code).to.eql(\"400\")",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseURL}}/v1/products/light?productCodes={{productCode}}&lang=&banner=loblaw&bookingDate={{currentDate}}&storeId=1032",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"v1",
										"products",
										"light"
									],
									"query": [
										{
											"key": "productCodes",
											"value": "{{productCode}}"
										},
										{
											"key": "lang",
											"value": ""
										},
										{
											"key": "banner",
											"value": "loblaw"
										},
										{
											"key": "bookingDate",
											"value": "{{currentDate}}"
										},
										{
											"key": "storeId",
											"value": "1032"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "GET_Product_Lite_400_with_lang_having_invalid_value.",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Status Code | 400 Bad Request', function(){",
											"    pm.response.to.have.status(400)",
											"})",
											"",
											"var responseData = pm.response.json();",
											"",
											"pm.test('Validate error message', function(){",
											"    pm.expect(pm.response.text()).to.contain('invalid language')",
											"})",
											"",
											"pm.test('Validate error code in response body', function(){",
											"    pm.expect(responseData.error_code).to.eql(\"400\")",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseURL}}/v1/products/light?productCodes={{productCode}}&lang=ti&banner=loblaw&bookingDate={{currentDate}}&storeId=1032",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"v1",
										"products",
										"light"
									],
									"query": [
										{
											"key": "productCodes",
											"value": "{{productCode}}"
										},
										{
											"key": "lang",
											"value": "ti"
										},
										{
											"key": "banner",
											"value": "loblaw"
										},
										{
											"key": "bookingDate",
											"value": "{{currentDate}}"
										},
										{
											"key": "storeId",
											"value": "1032"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "GET_Product_Lite_400_with_banner_query_param_missing_from_the_request.",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Status Code | 400 Bad Request', function(){",
											"pm.response.to.have.status(400)",
											"})",
											"",
											"var responseData = pm.response.json();",
											"",
											"pm.test('Validate Error message', function(){",
											"    pm.expect(responseData.message).to.eql(\"400 BAD_REQUEST \\\"Required String parameter 'banner' is not present\\\"\")",
											"})",
											"",
											"pm.test('Validate error error code in response', function(){",
											"    pm.expect(responseData.error_code).to.eql(\"400\")",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseURL}}/v1/products/light?lang={{langEnglish}}&bookingDate={{currentDate}}&storeId=1032&productCodes={{productCode}}",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"v1",
										"products",
										"light"
									],
									"query": [
										{
											"key": "lang",
											"value": "{{langEnglish}}"
										},
										{
											"key": "banner",
											"value": "loblaw",
											"disabled": true
										},
										{
											"key": "bookingDate",
											"value": "{{currentDate}}"
										},
										{
											"key": "storeId",
											"value": "1032"
										},
										{
											"key": "productCodes",
											"value": "{{productCode}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "GET_Product_Lite_400_with_banner_is_an_empty_query_param.",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Status Code | 400 Bad Request', function(){",
											"pm.response.to.have.status(400)",
											"})",
											"",
											"var responseData = pm.response.json();",
											"",
											"pm.test('Validate Error message', function(){",
											"    pm.expect(responseData.message).to.eql(\"getLiteProducts.banner: Invalid banner value\")",
											"})",
											"",
											"pm.test('Validate error error code in response', function(){",
											"    pm.expect(responseData.error_code).to.eql(\"400\")",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseURL}}/v1/products/light?productCodes={{productCode}}&lang={{langEnglish}}&banner=&bookingDate={{currentDate}}&storeId=1032",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"v1",
										"products",
										"light"
									],
									"query": [
										{
											"key": "productCodes",
											"value": "{{productCode}}"
										},
										{
											"key": "lang",
											"value": "{{langEnglish}}"
										},
										{
											"key": "banner",
											"value": ""
										},
										{
											"key": "bookingDate",
											"value": "{{currentDate}}"
										},
										{
											"key": "storeId",
											"value": "1032"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "GET_Product_Lite_400_with_banner_having_an_invalid_value.",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Status Code | 400 Bad Request', function(){",
											"pm.response.to.have.status(400)",
											"})",
											"",
											"var responseData = pm.response.json();",
											"",
											"pm.test('Validate Error message', function(){",
											"    pm.expect(responseData.message).to.eql(\"getLiteProducts.banner: Invalid banner value\")",
											"})",
											"",
											"pm.test('Validate error error code in response', function(){",
											"    pm.expect(responseData.error_code).to.eql(\"400\")",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseURL}}/v1/products/light?productCodes={{productCode}}&lang={{langEnglish}}&banner=something&bookingDate={{currentDate}}&storeId=1032",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"v1",
										"products",
										"light"
									],
									"query": [
										{
											"key": "productCodes",
											"value": "{{productCode}}"
										},
										{
											"key": "lang",
											"value": "{{langEnglish}}"
										},
										{
											"key": "banner",
											"value": "something"
										},
										{
											"key": "bookingDate",
											"value": "{{currentDate}}"
										},
										{
											"key": "storeId",
											"value": "1032"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "GET_Product_Lite_400_with_bookingDate_missing_from_the_query_params",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Status Code | 400 Bad Request', function(){",
											"pm.response.to.have.status(400)",
											"})",
											"",
											"var responseData = pm.response.json();",
											"",
											"pm.test('Validate Error message', function(){",
											"    pm.expect(responseData.message).to.eql(\"400 BAD_REQUEST \\\"Required String parameter 'bookingDate' is not present\\\"\")",
											"})",
											"",
											"pm.test('Validate error error code in response', function(){",
											"    pm.expect(responseData.error_code).to.eql(\"400\")",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseURL}}/v1/products/light?lang={{langEnglish}}&banner=loblaw&storeId=1032&productCodes={{productCode}}",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"v1",
										"products",
										"light"
									],
									"query": [
										{
											"key": "lang",
											"value": "{{langEnglish}}"
										},
										{
											"key": "banner",
											"value": "loblaw"
										},
										{
											"key": "bookingDate",
											"value": "{{currentDate}}",
											"disabled": true
										},
										{
											"key": "storeId",
											"value": "1032"
										},
										{
											"key": "productCodes",
											"value": "{{productCode}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "GET_Product_Lite_400_with_bookingDate_as_empty_query_param",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Status Code | 400 Bad Request', function(){",
											"pm.response.to.have.status(400)",
											"})",
											"",
											"var responseData = pm.response.json();",
											"",
											"pm.test('Validate Error message', function(){",
											"    pm.expect(responseData.message).to.eql(\"getLiteProducts.bookingDate: invalid date format\")",
											"})",
											"",
											"pm.test('Validate error error code in response', function(){",
											"    pm.expect(responseData.error_code).to.eql(\"400\")",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseURL}}/v1/products/light?productCodes={{productCode}}&lang={{langEnglish}}&banner=loblaw&bookingDate=&storeId=1032",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"v1",
										"products",
										"light"
									],
									"query": [
										{
											"key": "productCodes",
											"value": "{{productCode}}"
										},
										{
											"key": "lang",
											"value": "{{langEnglish}}"
										},
										{
											"key": "banner",
											"value": "loblaw"
										},
										{
											"key": "bookingDate",
											"value": ""
										},
										{
											"key": "storeId",
											"value": "1032"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "GET_Product_Lite_400_with_bookingDate_in_invalid_format",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Status Code | 400 Bad Request', function(){",
											"pm.response.to.have.status(400)",
											"})",
											"",
											"var responseData = pm.response.json();",
											"",
											"pm.test('Validate Error message', function(){",
											"    pm.expect(responseData.message).to.eql(\"getLiteProducts.bookingDate: invalid date format\")",
											"})",
											"",
											"pm.test('Validate error error code in response', function(){",
											"    pm.expect(responseData.error_code).to.eql(\"400\")",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseURL}}/v1/products/light?productCodes={{productCode}}&lang={{langEnglish}}&banner=loblaw&bookingDate=20222-080&storeId=1032",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"v1",
										"products",
										"light"
									],
									"query": [
										{
											"key": "productCodes",
											"value": "{{productCode}}"
										},
										{
											"key": "lang",
											"value": "{{langEnglish}}"
										},
										{
											"key": "banner",
											"value": "loblaw"
										},
										{
											"key": "bookingDate",
											"value": "20222-080"
										},
										{
											"key": "storeId",
											"value": "1032"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "GET_Product_Lite_400_with_storeId_missing_from_the_query_params.",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Status Code | 400 Bad Request', function(){",
											"pm.response.to.have.status(400)",
											"})",
											"",
											"var responseData = pm.response.json();",
											"",
											"pm.test('Validate Error message', function(){",
											"    pm.expect(responseData.message).to.eql(\"400 BAD_REQUEST \\\"Required String parameter 'storeId' is not present\\\"\")",
											"})",
											"",
											"pm.test('Validate error error code in response', function(){",
											"    pm.expect(responseData.error_code).to.eql(\"400\")",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseURL}}/v1/products/light?lang={{langEnglish}}&banner=loblaw&bookingDate={{currentDate}}&productCodes={{productCode}}",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"v1",
										"products",
										"light"
									],
									"query": [
										{
											"key": "lang",
											"value": "{{langEnglish}}"
										},
										{
											"key": "banner",
											"value": "loblaw"
										},
										{
											"key": "bookingDate",
											"value": "{{currentDate}}"
										},
										{
											"key": "storeId",
											"value": "1032",
											"disabled": true
										},
										{
											"key": "productCodes",
											"value": "{{productCode}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "GET_Product_Lite_400_with_storeId_as_an_empty_query_param",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Status Code | 400 Bad Request', function(){",
											"pm.response.to.have.status(400)",
											"})",
											"",
											"var responseData = pm.response.json();",
											"",
											"pm.test('Validate Error message', function(){",
											"    pm.expect(responseData.message).to.eql(\"getLiteProducts.storeId: store id must not be blank\")",
											"})",
											"",
											"pm.test('Validate error error code in response', function(){",
											"    pm.expect(responseData.error_code).to.eql(\"400\")",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseURL}}/v1/products/light?productCodes={{productCode}}&lang={{langEnglish}}&banner=loblaw&bookingDate={{currentDate}}&storeId=",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"v1",
										"products",
										"light"
									],
									"query": [
										{
											"key": "productCodes",
											"value": "{{productCode}}"
										},
										{
											"key": "lang",
											"value": "{{langEnglish}}"
										},
										{
											"key": "banner",
											"value": "loblaw"
										},
										{
											"key": "bookingDate",
											"value": "{{currentDate}}"
										},
										{
											"key": "storeId",
											"value": ""
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "GET_Product_Lite_400_with_timeSlot_of_invalid_format",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Status Code | 400 Bad Request', function(){",
											"pm.response.to.have.status(400)",
											"})",
											"",
											"var responseData = pm.response.json();",
											"",
											"pm.test('Validate Error message', function(){",
											"    pm.expect(responseData.message).to.eql(\"getLiteProducts.timeSlot: Invalid timeSlot. Provide valid UTC Epoch time format. Ex: 1663679905\")",
											"})",
											"",
											"pm.test('Validate error error code in response', function(){",
											"    pm.expect(responseData.error_code).to.eql(\"400\")",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseURL}}/v1/products/light?productCodes={{productCode}}&lang={{langEnglish}}&banner=loblaw&bookingDate={{currentDate}}&storeId=1032&timeSlot=2020-08-2212:54:03.707Z",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"v1",
										"products",
										"light"
									],
									"query": [
										{
											"key": "productCodes",
											"value": "{{productCode}}"
										},
										{
											"key": "lang",
											"value": "{{langEnglish}}"
										},
										{
											"key": "banner",
											"value": "loblaw"
										},
										{
											"key": "bookingDate",
											"value": "{{currentDate}}"
										},
										{
											"key": "storeId",
											"value": "1032"
										},
										{
											"key": "timeSlot",
											"value": "2020-08-2212:54:03.707Z"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "GET_Product_Lite_405_with_invalid_http_method",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Status Code | 405 Method Not Allowed', function(){",
											"pm.response.to.have.status(405)",
											"})",
											"",
											"var responseData = pm.response.json();",
											"",
											"pm.test('Validate Error message', function(){",
											"    pm.expect(responseData.status).to.eql(405)",
											"})",
											"",
											"pm.test('Validate error error code in response', function(){",
											"    pm.expect(responseData.error).to.eql(\"Method Not Allowed\")",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [],
								"url": {
									"raw": "{{baseURL}}/v1/products/light?productCodes={{productCode}}&lang={{langEnglish}}&banner=loblaw&bookingDate={{currentDate}}&storeId=1032",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"v1",
										"products",
										"light"
									],
									"query": [
										{
											"key": "productCodes",
											"value": "{{productCode}}"
										},
										{
											"key": "lang",
											"value": "{{langEnglish}}"
										},
										{
											"key": "banner",
											"value": "loblaw"
										},
										{
											"key": "bookingDate",
											"value": "{{currentDate}}"
										},
										{
											"key": "storeId",
											"value": "1032"
										}
									]
								}
							},
							"response": []
						}
					]
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "Product-Controller",
			"item": [
				{
					"name": "Positive Tests",
					"item": [
						{
							"name": "GET_Review_Controller_200_with_mandatory_query_params_only",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var Ajv = require('ajv'),",
											"    ajv = new Ajv({logger: console,  allErrors: true});",
											"",
											"var responseData = pm.response.json();",
											"var product = responseData[0].product;",
											"var prices = responseData[0].prices;",
											"var priceingUnit = responseData[0].pricing_units;",
											"var badge = responseData[0].badges",
											"var specifications = responseData[0].specifications;",
											"",
											"const productSchema = JSON.parse(pm.environment.get('productSchema'));",
											"const priceSchema = JSON.parse(pm.environment.get('priceSchema'));",
											"const pricingUnitsSchema = JSON.parse(pm.environment.get('pricingUnitsSchema'));",
											"const badgeSchema = JSON.parse(pm.environment.get('badgeSchema'));",
											"const specificationSchema = JSON.parse(pm.environment.get('specificationSchema'));",
											"var images = responseData[0].product.image_assets;",
											"const imagesSchema = JSON.parse(pm.environment.get('imagesSchema'));",
											"",
											"images.forEach(function(index){",
											"pm.test('Validated Images in response', function() {",
											"    pm.expect(ajv.validate(imagesSchema, index)).to.be.true;",
											"});",
											"})",
											"",
											"pm.test('Validated Product Object', function() {",
											"    pm.expect(ajv.validate(productSchema, product)).to.be.true;",
											"});",
											"",
											"pm.test('Validated Price Object', function() {",
											"    pm.expect(ajv.validate(priceSchema, prices)).to.be.true;",
											"});",
											"",
											"pm.test('Validated Pricing Unit Object', function() {",
											"    pm.expect(ajv.validate(pricingUnitsSchema, priceingUnit)).to.be.true;",
											"});",
											"",
											"badge.forEach(function(index){",
											"pm.test('Validated Badge Object', function() {",
											"    pm.expect(ajv.validate(badgeSchema, index)).to.be.true;",
											"});",
											"});",
											"",
											"pm.test('Validated specifications Object', function() {",
											"    pm.expect(ajv.validate(specificationSchema, specifications)).to.be.true;",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseURL}}/v1/products?lang={{langEnglish}}&banner=loblaw&bookingDate={{currentDate}}&storeId={{storeId}}&tenantId=JOE_FRESH&productCodes={{productCode}}",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"v1",
										"products"
									],
									"query": [
										{
											"key": "lang",
											"value": "{{langEnglish}}"
										},
										{
											"key": "banner",
											"value": "loblaw"
										},
										{
											"key": "bookingDate",
											"value": "{{currentDate}}"
										},
										{
											"key": "storeId",
											"value": "{{storeId}}"
										},
										{
											"key": "pickupType",
											"value": "STORE",
											"disabled": true
										},
										{
											"key": "tenantId",
											"value": "JOE_FRESH"
										},
										{
											"key": "productCodes",
											"value": "{{productCode}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "GET_Review_Controller_200_with_all_the_query_params",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var Ajv = require('ajv'),",
											"    ajv = new Ajv({logger: console,  allErrors: true});",
											"",
											"var responseData = pm.response.json();",
											"var product = responseData[0].product;",
											"var prices = responseData[0].prices;",
											"var priceingUnit = responseData[0].pricing_units;",
											"var specifications = responseData[0].specifications;",
											"",
											"const productSchema = JSON.parse(pm.environment.get('productSchema'));",
											"const priceSchema = JSON.parse(pm.environment.get('priceSchema'));",
											"const pricingUnitsSchema = JSON.parse(pm.environment.get('pricingUnitsSchema'));",
											"const specificationSchema = JSON.parse(pm.environment.get('specificationSchema'));",
											"var images = responseData[0].product.image_assets;",
											"const imagesSchema = JSON.parse(pm.environment.get('imagesSchema'));",
											"",
											"images.forEach(function(index){",
											"pm.test('Validated Images in response', function() {",
											"    pm.expect(ajv.validate(imagesSchema, index)).to.be.true;",
											"});",
											"})",
											"",
											"pm.test('Validated Product Object', function() {",
											"    pm.expect(ajv.validate(productSchema, product)).to.be.true;",
											"});",
											"",
											"pm.test('Validated Price Object', function() {",
											"    pm.expect(ajv.validate(priceSchema, prices)).to.be.true;",
											"});",
											"",
											"pm.test('Validated Pricing Unit Object', function() {",
											"    pm.expect(ajv.validate(pricingUnitsSchema, priceingUnit)).to.be.true;",
											"});",
											"",
											"",
											"pm.test('Validated specifications Object', function() {",
											"    pm.expect(ajv.validate(specificationSchema, specifications)).to.be.true;",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseURL}}/v1/products?productCodes={{productCode}}&lang={{langEnglish}}&banner=loblaw&bookingDate={{currentDate}}&storeId={{storeId}}&pickupType=STORE&pcId=99971809&includeRatings=yes&tenantId=JOE_FRESH",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"v1",
										"products"
									],
									"query": [
										{
											"key": "productCodes",
											"value": "{{productCode}}"
										},
										{
											"key": "lang",
											"value": "{{langEnglish}}"
										},
										{
											"key": "banner",
											"value": "loblaw"
										},
										{
											"key": "bookingDate",
											"value": "{{currentDate}}"
										},
										{
											"key": "storeId",
											"value": "{{storeId}}"
										},
										{
											"key": "pickupType",
											"value": "STORE"
										},
										{
											"key": "pcId",
											"value": "99971809"
										},
										{
											"key": "includeRatings",
											"value": "yes"
										},
										{
											"key": "tenantId",
											"value": "JOE_FRESH"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "GET_Product_Controller_200_with_multiple_productCodes",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var Ajv = require('ajv'),",
											"    ajv = new Ajv({logger: console,  allErrors: true});",
											"",
											"var responseData = pm.response.json();",
											"let lenghtOfResponse = responseData.length;",
											"    console.log(lenghtOfResponse)",
											"",
											"for(let iterator = 0; iterator< lenghtOfResponse; iterator++){",
											"    var bodyOfResponse = pm.response.json();",
											"var product = bodyOfResponse[iterator].product;",
											"var prices = bodyOfResponse[iterator].prices;",
											"var priceingUnit = bodyOfResponse[iterator].pricing_units;",
											"var badge = bodyOfResponse[iterator].badges",
											"var specifications = bodyOfResponse[iterator].specifications;",
											"",
											"const productSchema = JSON.parse(pm.environment.get('productSchema'));",
											"const priceSchema = JSON.parse(pm.environment.get('priceSchema'));",
											"const pricingUnitsSchema = JSON.parse(pm.environment.get('pricingUnitsSchema'));",
											"const badgeSchema = JSON.parse(pm.environment.get('badgeSchema'));",
											"const specificationSchema = JSON.parse(pm.environment.get('specificationSchema'));",
											"var images = bodyOfResponse[iterator].product.image_assets;",
											"const imagesSchema = JSON.parse(pm.environment.get('imagesSchema'));",
											"",
											"images.forEach(function(index){",
											"pm.test('Validated Images in response', function() {",
											"    pm.expect(ajv.validate(imagesSchema, index)).to.be.true;",
											"});",
											"})",
											"",
											"pm.test('Validated Product Object', function() {",
											"    pm.expect(ajv.validate(productSchema, product)).to.be.true;",
											"});",
											"",
											"pm.test('Validated Price Object', function() {",
											"    pm.expect(ajv.validate(priceSchema, prices)).to.be.true;",
											"});",
											"",
											"pm.test('Validated Pricing Unit Object', function() {",
											"    pm.expect(ajv.validate(pricingUnitsSchema, priceingUnit)).to.be.true;",
											"});",
											"",
											"badge.forEach(function(index){",
											"pm.test('Validated Badge Object', function() {",
											"    pm.expect(ajv.validate(badgeSchema, index)).to.be.true;",
											"});",
											"});",
											"",
											"pm.test('Validated specifications Object', function() {",
											"    pm.expect(ajv.validate(specificationSchema, specifications)).to.be.true;",
											"});",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseURL}}/v1/products?productCodes={{productCode}},U2WP028547012_EA,U2WR027842001_EA,U2WR027842007_EA,U2WR027842004_EA,U2WR027842011_EA,U2WR027842013_EA,U2WR028836002_EA,U2WP028547003_EA,U2WP028547004_EA,U2WP028547002_EA,U2WP028547013_EA,U2WR027846005_EA,U2WR028554009_EA,U2WP028551018_EA,U2WP028551013_EA&lang={{langEnglish}}&banner=loblaw&bookingDate={{currentDate}}&storeId={{storeId}}&tenantId=JOE_FRESH",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"v1",
										"products"
									],
									"query": [
										{
											"key": "productCodes",
											"value": "{{productCode}},U2WP028547012_EA,U2WR027842001_EA,U2WR027842007_EA,U2WR027842004_EA,U2WR027842011_EA,U2WR027842013_EA,U2WR028836002_EA,U2WP028547003_EA,U2WP028547004_EA,U2WP028547002_EA,U2WP028547013_EA,U2WR027846005_EA,U2WR028554009_EA,U2WP028551018_EA,U2WP028551013_EA"
										},
										{
											"key": "lang",
											"value": "{{langEnglish}}"
										},
										{
											"key": "banner",
											"value": "loblaw"
										},
										{
											"key": "bookingDate",
											"value": "{{currentDate}}"
										},
										{
											"key": "storeId",
											"value": "{{storeId}}"
										},
										{
											"key": "tenantId",
											"value": "JOE_FRESH"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "GET_Product_Controller_200_with_lang_as_en",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var Ajv = require('ajv'),",
											"    ajv = new Ajv({logger: console,  allErrors: true});",
											"",
											"var responseData = pm.response.json();",
											"var product = responseData[0].product;",
											"var prices = responseData[0].prices;",
											"var priceingUnit = responseData[0].pricing_units;",
											"var badge = responseData[0].badges",
											"var specifications = responseData[0].specifications;",
											"",
											"const productSchema = JSON.parse(pm.environment.get('productSchema'));",
											"const priceSchema = JSON.parse(pm.environment.get('priceSchema'));",
											"const pricingUnitsSchema = JSON.parse(pm.environment.get('pricingUnitsSchema'));",
											"const badgeSchema = JSON.parse(pm.environment.get('badgeSchema'));",
											"const specificationSchema = JSON.parse(pm.environment.get('specificationSchema'));",
											"var images = responseData[0].product.image_assets;",
											"const imagesSchema = JSON.parse(pm.environment.get('imagesSchema'));",
											"",
											"images.forEach(function(index){",
											"pm.test('Validated Images in response', function() {",
											"    pm.expect(ajv.validate(imagesSchema, index)).to.be.true;",
											"});",
											"})",
											"",
											"pm.test('Validated Product Object', function() {",
											"    pm.expect(ajv.validate(productSchema, product)).to.be.true;",
											"});",
											"",
											"pm.test('Validated Price Object', function() {",
											"    pm.expect(ajv.validate(priceSchema, prices)).to.be.true;",
											"});",
											"",
											"pm.test('Validated Pricing Unit Object', function() {",
											"    pm.expect(ajv.validate(pricingUnitsSchema, priceingUnit)).to.be.true;",
											"});",
											"",
											"badge.forEach(function(index){",
											"pm.test('Validated Badge Object', function() {",
											"    pm.expect(ajv.validate(badgeSchema, index)).to.be.true;",
											"});",
											"});",
											"",
											"pm.test('Validated specifications Object', function() {",
											"    pm.expect(ajv.validate(specificationSchema, specifications)).to.be.true;",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseURL}}/v1/products?productCodes={{productCode}}&lang={{langEnglish}}&banner=loblaw&bookingDate={{currentDate}}&storeId={{storeId}}&tenantId=JOE_FRESH",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"v1",
										"products"
									],
									"query": [
										{
											"key": "productCodes",
											"value": "{{productCode}}"
										},
										{
											"key": "lang",
											"value": "{{langEnglish}}"
										},
										{
											"key": "banner",
											"value": "loblaw"
										},
										{
											"key": "bookingDate",
											"value": "{{currentDate}}"
										},
										{
											"key": "storeId",
											"value": "{{storeId}}"
										},
										{
											"key": "tenantId",
											"value": "JOE_FRESH"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "GET_Product_Controller_200_with_lang_as_fr",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var Ajv = require('ajv'),",
											"    ajv = new Ajv({logger: console,  allErrors: true});",
											"",
											"var responseData = pm.response.json();",
											"var product = responseData[0].product;",
											"var prices = responseData[0].prices;",
											"var priceingUnit = responseData[0].pricing_units;",
											"var badge = responseData[0].badges",
											"var specifications = responseData[0].specifications;",
											"",
											"const productSchema = JSON.parse(pm.environment.get('productSchema'));",
											"const priceSchema = JSON.parse(pm.environment.get('priceSchema'));",
											"const pricingUnitsSchema = JSON.parse(pm.environment.get('pricingUnitsSchema'));",
											"const badgeSchema = JSON.parse(pm.environment.get('badgeSchema'));",
											"const specificationSchema = JSON.parse(pm.environment.get('specificationSchema'));",
											"var images = responseData[0].product.image_assets;",
											"const imagesSchema = JSON.parse(pm.environment.get('imagesSchema'));",
											"",
											"images.forEach(function(index){",
											"pm.test('Validated Images in response', function() {",
											"    pm.expect(ajv.validate(imagesSchema, index)).to.be.true;",
											"});",
											"})",
											"",
											"pm.test('Validated Product Object', function() {",
											"    pm.expect(ajv.validate(productSchema, product)).to.be.true;",
											"});",
											"",
											"pm.test('Validated Price Object', function() {",
											"    pm.expect(ajv.validate(priceSchema, prices)).to.be.true;",
											"});",
											"",
											"pm.test('Validated Pricing Unit Object', function() {",
											"    pm.expect(ajv.validate(pricingUnitsSchema, priceingUnit)).to.be.true;",
											"});",
											"",
											"badge.forEach(function(index){",
											"pm.test('Validated Badge Object', function() {",
											"    pm.expect(ajv.validate(badgeSchema, index)).to.be.true;",
											"});",
											"});",
											"",
											"pm.test('Validated specifications Object', function() {",
											"    pm.expect(ajv.validate(specificationSchema, specifications)).to.be.true;",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseURL}}/v1/products?productCodes={{productCode}}&lang={{langFrench}}&banner=loblaw&bookingDate={{currentDate}}&storeId={{storeId}}&tenantId=JOE_FRESH",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"v1",
										"products"
									],
									"query": [
										{
											"key": "productCodes",
											"value": "{{productCode}}"
										},
										{
											"key": "lang",
											"value": "{{langFrench}}"
										},
										{
											"key": "banner",
											"value": "loblaw"
										},
										{
											"key": "bookingDate",
											"value": "{{currentDate}}"
										},
										{
											"key": "storeId",
											"value": "{{storeId}}"
										},
										{
											"key": "tenantId",
											"value": "JOE_FRESH"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "GET_Product_Controller_200_with_pickupType_as_TRUCK",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var Ajv = require('ajv'),",
											"    ajv = new Ajv({logger: console,  allErrors: true});",
											"",
											"var responseData = pm.response.json();",
											"var product = responseData[0].product;",
											"var prices = responseData[0].prices;",
											"var priceingUnit = responseData[0].pricing_units;",
											"var badge = responseData[0].badges",
											"var specifications = responseData[0].specifications;",
											"",
											"const productSchema = JSON.parse(pm.environment.get('productSchema'));",
											"const priceSchema = JSON.parse(pm.environment.get('priceSchema'));",
											"const pricingUnitsSchema = JSON.parse(pm.environment.get('pricingUnitsSchema'));",
											"const badgeSchema = JSON.parse(pm.environment.get('badgeSchema'));",
											"const specificationSchema = JSON.parse(pm.environment.get('specificationSchema'));",
											"var images = responseData[0].product.image_assets;",
											"const imagesSchema = JSON.parse(pm.environment.get('imagesSchema'));",
											"",
											"images.forEach(function(index){",
											"pm.test('Validated Images in response', function() {",
											"    pm.expect(ajv.validate(imagesSchema, index)).to.be.true;",
											"});",
											"})",
											"",
											"pm.test('Validated Product Object', function() {",
											"    pm.expect(ajv.validate(productSchema, product)).to.be.true;",
											"});",
											"",
											"pm.test('Validated Price Object', function() {",
											"    pm.expect(ajv.validate(priceSchema, prices)).to.be.true;",
											"});",
											"",
											"pm.test('Validated Pricing Unit Object', function() {",
											"    pm.expect(ajv.validate(pricingUnitsSchema, priceingUnit)).to.be.true;",
											"});",
											"",
											"badge.forEach(function(index){",
											"pm.test('Validated Badge Object', function() {",
											"    pm.expect(ajv.validate(badgeSchema, index)).to.be.true;",
											"});",
											"});",
											"",
											"pm.test('Validated specifications Object', function() {",
											"    pm.expect(ajv.validate(specificationSchema, specifications)).to.be.true;",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseURL}}/v1/products?productCodes={{productCode}}&lang={{langEnglish}}&banner=loblaw&bookingDate={{currentDate}}&storeId={{storeId}}&piclupType=TRUCK&tenantId=JOE_FRESH",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"v1",
										"products"
									],
									"query": [
										{
											"key": "productCodes",
											"value": "{{productCode}}"
										},
										{
											"key": "lang",
											"value": "{{langEnglish}}"
										},
										{
											"key": "banner",
											"value": "loblaw"
										},
										{
											"key": "bookingDate",
											"value": "{{currentDate}}"
										},
										{
											"key": "storeId",
											"value": "{{storeId}}"
										},
										{
											"key": "piclupType",
											"value": "TRUCK"
										},
										{
											"key": "tenantId",
											"value": "JOE_FRESH"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "GET_Product_Controller_200_with_pickupType_as_LOCKER",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var Ajv = require('ajv'),",
											"    ajv = new Ajv({logger: console,  allErrors: true});",
											"",
											"var responseData = pm.response.json();",
											"var product = responseData[0].product;",
											"var prices = responseData[0].prices;",
											"var priceingUnit = responseData[0].pricing_units;",
											"var badge = responseData[0].badges",
											"var specifications = responseData[0].specifications;",
											"",
											"const productSchema = JSON.parse(pm.environment.get('productSchema'));",
											"const priceSchema = JSON.parse(pm.environment.get('priceSchema'));",
											"const pricingUnitsSchema = JSON.parse(pm.environment.get('pricingUnitsSchema'));",
											"const badgeSchema = JSON.parse(pm.environment.get('badgeSchema'));",
											"const specificationSchema = JSON.parse(pm.environment.get('specificationSchema'));",
											"var images = responseData[0].product.image_assets;",
											"const imagesSchema = JSON.parse(pm.environment.get('imagesSchema'));",
											"",
											"images.forEach(function(index){",
											"pm.test('Validated Images in response', function() {",
											"    pm.expect(ajv.validate(imagesSchema, index)).to.be.true;",
											"});",
											"})",
											"",
											"pm.test('Validated Product Object', function() {",
											"    pm.expect(ajv.validate(productSchema, product)).to.be.true;",
											"});",
											"",
											"pm.test('Validated Price Object', function() {",
											"    pm.expect(ajv.validate(priceSchema, prices)).to.be.true;",
											"});",
											"",
											"pm.test('Validated Pricing Unit Object', function() {",
											"    pm.expect(ajv.validate(pricingUnitsSchema, priceingUnit)).to.be.true;",
											"});",
											"",
											"badge.forEach(function(index){",
											"pm.test('Validated Badge Object', function() {",
											"    pm.expect(ajv.validate(badgeSchema, index)).to.be.true;",
											"});",
											"});",
											"",
											"pm.test('Validated specifications Object', function() {",
											"    pm.expect(ajv.validate(specificationSchema, specifications)).to.be.true;",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseURL}}/v1/products?productCodes={{productCode}}&lang={{langEnglish}}&banner=loblaw&bookingDate={{currentDate}}&storeId={{storeId}}&pickupType=LOCKER&tenantId=JOE_FRESH",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"v1",
										"products"
									],
									"query": [
										{
											"key": "productCodes",
											"value": "{{productCode}}"
										},
										{
											"key": "lang",
											"value": "{{langEnglish}}"
										},
										{
											"key": "banner",
											"value": "loblaw"
										},
										{
											"key": "bookingDate",
											"value": "{{currentDate}}"
										},
										{
											"key": "storeId",
											"value": "{{storeId}}"
										},
										{
											"key": "pickupType",
											"value": "LOCKER"
										},
										{
											"key": "tenantId",
											"value": "JOE_FRESH"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "GET_Product_Controller_200_with_pickupType_as_DELIVERY",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var Ajv = require('ajv'),",
											"    ajv = new Ajv({logger: console,  allErrors: true});",
											"",
											"var responseData = pm.response.json();",
											"var product = responseData[0].product;",
											"var prices = responseData[0].prices;",
											"var priceingUnit = responseData[0].pricing_units;",
											"var badge = responseData[0].badges",
											"var specifications = responseData[0].specifications;",
											"",
											"const productSchema = JSON.parse(pm.environment.get('productSchema'));",
											"const priceSchema = JSON.parse(pm.environment.get('priceSchema'));",
											"const pricingUnitsSchema = JSON.parse(pm.environment.get('pricingUnitsSchema'));",
											"const badgeSchema = JSON.parse(pm.environment.get('badgeSchema'));",
											"const specificationSchema = JSON.parse(pm.environment.get('specificationSchema'));",
											"var images = responseData[0].product.image_assets;",
											"const imagesSchema = JSON.parse(pm.environment.get('imagesSchema'));",
											"",
											"images.forEach(function(index){",
											"pm.test('Validated Images in response', function() {",
											"    pm.expect(ajv.validate(imagesSchema, index)).to.be.true;",
											"});",
											"})",
											"",
											"pm.test('Validated Product Object', function() {",
											"    pm.expect(ajv.validate(productSchema, product)).to.be.true;",
											"});",
											"",
											"pm.test('Validated Price Object', function() {",
											"    pm.expect(ajv.validate(priceSchema, prices)).to.be.true;",
											"});",
											"",
											"pm.test('Validated Pricing Unit Object', function() {",
											"    pm.expect(ajv.validate(pricingUnitsSchema, priceingUnit)).to.be.true;",
											"});",
											"",
											"badge.forEach(function(index){",
											"pm.test('Validated Badge Object', function() {",
											"    pm.expect(ajv.validate(badgeSchema, index)).to.be.true;",
											"});",
											"});",
											"",
											"pm.test('Validated specifications Object', function() {",
											"    pm.expect(ajv.validate(specificationSchema, specifications)).to.be.true;",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseURL}}/v1/products?productCodes={{productCode}}&lang={{langEnglish}}&banner=loblaw&bookingDate={{currentDate}}&storeId={{storeId}}&pickupType=DELIVERY&tenantId=JOE_FRESH",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"v1",
										"products"
									],
									"query": [
										{
											"key": "productCodes",
											"value": "{{productCode}}"
										},
										{
											"key": "lang",
											"value": "{{langEnglish}}"
										},
										{
											"key": "banner",
											"value": "loblaw"
										},
										{
											"key": "bookingDate",
											"value": "{{currentDate}}"
										},
										{
											"key": "storeId",
											"value": "{{storeId}}"
										},
										{
											"key": "pickupType",
											"value": "DELIVERY"
										},
										{
											"key": "tenantId",
											"value": "JOE_FRESH"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "GET_Product_Controller_200_price_info_should_be_returned",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var Ajv = require('ajv'),",
											"    ajv = new Ajv({logger: console,  allErrors: true});",
											"",
											"var responseData = pm.response.json();",
											"var product = responseData[0].product;",
											"var prices = responseData[0].prices;",
											"var priceingUnit = responseData[0].pricing_units;",
											"var badge = responseData[0].badges",
											"var specifications = responseData[0].specifications;",
											"",
											"const productSchema = JSON.parse(pm.environment.get('productSchema'));",
											"const priceSchema = JSON.parse(pm.environment.get('priceSchema'));",
											"const pricingUnitsSchema = JSON.parse(pm.environment.get('pricingUnitsSchema'));",
											"const badgeSchema = JSON.parse(pm.environment.get('badgeSchema'));",
											"const specificationSchema = JSON.parse(pm.environment.get('specificationSchema'));",
											"var images = responseData[0].product.image_assets;",
											"const imagesSchema = JSON.parse(pm.environment.get('imagesSchema'));",
											"",
											"images.forEach(function(index){",
											"pm.test('Validated Images in response', function() {",
											"    pm.expect(ajv.validate(imagesSchema, index)).to.be.true;",
											"});",
											"})",
											"",
											"pm.test('Validated Product Object', function() {",
											"    pm.expect(ajv.validate(productSchema, product)).to.be.true;",
											"});",
											"",
											"pm.test('Validated Price Object', function() {",
											"    pm.expect(ajv.validate(priceSchema, prices)).to.be.true;",
											"});",
											"",
											"pm.test('Validated Pricing Unit Object', function() {",
											"    pm.expect(ajv.validate(pricingUnitsSchema, priceingUnit)).to.be.true;",
											"});",
											"",
											"badge.forEach(function(index){",
											"pm.test('Validated Badge Object', function() {",
											"    pm.expect(ajv.validate(badgeSchema, index)).to.be.true;",
											"});",
											"});",
											"",
											"pm.test('Validated specifications Object', function() {",
											"    pm.expect(ajv.validate(specificationSchema, specifications)).to.be.true;",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseURL}}/v1/products?productCodes={{productCode}}&lang={{langEnglish}}&banner=loblaw&bookingDate={{currentDate}}&storeId={{storeId}}&tenantId=JOE_FRESH",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"v1",
										"products"
									],
									"query": [
										{
											"key": "productCodes",
											"value": "{{productCode}}"
										},
										{
											"key": "lang",
											"value": "{{langEnglish}}"
										},
										{
											"key": "banner",
											"value": "loblaw"
										},
										{
											"key": "bookingDate",
											"value": "{{currentDate}}"
										},
										{
											"key": "storeId",
											"value": "{{storeId}}"
										},
										{
											"key": "tenantId",
											"value": "JOE_FRESH"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "GET_Product_Controller_200_pricing_units_should_be_returned_for_each_product",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var Ajv = require('ajv'),",
											"    ajv = new Ajv({logger: console,  allErrors: true});",
											"",
											"var responseData = pm.response.json();",
											"var product = responseData[0].product;",
											"var prices = responseData[0].prices;",
											"var priceingUnit = responseData[0].pricing_units;",
											"var badge = responseData[0].badges",
											"var specifications = responseData[0].specifications;",
											"",
											"const productSchema = JSON.parse(pm.environment.get('productSchema'));",
											"const priceSchema = JSON.parse(pm.environment.get('priceSchema'));",
											"const pricingUnitsSchema = JSON.parse(pm.environment.get('pricingUnitsSchema'));",
											"const badgeSchema = JSON.parse(pm.environment.get('badgeSchema'));",
											"const specificationSchema = JSON.parse(pm.environment.get('specificationSchema'));",
											"var images = responseData[0].product.image_assets;",
											"const imagesSchema = JSON.parse(pm.environment.get('imagesSchema'));",
											"",
											"images.forEach(function(index){",
											"pm.test('Validated Images in response', function() {",
											"    pm.expect(ajv.validate(imagesSchema, index)).to.be.true;",
											"});",
											"})",
											"",
											"pm.test('Validated Product Object', function() {",
											"    pm.expect(ajv.validate(productSchema, product)).to.be.true;",
											"});",
											"",
											"pm.test('Validated Price Object', function() {",
											"    pm.expect(ajv.validate(priceSchema, prices)).to.be.true;",
											"});",
											"",
											"pm.test('Validated Pricing Unit Object', function() {",
											"    pm.expect(ajv.validate(pricingUnitsSchema, priceingUnit)).to.be.true;",
											"});",
											"",
											"badge.forEach(function(index){",
											"pm.test('Validated Badge Object', function() {",
											"    pm.expect(ajv.validate(badgeSchema, index)).to.be.true;",
											"});",
											"});",
											"",
											"pm.test('Validated specifications Object', function() {",
											"    pm.expect(ajv.validate(specificationSchema, specifications)).to.be.true;",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseURL}}/v1/products?productCodes={{productCode}}&lang={{langEnglish}}&banner=loblaw&bookingDate={{currentDate}}&storeId={{storeId}}&tenantId=JOE_FRESH",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"v1",
										"products"
									],
									"query": [
										{
											"key": "productCodes",
											"value": "{{productCode}}"
										},
										{
											"key": "lang",
											"value": "{{langEnglish}}"
										},
										{
											"key": "banner",
											"value": "loblaw"
										},
										{
											"key": "bookingDate",
											"value": "{{currentDate}}"
										},
										{
											"key": "storeId",
											"value": "{{storeId}}"
										},
										{
											"key": "tenantId",
											"value": "JOE_FRESH"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "GET_Product_Controller_200_badges_info_should_be_present_in_response",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var Ajv = require('ajv'),",
											"    ajv = new Ajv({logger: console,  allErrors: true});",
											"",
											"var responseData = pm.response.json();",
											"var product = responseData[0].product;",
											"var prices = responseData[0].prices;",
											"var priceingUnit = responseData[0].pricing_units;",
											"var badge = responseData[0].badges",
											"var specifications = responseData[0].specifications;",
											"",
											"const productSchema = JSON.parse(pm.environment.get('productSchema'));",
											"const priceSchema = JSON.parse(pm.environment.get('priceSchema'));",
											"const pricingUnitsSchema = JSON.parse(pm.environment.get('pricingUnitsSchema'));",
											"const badgeSchema = JSON.parse(pm.environment.get('badgeSchema'));",
											"const specificationSchema = JSON.parse(pm.environment.get('specificationSchema'));",
											"var images = responseData[0].product.image_assets;",
											"const imagesSchema = JSON.parse(pm.environment.get('imagesSchema'));",
											"",
											"images.forEach(function(index){",
											"pm.test('Validated Images in response', function() {",
											"    pm.expect(ajv.validate(imagesSchema, index)).to.be.true;",
											"});",
											"})",
											"",
											"pm.test('Validated Product Object', function() {",
											"    pm.expect(ajv.validate(productSchema, product)).to.be.true;",
											"});",
											"",
											"pm.test('Validated Price Object', function() {",
											"    pm.expect(ajv.validate(priceSchema, prices)).to.be.true;",
											"});",
											"",
											"pm.test('Validated Pricing Unit Object', function() {",
											"    pm.expect(ajv.validate(pricingUnitsSchema, priceingUnit)).to.be.true;",
											"});",
											"",
											"badge.forEach(function(index){",
											"pm.test('Validated Badge Object', function() {",
											"    pm.expect(ajv.validate(badgeSchema, index)).to.be.true;",
											"});",
											"});",
											"",
											"pm.test('Validated specifications Object', function() {",
											"    pm.expect(ajv.validate(specificationSchema, specifications)).to.be.true;",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseURL}}/v1/products?productCodes={{productCode}}&lang={{langEnglish}}&banner=loblaw&bookingDate={{currentDate}}&storeId={{storeId}}&tenantId=JOE_FRESH",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"v1",
										"products"
									],
									"query": [
										{
											"key": "productCodes",
											"value": "{{productCode}}"
										},
										{
											"key": "lang",
											"value": "{{langEnglish}}"
										},
										{
											"key": "banner",
											"value": "loblaw"
										},
										{
											"key": "bookingDate",
											"value": "{{currentDate}}"
										},
										{
											"key": "storeId",
											"value": "{{storeId}}"
										},
										{
											"key": "tenantId",
											"value": "JOE_FRESH"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "GET_Product_Controller_200_decorator_should_provide_rating_info",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var Ajv = require('ajv'),",
											"    ajv = new Ajv({logger: console,  allErrors: true});",
											"",
											"var responseData = pm.response.json();",
											"var product = responseData[0].product;",
											"var prices = responseData[0].prices;",
											"var priceingUnit = responseData[0].pricing_units;",
											"var badge = responseData[0].badges",
											"var specifications = responseData[0].specifications;",
											"",
											"const productSchema = JSON.parse(pm.environment.get('productSchema'));",
											"const priceSchema = JSON.parse(pm.environment.get('priceSchema'));",
											"const pricingUnitsSchema = JSON.parse(pm.environment.get('pricingUnitsSchema'));",
											"const badgeSchema = JSON.parse(pm.environment.get('badgeSchema'));",
											"const specificationSchema = JSON.parse(pm.environment.get('specificationSchema'));",
											"var images = responseData[0].product.image_assets;",
											"const imagesSchema = JSON.parse(pm.environment.get('imagesSchema'));",
											"",
											"images.forEach(function(index){",
											"pm.test('Validated Images in response', function() {",
											"    pm.expect(ajv.validate(imagesSchema, index)).to.be.true;",
											"});",
											"})",
											"",
											"pm.test('Validated Product Object', function() {",
											"    pm.expect(ajv.validate(productSchema, product)).to.be.true;",
											"});",
											"",
											"pm.test('Validated Price Object', function() {",
											"    pm.expect(ajv.validate(priceSchema, prices)).to.be.true;",
											"});",
											"",
											"pm.test('Validated Pricing Unit Object', function() {",
											"    pm.expect(ajv.validate(pricingUnitsSchema, priceingUnit)).to.be.true;",
											"});",
											"",
											"badge.forEach(function(index){",
											"pm.test('Validated Badge Object', function() {",
											"    pm.expect(ajv.validate(badgeSchema, index)).to.be.true;",
											"});",
											"});",
											"",
											"pm.test('Validated specifications Object', function() {",
											"    pm.expect(ajv.validate(specificationSchema, specifications)).to.be.true;",
											"});",
											"",
											"pm.test('Rating should be present in the response', function(){",
											"    pm.expect(responseData[0]).to.have.property('ratings')",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseURL}}/v1/products?productCodes={{productCode}}&lang={{langEnglish}}&banner=loblaw&bookingDate={{currentDate}}&storeId={{storeId}}&tenantId=JOE_FRESH",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"v1",
										"products"
									],
									"query": [
										{
											"key": "productCodes",
											"value": "{{productCode}}"
										},
										{
											"key": "lang",
											"value": "{{langEnglish}}"
										},
										{
											"key": "banner",
											"value": "loblaw"
										},
										{
											"key": "bookingDate",
											"value": "{{currentDate}}"
										},
										{
											"key": "storeId",
											"value": "{{storeId}}"
										},
										{
											"key": "tenantId",
											"value": "JOE_FRESH"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "GET_Product_Controller_200_decorator_should_provide_shoppable_flag",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var Ajv = require('ajv'),",
											"    ajv = new Ajv({logger: console,  allErrors: true});",
											"",
											"var responseData = pm.response.json();",
											"var product = responseData[0].product;",
											"var prices = responseData[0].prices;",
											"var priceingUnit = responseData[0].pricing_units;",
											"var badge = responseData[0].badges",
											"var specifications = responseData[0].specifications;",
											"var shoppable = responseData[0].shoppable;",
											"",
											"pm.test('Shoppable flag should be present', function(){",
											"    pm.expect(responseData[0]).to.have.property('shoppable')",
											"})",
											"",
											"pm.test('Shoppable flag should not be null', function(){",
											"    pm.expect(shoppable).to.not.eql(null)",
											"})",
											"",
											"pm.test('Shoppable flag should be of type boolean', function(){",
											"    pm.expect(shoppable).to.be.a(\"boolean\")",
											"})",
											"",
											"pm.test('Shoppable flag should be true', function(){",
											"    pm.expect(shoppable).to.eql(true)",
											"})",
											"",
											"const productSchema = JSON.parse(pm.environment.get('productSchema'));",
											"const priceSchema = JSON.parse(pm.environment.get('priceSchema'));",
											"const pricingUnitsSchema = JSON.parse(pm.environment.get('pricingUnitsSchema'));",
											"const badgeSchema = JSON.parse(pm.environment.get('badgeSchema'));",
											"const specificationSchema = JSON.parse(pm.environment.get('specificationSchema'));",
											"var images = responseData[0].product.image_assets;",
											"const imagesSchema = JSON.parse(pm.environment.get('imagesSchema'));",
											"",
											"images.forEach(function(index){",
											"pm.test('Validated Images in response', function() {",
											"    pm.expect(ajv.validate(imagesSchema, index)).to.be.true;",
											"});",
											"})",
											"",
											"pm.test('Validated Product Object', function() {",
											"    pm.expect(ajv.validate(productSchema, product)).to.be.true;",
											"});",
											"",
											"pm.test('Validated Price Object', function() {",
											"    pm.expect(ajv.validate(priceSchema, prices)).to.be.true;",
											"});",
											"",
											"pm.test('Validated Pricing Unit Object', function() {",
											"    pm.expect(ajv.validate(pricingUnitsSchema, priceingUnit)).to.be.true;",
											"});",
											"",
											"badge.forEach(function(index){",
											"pm.test('Validated Badge Object', function() {",
											"    pm.expect(ajv.validate(badgeSchema, index)).to.be.true;",
											"});",
											"});",
											"",
											"pm.test('Validated specifications Object', function() {",
											"    pm.expect(ajv.validate(specificationSchema, specifications)).to.be.true;",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseURL}}/v1/products?productCodes={{productCode}}&lang={{langEnglish}}&banner=loblaw&bookingDate={{currentDate}}&storeId={{storeId}}&tenantId=JOE_FRESH",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"v1",
										"products"
									],
									"query": [
										{
											"key": "productCodes",
											"value": "{{productCode}}"
										},
										{
											"key": "lang",
											"value": "{{langEnglish}}"
										},
										{
											"key": "banner",
											"value": "loblaw"
										},
										{
											"key": "bookingDate",
											"value": "{{currentDate}}"
										},
										{
											"key": "storeId",
											"value": "{{storeId}}"
										},
										{
											"key": "tenantId",
											"value": "JOE_FRESH"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "GET_Product_Controller_200_decorator_should_provide_taxes_and_fee_info",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var Ajv = require('ajv'),",
											"    ajv = new Ajv({logger: console,  allErrors: true});",
											"",
											"var responseData = pm.response.json();",
											"var taxes = responseData[0].taxes;",
											"var fees = responseData[0].fees;",
											"var product = responseData[0].product;",
											"var prices = responseData[0].prices;",
											"var priceingUnit = responseData[0].pricing_units;",
											"var badge = responseData[0].badges",
											"var specifications = responseData[0].specifications;",
											"",
											"pm.test('taxes should be present', function(){",
											"    pm.expect(responseData[0]).to.have.property('taxes')",
											"})",
											"",
											"pm.test('taxes should not be null', function(){",
											"    pm.expect(taxes).to.not.eql(null)",
											"})",
											"",
											"pm.test('taxes should be of type object', function(){",
											"    pm.expect(taxes).to.be.a(\"object\")",
											"})",
											"",
											"pm.test('fees should be present', function(){",
											"    pm.expect(responseData[0]).to.have.property('fees')",
											"})",
											"",
											"pm.test('fees should not be null', function(){",
											"    pm.expect(fees).to.not.eql(null)",
											"})",
											"",
											"pm.test('fees should be of type object', function(){",
											"    pm.expect(fees).to.be.a(\"object\")",
											"})",
											"",
											"const productSchema = JSON.parse(pm.environment.get('productSchema'));",
											"const priceSchema = JSON.parse(pm.environment.get('priceSchema'));",
											"const pricingUnitsSchema = JSON.parse(pm.environment.get('pricingUnitsSchema'));",
											"const badgeSchema = JSON.parse(pm.environment.get('badgeSchema'));",
											"const specificationSchema = JSON.parse(pm.environment.get('specificationSchema'));",
											"var images = responseData[0].product.image_assets;",
											"const imagesSchema = JSON.parse(pm.environment.get('imagesSchema'));",
											"",
											"images.forEach(function(index){",
											"pm.test('Validated Images in response', function() {",
											"    pm.expect(ajv.validate(imagesSchema, index)).to.be.true;",
											"});",
											"})",
											"",
											"pm.test('Validated Product Object', function() {",
											"    pm.expect(ajv.validate(productSchema, product)).to.be.true;",
											"});",
											"",
											"pm.test('Validated Price Object', function() {",
											"    pm.expect(ajv.validate(priceSchema, prices)).to.be.true;",
											"});",
											"",
											"pm.test('Validated Pricing Unit Object', function() {",
											"    pm.expect(ajv.validate(pricingUnitsSchema, priceingUnit)).to.be.true;",
											"});",
											"",
											"badge.forEach(function(index){",
											"pm.test('Validated Badge Object', function() {",
											"    pm.expect(ajv.validate(badgeSchema, index)).to.be.true;",
											"});",
											"});",
											"",
											"pm.test('Validated specifications Object', function() {",
											"    pm.expect(ajv.validate(specificationSchema, specifications)).to.be.true;",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseURL}}/v1/products?productCodes={{productCode}}&lang={{langEnglish}}&banner=loblaw&bookingDate={{currentDate}}&storeId={{storeId}}&tenantId=JOE_FRESH",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"v1",
										"products"
									],
									"query": [
										{
											"key": "productCodes",
											"value": "{{productCode}}"
										},
										{
											"key": "lang",
											"value": "{{langEnglish}}"
										},
										{
											"key": "banner",
											"value": "loblaw"
										},
										{
											"key": "bookingDate",
											"value": "{{currentDate}}"
										},
										{
											"key": "storeId",
											"value": "{{storeId}}"
										},
										{
											"key": "tenantId",
											"value": "JOE_FRESH"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "GET_Product_Controller_200_specifications_should_be_returned_in_response",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var Ajv = require('ajv'),",
											"    ajv = new Ajv({logger: console,  allErrors: true});",
											"",
											"var responseData = pm.response.json();",
											"var product = responseData[0].product;",
											"var prices = responseData[0].prices;",
											"var priceingUnit = responseData[0].pricing_units;",
											"var badge = responseData[0].badges",
											"var specifications = responseData[0].specifications;",
											"",
											"const productSchema = JSON.parse(pm.environment.get('productSchema'));",
											"const priceSchema = JSON.parse(pm.environment.get('priceSchema'));",
											"const pricingUnitsSchema = JSON.parse(pm.environment.get('pricingUnitsSchema'));",
											"const badgeSchema = JSON.parse(pm.environment.get('badgeSchema'));",
											"const specificationSchema = JSON.parse(pm.environment.get('specificationSchema'));",
											"var images = responseData[0].product.image_assets;",
											"const imagesSchema = JSON.parse(pm.environment.get('imagesSchema'));",
											"",
											"images.forEach(function(index){",
											"pm.test('Validated Images in response', function() {",
											"    pm.expect(ajv.validate(imagesSchema, index)).to.be.true;",
											"});",
											"})",
											"",
											"pm.test('Validated Product Object', function() {",
											"    pm.expect(ajv.validate(productSchema, product)).to.be.true;",
											"});",
											"",
											"pm.test('Validated Price Object', function() {",
											"    pm.expect(ajv.validate(priceSchema, prices)).to.be.true;",
											"});",
											"",
											"pm.test('Validated Pricing Unit Object', function() {",
											"    pm.expect(ajv.validate(pricingUnitsSchema, priceingUnit)).to.be.true;",
											"});",
											"",
											"badge.forEach(function(index){",
											"pm.test('Validated Badge Object', function() {",
											"    pm.expect(ajv.validate(badgeSchema, index)).to.be.true;",
											"});",
											"});",
											"",
											"pm.test('Validated specifications Object', function() {",
											"    pm.expect(ajv.validate(specificationSchema, specifications)).to.be.true;",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseURL}}/v1/products?productCodes={{productCode}}&lang={{langEnglish}}&banner=loblaw&bookingDate={{currentDate}}&storeId={{storeId}}&tenantId=JOE_FRESH",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"v1",
										"products"
									],
									"query": [
										{
											"key": "productCodes",
											"value": "{{productCode}}"
										},
										{
											"key": "lang",
											"value": "{{langEnglish}}"
										},
										{
											"key": "banner",
											"value": "loblaw"
										},
										{
											"key": "bookingDate",
											"value": "{{currentDate}}"
										},
										{
											"key": "storeId",
											"value": "{{storeId}}"
										},
										{
											"key": "tenantId",
											"value": "JOE_FRESH"
										}
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									"const responseSchema = {",
									"  \"type\": \"array\",",
									"  \"items\": [",
									"    {",
									"      \"type\": \"object\",",
									"      \"properties\": {",
									"        \"code\": {",
									"          \"type\": \"string\"",
									"        },",
									"        \"product\": {",
									"          \"type\": \"object\",",
									"          \"properties\": {",
									"            \"image_assets\": {",
									"              \"type\": \"array\",",
									"              \"items\": {}",
									"            },",
									"            \"package_size\": {",
									"              \"type\": \"string\"",
									"            },",
									"            \"average_weight\": {",
									"              \"type\": [\"string\",\"null\"]",
									"            },",
									"            \"article_number\": {",
									"              \"type\": \"string\"",
									"            },",
									"            \"mch_code\": {",
									"              \"type\": \"string\"",
									"            },",
									"            \"uom\": {",
									"              \"type\": \"string\"",
									"            },",
									"            \"upc\": {",
									"              \"type\": \"string\"",
									"            },",
									"            \"aisle\": {",
									"              \"type\": [\"string\",\"null\"]",
									"            },",
									"            \"dietary_callouts\": {",
									"              \"type\": \"object\"",
									"            },",
									"            \"is_variant\": {",
									"              \"type\": \"boolean\"",
									"            },",
									"            \"primary_variant\": {",
									"              \"type\": \"boolean\"",
									"            },",
									"            \"variant_group_id\": {",
									"              \"type\": \"string\"",
									"            },",
									"            \"variant_template\": {",
									"              \"type\": \"array\"",
									"            },",
									"            \"variant_theme\": {",
									"              \"type\": \"object\"",
									"            }",
									"          },",
									"          \"required\": [",
									"          ]",
									"        },",
									"        \"prices\": {",
									"          \"type\": \"object\"",
									"        },",
									"        \"pricing_units\": {",
									"          \"type\": \"object\"",
									"        },",
									"        \"badges\": {",
									"          \"type\": \"array\"",
									"        },",
									"        \"ratings\": {",
									"          \"type\": [\"string\",\"null\"]",
									"        },",
									"        \"promotions\": {",
									"          \"type\": \"array\"",
									"        },",
									"        \"shoppable\": {",
									"          \"type\": \"boolean\"",
									"        },",
									"        \"stock\": {",
									"          \"type\": [\"integer\", \"null\"]",
									"        },",
									"        \"stock_status\": {",
									"          \"type\": [\"string\",\"null\"]",
									"        },",
									"        \"seller_id\": {",
									"          \"type\": [\"string\", \"null\"]",
									"        },",
									"        \"seller_name\": {",
									"          \"type\": [\"string\", \"null\"]",
									"        },",
									"        \"taxes\": {",
									"          \"type\": \"object\"",
									"        },",
									"        \"fees\": {",
									"          \"type\": \"object\"",
									"        },",
									"        \"specifications\": {",
									"          \"type\": \"object\"",
									"        },",
									"        \"custom_specifications\": {",
									"          \"type\": [\"string\", \"null\"]",
									"        },",
									"        \"offer_type\": {",
									"          \"type\": [\"string\", \"null\"]",
									"        },",
									"        \"offer_id\": {",
									"          \"type\": [\"string\", \"null\"]",
									"        },",
									"        \"relative_delivery_quantity\": {",
									"          \"type\": [\"integer\", \"null\"]",
									"        },",
									"        \"fulfillment\": {",
									"          \"type\": [\"object\", \"null\"]",
									"        },",
									"        \"nav_categories\": {",
									"          \"type\": \"array\"",
									"        }",
									"      },",
									"      \"required\": [",
									"        \"code\",",
									"        \"badges\"",
									"      ]",
									"    }",
									"  ]",
									"}",
									"",
									"const productSchema = {",
									"  \"type\": \"object\",",
									"  \"properties\": {",
									"    \"name\": {",
									"      \"type\": \"string\"",
									"    },",
									"    \"description\": {",
									"      \"type\": [\"string\",\"null\"]",
									"    },",
									"    \"brand\": {",
									"      \"type\": \"string\"",
									"    },",
									"    \"link\": {",
									"      \"type\": \"object\",",
									"      \"properties\": {",
									"        \"en\": {",
									"          \"type\": \"string\"",
									"        },",
									"        \"fr\": {",
									"          \"type\": \"string\"",
									"        }",
									"      },",
									"      \"required\": [",
									"      ]",
									"    },",
									"    \"image_assets\": {",
									"      \"type\": \"array\",",
									"      \"items\": [",
									"        {",
									"          \"type\": \"object\",",
									"          \"properties\": {",
									"            \"image_url\": {",
									"              \"type\": [\"string\", \"null\"]",
									"            },",
									"            \"small_url\": {",
									"              \"type\": \"string\"",
									"            },",
									"            \"medium_url\": {",
									"              \"type\": \"string\"",
									"            },",
									"            \"large_url\": {",
									"              \"type\": \"string\"",
									"            },",
									"            \"small_retina_url\": {",
									"              \"type\": \"string\"",
									"            },",
									"            \"medium_retina_url\": {",
									"              \"type\": \"string\"",
									"            },",
									"            \"large_retina_url\": {",
									"              \"type\": \"string\"",
									"            }",
									"          },",
									"          \"required\": [",
									"          ]",
									"        }",
									"      ]",
									"    },",
									"    \"package_size\": {",
									"      \"type\": \"string\"",
									"    },",
									"    \"average_weight\": {",
									"      \"type\": [\"string\",\"null\"]",
									"    },",
									"    \"article_number\": {",
									"      \"type\": \"string\"",
									"    },",
									"    \"mch_code\": {",
									"      \"type\": \"string\"",
									"    },",
									"    \"uom\": {",
									"      \"type\": \"string\"",
									"    },",
									"    \"upc\": {",
									"      \"type\": \"string\"",
									"    },",
									"    \"aisle\": {",
									"      \"type\": [\"string\",\"null\"]",
									"    },",
									"    \"dietary_callouts\": {",
									"      \"type\": \"object\"",
									"    },",
									"    \"is_variant\": {",
									"      \"type\": \"boolean\"",
									"    },",
									"    \"primary_variant\": {",
									"      \"type\": \"boolean\"",
									"    },",
									"    \"variant_group_id\": {",
									"      \"type\": \"string\"",
									"    },",
									"    \"variant_template\": {",
									"      \"type\": \"array\"",
									"    },",
									"    \"variant_theme\": {",
									"      \"type\": \"object\",",
									"      \"properties\": {",
									"        \"color\": {",
									"          \"type\": \"object\",",
									"          \"properties\": {",
									"            \"actual\": {",
									"              \"type\": \"string\"",
									"            },",
									"            \"standard\": {",
									"              \"type\": \"string\"",
									"            },",
									"            \"url\": {",
									"              \"type\": \"string\"",
									"            }",
									"          },",
									"          \"required\": [",
									"          ]",
									"        },",
									"        \"size\": {",
									"          \"type\": \"object\",",
									"          \"properties\": {",
									"            \"actual\": {",
									"              \"type\": \"string\"",
									"            },",
									"            \"standard\": {",
									"              \"type\": \"string\"",
									"            }",
									"          },",
									"          \"required\": [",
									"          ]",
									"        }",
									"      },",
									"      \"required\": [",
									"      ]",
									"    }",
									"  },",
									"  \"required\": [",
									"  ]",
									"}",
									"",
									"const pricingUnitsSchema = {",
									"  \"type\": \"object\",",
									"  \"properties\": {",
									"    \"interval\": {",
									"      \"type\": \"number\"",
									"    },",
									"    \"max_order_quantity\": {",
									"      \"type\": \"number\"",
									"    },",
									"    \"min_order_quantity\": {",
									"      \"type\": \"number\"",
									"    },",
									"    \"type\": {",
									"      \"type\": \"string\"",
									"    },",
									"    \"unit\": {",
									"      \"type\": \"string\"",
									"    },",
									"    \"weighted\": {",
									"      \"type\": \"boolean\"",
									"    }",
									"  },",
									"  \"required\": [",
									"  ]",
									"}",
									"",
									"const ratingSchema = {",
									"\"type\": \"object\",",
									"  \"properties\": {",
									"    \"avg\": {",
									"      \"type\": [\"integer\",\"null\"]",
									"    },",
									"    \"total\": {",
									"      \"type\": [\"integer\",\"null\"]",
									"    }",
									"  },",
									"  \"required\": [",
									"  ]",
									"}",
									"",
									"pm.environment.set('positiveResponseSchema', JSON.stringify(responseSchema));",
									"pm.environment.set('productSchema', JSON.stringify(productSchema));",
									"pm.environment.set('pricingUnitsSchema', JSON.stringify(pricingUnitsSchema));",
									"pm.environment.set('ratingSchema', JSON.stringify(ratingSchema));"
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.test('Status Code | 200 OK', function(){",
									"    pm.response.to.have.status(200)",
									"})",
									"",
									"const schemaToBeValidatedWith = JSON.parse(pm.environment.get('positiveResponseSchema'));",
									"",
									"pm.test(\"Validate Response against Schema\", function(){",
									"    pm.response.to.have.jsonSchema(schemaToBeValidatedWith)",
									"})"
								]
							}
						}
					]
				},
				{
					"name": "Negative Tests",
					"item": [
						{
							"name": "GET_Product_Controller_400_with_productCode_missing",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Status Code | 400 Bad Request', function(){",
											"    pm.response.to.have.status(400)",
											"})",
											"",
											"var responseData = pm.response.json();",
											"",
											"pm.test('Validate error message', function(){",
											"    pm.expect(responseData.message).to.eql(\"400 BAD_REQUEST \\\"Required String parameter 'productCodes' is not present\\\"\")",
											"})",
											"",
											"pm.test('Validate error code in response body', function(){",
											"    pm.expect(responseData.error_code).to.eql(\"400\")",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseURL}}/v1/products?lang={{langEnglish}}&banner=loblaw&bookingDate={{currentDate}}&storeId=1011",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"v1",
										"products"
									],
									"query": [
										{
											"key": "productCodes",
											"value": "{{productCode_first}}",
											"disabled": true
										},
										{
											"key": "lang",
											"value": "{{langEnglish}}"
										},
										{
											"key": "banner",
											"value": "loblaw"
										},
										{
											"key": "bookingDate",
											"value": "{{currentDate}}"
										},
										{
											"key": "storeId",
											"value": "1011"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "GET_Product_Controller_400_with_productCode_empty",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Status Code | 400 Bad Request', function(){",
											"    pm.response.to.have.status(400)",
											"})",
											"",
											"var responseData = pm.response.json();",
											"",
											"pm.test('Validate error message', function(){",
											"    pm.expect(responseData.message).to.eql('getProducts.productCodes: product code must not be blank')",
											"})",
											"",
											"pm.test('Validate error code in response body', function(){",
											"    pm.expect(responseData.error_code).to.eql(\"400\")",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseURL}}/v1/products?productCodes=&lang={{langEnglish}}&banner=loblaw&bookingDate={{currentDate}}&storeId=1011",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"v1",
										"products"
									],
									"query": [
										{
											"key": "productCodes",
											"value": ""
										},
										{
											"key": "lang",
											"value": "{{langEnglish}}"
										},
										{
											"key": "banner",
											"value": "loblaw"
										},
										{
											"key": "bookingDate",
											"value": "{{currentDate}}"
										},
										{
											"key": "storeId",
											"value": "1011"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "GET_Product_Controller_400_with_productCode_made_of_special_characters_only",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Status Code | 400 Bad Request', function(){",
											"    pm.response.to.have.status(400)",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseURL}}/v1/products?productCodes=)(*)(@%23%26()@^&lang={{langEnglish}}&banner=loblaw&bookingDate={{currentDate}}&storeId=1011",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"v1",
										"products"
									],
									"query": [
										{
											"key": "productCodes",
											"value": ")(*)(@%23%26()@^"
										},
										{
											"key": "lang",
											"value": "{{langEnglish}}"
										},
										{
											"key": "banner",
											"value": "loblaw"
										},
										{
											"key": "bookingDate",
											"value": "{{currentDate}}"
										},
										{
											"key": "storeId",
											"value": "1011"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "GET_Product_Controller_400_with_lang_missing",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Status Code | 400 Bad Request', function(){",
											"    pm.response.to.have.status(400)",
											"})",
											"",
											"var responseData = pm.response.json();",
											"",
											"pm.test('Validate error message', function(){",
											"    pm.expect(responseData.message).to.eql('getProducts.lang: language code is required')",
											"})",
											"",
											"pm.test('Validate error code in response body', function(){",
											"    pm.expect(responseData.error_code).to.eql(\"400\")",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseURL}}/v1/products?banner=loblaw&bookingDate={{currentDate}}&storeId=1011&productCodes={{productCode}}",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"v1",
										"products"
									],
									"query": [
										{
											"key": "lang",
											"value": "{{langEnglish}}",
											"disabled": true
										},
										{
											"key": "banner",
											"value": "loblaw"
										},
										{
											"key": "bookingDate",
											"value": "{{currentDate}}"
										},
										{
											"key": "storeId",
											"value": "1011"
										},
										{
											"key": "productCodes",
											"value": "{{productCode}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "GET_Product_Controller_400_with_lang_empty",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Status Code | 400 Bad Request', function(){",
											"    pm.response.to.have.status(400)",
											"})",
											"",
											"var responseData = pm.response.json();",
											"",
											"pm.test('Validate error message', function(){",
											"    pm.expect(pm.response.text()).to.contain('invalid language')",
											"})",
											"",
											"pm.test('Validate error code in response body', function(){",
											"    pm.expect(responseData.error_code).to.eql(\"400\")",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseURL}}/v1/products?productCodes={{productCode}}&lang=&banner=loblaw&bookingDate={{currentDate}}&storeId=1011",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"v1",
										"products"
									],
									"query": [
										{
											"key": "productCodes",
											"value": "{{productCode}}"
										},
										{
											"key": "lang",
											"value": ""
										},
										{
											"key": "banner",
											"value": "loblaw"
										},
										{
											"key": "bookingDate",
											"value": "{{currentDate}}"
										},
										{
											"key": "storeId",
											"value": "1011"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "GET_Product_Controller_400_with_lang_invalid",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Status Code | 400 Bad Request', function(){",
											"    pm.response.to.have.status(400)",
											"})",
											"",
											"var responseData = pm.response.json();",
											"",
											"pm.test('Validate error message', function(){",
											"    pm.expect(responseData.message).to.eql('getProducts.lang: invalid language - en or fr allowed')",
											"})",
											"",
											"pm.test('Validate error code in response body', function(){",
											"    pm.expect(responseData.error_code).to.eql(\"400\")",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseURL}}/v1/products?productCodes={{productCode}}&lang=yt&banner=loblaw&bookingDate={{currentDate}}&storeId=1011",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"v1",
										"products"
									],
									"query": [
										{
											"key": "productCodes",
											"value": "{{productCode}}"
										},
										{
											"key": "lang",
											"value": "yt"
										},
										{
											"key": "banner",
											"value": "loblaw"
										},
										{
											"key": "bookingDate",
											"value": "{{currentDate}}"
										},
										{
											"key": "storeId",
											"value": "1011"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "GET_Product_Controller_400_with_lang_made_of_special_characters_only",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Status Code | 400 Bad Request', function(){",
											"    pm.response.to.have.status(400)",
											"})",
											"",
											"var responseData = pm.response.json();",
											"",
											"pm.test('Validate error message', function(){",
											"    pm.expect(responseData.message).to.eql('getProducts.lang: invalid language - en or fr allowed')",
											"})",
											"",
											"pm.test('Validate error code in response body', function(){",
											"    pm.expect(responseData.error_code).to.eql(\"400\")",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseURL}}/v1/products?productCodes={{productCode}}&lang=()!%23&banner=loblaw&bookingDate={{currentDate}}&storeId=1011",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"v1",
										"products"
									],
									"query": [
										{
											"key": "productCodes",
											"value": "{{productCode}}"
										},
										{
											"key": "lang",
											"value": "()!%23"
										},
										{
											"key": "banner",
											"value": "loblaw"
										},
										{
											"key": "bookingDate",
											"value": "{{currentDate}}"
										},
										{
											"key": "storeId",
											"value": "1011"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "GET_Product_Controller_400_with_banner_missing",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Status Code | 400 Bad Request', function(){",
											"    pm.response.to.have.status(400)",
											"})",
											"",
											"var responseData = pm.response.json();",
											"",
											"pm.test('Validate error message', function(){",
											"    pm.expect(responseData.message).to.eql(\"400 BAD_REQUEST \\\"Required String parameter 'banner' is not present\\\"\")",
											"})",
											"",
											"pm.test('Validate error code in response body', function(){",
											"    pm.expect(responseData.error_code).to.eql(\"400\")",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseURL}}/v1/products?lang={{langEnglish}}&bookingDate={{currentDate}}&storeId=1011&productCodes={{productCode}}",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"v1",
										"products"
									],
									"query": [
										{
											"key": "lang",
											"value": "{{langEnglish}}"
										},
										{
											"key": "banner",
											"value": "loblaw",
											"disabled": true
										},
										{
											"key": "bookingDate",
											"value": "{{currentDate}}"
										},
										{
											"key": "storeId",
											"value": "1011"
										},
										{
											"key": "productCodes",
											"value": "{{productCode}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "GET_Product_Controller_400_with_banner_empty",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Status Code | 400 Bad Request', function(){",
											"    pm.response.to.have.status(400)",
											"})",
											"",
											"var responseData = pm.response.json();",
											"",
											"pm.test('Validate error message', function(){",
											"    pm.expect(responseData.message).to.eql(\"getProducts.banner: Invalid banner value\")",
											"})",
											"",
											"pm.test('Validate error code in response body', function(){",
											"    pm.expect(responseData.error_code).to.eql(\"400\")",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseURL}}/v1/products?productCodes={{productCode}}&lang={{langEnglish}}&banner=&bookingDate={{currentDate}}&storeId=1011",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"v1",
										"products"
									],
									"query": [
										{
											"key": "productCodes",
											"value": "{{productCode}}"
										},
										{
											"key": "lang",
											"value": "{{langEnglish}}"
										},
										{
											"key": "banner",
											"value": ""
										},
										{
											"key": "bookingDate",
											"value": "{{currentDate}}"
										},
										{
											"key": "storeId",
											"value": "1011"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "GET_Product_Controller_400_with_banner_invalid",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Status Code | 400 Bad Request', function(){",
											"    pm.response.to.have.status(400)",
											"})",
											"",
											"var responseData = pm.response.json();",
											"",
											"pm.test('Validate error message', function(){",
											"    pm.expect(responseData.message).to.eql(\"getProducts.banner: Invalid banner value\")",
											"})",
											"",
											"pm.test('Validate error code in response body', function(){",
											"    pm.expect(responseData.error_code).to.eql(\"400\")",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseURL}}/v1/products?productCodes={{productCode}}&lang={{langEnglish}}&banner=abc&bookingDate={{currentDate}}&storeId=1011",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"v1",
										"products"
									],
									"query": [
										{
											"key": "productCodes",
											"value": "{{productCode}}"
										},
										{
											"key": "lang",
											"value": "{{langEnglish}}"
										},
										{
											"key": "banner",
											"value": "abc"
										},
										{
											"key": "bookingDate",
											"value": "{{currentDate}}"
										},
										{
											"key": "storeId",
											"value": "1011"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "GET_Product_Controller_400_with_banner_made_of_special_characters_only",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Status Code | 400 Bad Request', function(){",
											"    pm.response.to.have.status(400)",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseURL}}/v1/products?productCodes={{productCode}}&lang={{langEnglish}}&banner=(*%26@*(%23^&bookingDate={{currentDate}}&storeId=1011",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"v1",
										"products"
									],
									"query": [
										{
											"key": "productCodes",
											"value": "{{productCode}}"
										},
										{
											"key": "lang",
											"value": "{{langEnglish}}"
										},
										{
											"key": "banner",
											"value": "(*%26@*(%23^"
										},
										{
											"key": "bookingDate",
											"value": "{{currentDate}}"
										},
										{
											"key": "storeId",
											"value": "1011"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "GET_Product_Controller_400_with_bookingDate_missing",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Status Code | 400 Bad Request', function(){",
											"    pm.response.to.have.status(400)",
											"})",
											"",
											"var responseData = pm.response.json();",
											"",
											"pm.test('Validate error message', function(){",
											"    pm.expect(responseData.message).to.eql(\"400 BAD_REQUEST \\\"Required String parameter 'bookingDate' is not present\\\"\")",
											"})",
											"",
											"pm.test('Validate error code in response body', function(){",
											"    pm.expect(responseData.error_code).to.eql(\"400\")",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseURL}}/v1/products?lang={{langEnglish}}&banner=loblaw&storeId=1011&productCodes={{productCode}}",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"v1",
										"products"
									],
									"query": [
										{
											"key": "lang",
											"value": "{{langEnglish}}"
										},
										{
											"key": "banner",
											"value": "loblaw"
										},
										{
											"key": "bookingDate",
											"value": "{{currentDate}}",
											"disabled": true
										},
										{
											"key": "storeId",
											"value": "1011"
										},
										{
											"key": "productCodes",
											"value": "{{productCode}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "GET_Product_Controller_400_with_bookingDate_empty",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Status Code | 400 Bad Request', function(){",
											"    pm.response.to.have.status(400)",
											"})",
											"",
											"var responseData = pm.response.json();",
											"",
											"pm.test('Validate error message', function(){",
											"    pm.expect(responseData.message).to.eql(\"getProducts.bookingDate: invalid date format\")",
											"})",
											"",
											"pm.test('Validate error code in response body', function(){",
											"    pm.expect(responseData.error_code).to.eql(\"400\")",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseURL}}/v1/products?productCodes={{productCode}}&lang={{langEnglish}}&banner=loblaw&bookingDate=&storeId=1011",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"v1",
										"products"
									],
									"query": [
										{
											"key": "productCodes",
											"value": "{{productCode}}"
										},
										{
											"key": "lang",
											"value": "{{langEnglish}}"
										},
										{
											"key": "banner",
											"value": "loblaw"
										},
										{
											"key": "bookingDate",
											"value": ""
										},
										{
											"key": "storeId",
											"value": "1011"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "GET_Product_Controller_400_with_bookingDate_invalid_format",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Status Code | 400 Bad Request', function(){",
											"    pm.response.to.have.status(400)",
											"})",
											"",
											"var responseData = pm.response.json();",
											"",
											"pm.test('Validate error message', function(){",
											"    pm.expect(responseData.message).to.eql(\"getProducts.bookingDate: invalid date format\")",
											"})",
											"",
											"pm.test('Validate error code in response body', function(){",
											"    pm.expect(responseData.error_code).to.eql(\"400\")",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseURL}}/v1/products?productCodes={{productCode}}&lang={{langEnglish}}&banner=loblaw&bookingDate=2022-0909&storeId=1011",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"v1",
										"products"
									],
									"query": [
										{
											"key": "productCodes",
											"value": "{{productCode}}"
										},
										{
											"key": "lang",
											"value": "{{langEnglish}}"
										},
										{
											"key": "banner",
											"value": "loblaw"
										},
										{
											"key": "bookingDate",
											"value": "2022-0909"
										},
										{
											"key": "storeId",
											"value": "1011"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "GET_Product_Controller_400_with_storeId_missing",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Status Code | 400 Bad Request', function(){",
											"    pm.response.to.have.status(400)",
											"})",
											"",
											"var responseData = pm.response.json();",
											"",
											"pm.test('Validate error message', function(){",
											"    pm.expect(responseData.message).to.eql(\"400 BAD_REQUEST \\\"Required String parameter 'storeId' is not present\\\"\")",
											"})",
											"",
											"pm.test('Validate error code in response body', function(){",
											"    pm.expect(responseData.error_code).to.eql(\"400\")",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseURL}}/v1/products?lang={{langEnglish}}&banner=loblaw&bookingDate={{currentDate}}&productCodes={{productCode}}",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"v1",
										"products"
									],
									"query": [
										{
											"key": "lang",
											"value": "{{langEnglish}}"
										},
										{
											"key": "banner",
											"value": "loblaw"
										},
										{
											"key": "bookingDate",
											"value": "{{currentDate}}"
										},
										{
											"key": "storeId",
											"value": "1011",
											"disabled": true
										},
										{
											"key": "productCodes",
											"value": "{{productCode}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "GET_Product_Controller_400_with_storeId_empty",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Status Code | 400 Bad Request', function(){",
											"    pm.response.to.have.status(400)",
											"})",
											"",
											"var responseData = pm.response.json();",
											"",
											"pm.test('Validate error message', function(){",
											"    pm.expect(responseData.message).to.eql(\"getProducts.storeId: store id must not be blank\")",
											"})",
											"",
											"pm.test('Validate error code in response body', function(){",
											"    pm.expect(responseData.error_code).to.eql(\"400\")",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseURL}}/v1/products?productCodes={{productCode}}&lang={{langEnglish}}&banner=loblaw&bookingDate={{currentDate}}&storeId=",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"v1",
										"products"
									],
									"query": [
										{
											"key": "productCodes",
											"value": "{{productCode}}"
										},
										{
											"key": "lang",
											"value": "{{langEnglish}}"
										},
										{
											"key": "banner",
											"value": "loblaw"
										},
										{
											"key": "bookingDate",
											"value": "{{currentDate}}"
										},
										{
											"key": "storeId",
											"value": ""
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "GET_Product_Controller_400_with_storeId_made_of_special_charcters_only",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Status Code | 400 Bad Request', function(){",
											"    pm.response.to.have.status(400)",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseURL}}/v1/products?productCodes={{productCode}}&lang={{langEnglish}}&banner=loblaw&bookingDate={{currentDate}}&storeId=%26*%%26^$%26",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"v1",
										"products"
									],
									"query": [
										{
											"key": "productCodes",
											"value": "{{productCode}}"
										},
										{
											"key": "lang",
											"value": "{{langEnglish}}"
										},
										{
											"key": "banner",
											"value": "loblaw"
										},
										{
											"key": "bookingDate",
											"value": "{{currentDate}}"
										},
										{
											"key": "storeId",
											"value": "%26*%%26^$%26"
										}
									]
								}
							},
							"response": []
						}
					]
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					"pm.request.headers.add({key: 'Cookie', value: 'GCP_IAP_UID=112941449560222924969; _gcl_au=1.1.1412478734.1664269984; RES_TRACKINGID=31694094922948; _cc_id=e4e3e47d04e2321001cbdac2d052be98; at_check=true; AMCVS_99911CFE5329657B0A490D45@AdobeOrg=1; aa_mid=39722724232173955331555326561684583663; ResonanceSegment=; cebs=1; _ce.s=v~bf48eec23767f417d7ed06f54e8fe3c3390c07bd~vpv~2; panoramaId_expiry=1665986102043; panoramaId=82ea4b196daf9b7bac8fde59d41f16d53938fdccac031d68d48b2003d1236635; _clck=439hrc|1|f5m|0; s_vnc30=1668105187523&vn=22; AMCV_99911CFE5329657B0A490D45@AdobeOrg=1176715910|MCIDTS|19276|MCMID|39722724232173955331555326561684583663|MCAAMLH-1666117988|12|MCAAMB-1666117988|RKhpRz8krg2tLO6pguXWp5olkAcUniQYPHaMWWgdJ3xzPWQmdj0y|MCOPTOUT-1665520388s|NONE|MCAID|NONE|MCSYNCSOP|411-19283|vVersion|5.4.0|MCCIDH|1605004101; s_cc=true; _gid=GA1.2.1267980728.1665513192; mbox=PC#058dd77a36824d05b0d31554d8c097e7.31_0#1728760096|session#d01183839866438b8bd72dc1dd9446bf#1665517156; s_nr30=1665515296153-Repeat; s_tslv=1665515296156; _ga=GA1.1.455180196.1664269984; _uetsid=2e6d7a60499311ed975a591d1738884d; _uetvid=98b3c3703e4411ed9459c55e8db18b2c; _clsk=1dlggim|1665515301087|4|1|a.clarity.ms/collect; _ga_NZ2KTRKYEG=GS1.1.1665513170.28.1.1665515303.0.0.0; GCP_IAP_XSRF_NONCE_3FuDYeBBuv5JrG3eNbuV1A=1; GCP_IAAP_AUTH_TOKEN_C0F73C13A906FA1C=eyJhbGciOiJSUzI1NiIsImtpZCI6Ijk1NTEwNGEzN2ZhOTAzZWQ4MGM1NzE0NWVjOWU4M2VkYjI5YjBjNDUiLCJ0eXAiOiJKV1QifQ.eyJpc3MiOiJodHRwczovL2FjY291bnRzLmdvb2dsZS5jb20iLCJhenAiOiI3MTEzNzE5MzIwNTItbXRjb2VsaHZyOXNwaXJhdm4ycTVncjFxdGs5bDdxcmsuYXBwcy5nb29nbGV1c2VyY29udGVudC5jb20iLCJhdWQiOiI3MTEzNzE5MzIwNTItbXRjb2VsaHZyOXNwaXJhdm4ycTVncjFxdGs5bDdxcmsuYXBwcy5nb29nbGV1c2VyY29udGVudC5jb20iLCJzdWIiOiIxMTI5NDE0NDk1NjAyMjI5MjQ5NjkiLCJoZCI6ImxvYmxhdy5jYSIsImVtYWlsIjoic3BhcnNoLmJoYXJkd2FqQGxvYmxhdy5jYSIsImVtYWlsX3ZlcmlmaWVkIjp0cnVlLCJhdF9oYXNoIjoic1VGUXhKQmNFeFJ4c2NQbGp4ZmZzQSIsImdvb2dsZSI6eyJnaWMiOiJBTnZidmo4S3dTcHpybkFUbTZNb2xIdUJ6OVkyak0zWlE5QjhLUENhcnpKckJkbjd6cEtvcVVOYlE4ZEJ1V044a1JnVVhKN1pwTWpVSXFkSmhJbVlmVEU0bDA1Uk5ybDZRZnY0UDVUMy1pX0pnN2FBNk1RX1NsV1BTLU9HaVR5WHIxVjVtbnBSaWZFWmlzdlM0NmNHcF9JUmxLN0VhS3VoWGhxRVZOTTV3azRJZU15MWdNQnM2UHZkcWw5aGtVaXJPQmlnbm1JbXpkN3hMVl9tMHZ3V04zUEl1OGlnMWp6TkJpTSJ9LCJpYXQiOjE2NjU1Nzc2NjEsImV4cCI6MTY2NTU4MTI2MX0.YUJ2kBZ30IcmanMjoiHKdobYiadcd7btoCRX6pNQVOhQJaWudklS7vOG0Z4uXHXnwyUY73vN39Onk0wNQetevrFB33r32PNNxJkbp1e_D1aoex-3mpFeMerbo99TuNZIf_DSrqeRuTUR3EcyxkhggntiKIT_uCeMTgAqZBbJqmm2OvIKr3o4OlQX0YJfK8Tg9m_4IN9jX2qM7RqVj_auummS0jhRNBlHIpJNj_tb6-me6sop2ExqcHv4lalYsGSgzShEeTyUnzZs8pDqrpiKpxP_PGbGjcg3gGWiTxRGFnA0_fLpJh1VdnekqCUkpV_R4NL9eBLWvR65R3oh6sCE-Q'})",
					"",
					"",
					"var moment = require('moment');",
					"pm.environment.set('currentDate', moment().format((\"YYYY-MM-DD\")));",
					"",
					"const priceSchema = {",
					"  \"type\": \"object\",",
					"  \"properties\": {",
					"    \"was_price\": {",
					"      \"type\": [\"object\",\"null\"],",
					"      \"properties\": {",
					"        \"value\": {",
					"          \"type\": \"integer\"",
					"        },",
					"        \"unit\": {",
					"          \"type\": [\"string\",\"null\"]",
					"        },",
					"        \"quantity\": {",
					"          \"type\": [\"integer\",\"null\"]",
					"        },",
					"        \"reason_code\": {",
					"          \"type\": [\"integer\",\"null\"]",
					"        },",
					"        \"expiry_date\": {",
					"          \"type\": [\"string\",\"null\"]",
					"        }",
					"      },",
					"      \"required\": [",
					"        \"value\"",
					"      ]",
					"    },",
					"    \"regular_price\": {",
					"      \"type\": [\"object\",\"null\"],",
					"      \"properties\": {",
					"        \"value\": {",
					"          \"type\": \"integer\"",
					"        },",
					"        \"unit\": {",
					"          \"type\": [\"string\",\"null\"]",
					"        },",
					"        \"quantity\": {",
					"          \"type\": [\"integer\",\"null\"]",
					"        },",
					"        \"reason_code\": {",
					"          \"type\": [\"integer\",\"null\"]",
					"        },",
					"        \"expiry_date\": {",
					"          \"type\": [\"string\",\"null\"]",
					"        }",
					"      },",
					"      \"required\": [",
					"      ]",
					"    },",
					"    \"special_price\": {",
					"      \"type\": [\"object\",\"null\"],",
					"      \"properties\": {",
					"        \"value\": {",
					"          \"type\": [\"integer\",\"null\"]",
					"        },",
					"        \"unit\": {",
					"          \"type\": [\"string\",\"null\"]",
					"        },",
					"        \"quantity\": {",
					"          \"type\": [\"integer\",\"null\"]",
					"        },",
					"        \"reason_code\": {",
					"          \"type\": [\"integer\",\"null\"]",
					"        },",
					"        \"expiry_date\": {",
					"          \"type\": [\"string\",\"null\"]",
					"        }",
					"      },",
					"      \"required\": [",
					"        \"value\"",
					"      ]",
					"    },",
					"    \"product_level_unit_price\": {",
					"      \"type\": [\"object\",\"null\"],",
					"      \"properties\": {",
					"        \"value\": {",
					"          \"type\": [\"integer\",\"null\"]",
					"        },",
					"        \"unit\": {",
					"          \"type\": [\"string\",\"null\"]",
					"        },",
					"        \"quantity\": {",
					"          \"type\": [\"integer\",\"null\"]",
					"        },",
					"        \"reason_code\": {",
					"          \"type\": [\"integer\",\"null\"]",
					"        },",
					"        \"expiry_date\": {",
					"          \"type\": [\"string\",\"null\"]",
					"        }",
					"      },",
					"      \"required\": [",
					"      ]",
					"    },",
					"    \"comparison_prices\": {",
					"      \"type\": [\"array\",\"null\"],",
					"      \"items\": [",
					"        {",
					"          \"type\": \"object\",",
					"          \"properties\": {",
					"            \"value\": {",
					"              \"type\": \"integer\"",
					"            },",
					"            \"unit\": {",
					"              \"type\": [\"string\",\"null\"]",
					"            },",
					"            \"quantity\": {",
					"              \"type\": [\"integer\",\"null\"]",
					"            },",
					"            \"reason_code\": {",
					"              \"type\": [\"integer\",\"null\"]",
					"            },",
					"            \"expiry_date\": {",
					"              \"type\": [\"string\",\"null\"]",
					"            }",
					"          },",
					"          \"required\": [",
					"            \"value\"",
					"          ]",
					"        }",
					"      ]",
					"    }",
					"  },",
					"  \"required\": [",
					"  ]",
					"}",
					"",
					"const badgeSchema = {",
					"  \"type\": \"object\",",
					"  \"properties\": {",
					"    \"type\": {",
					"      \"type\": \"string\"",
					"    },",
					"    \"reward_type\": {",
					"      \"type\": [\"string\",\"null\"]",
					"    },",
					"    \"value\": {",
					"      \"type\": [\"string\",\"null\"]",
					"    },",
					"    \"unit\": {",
					"      \"type\": [\"string\",\"null\"]",
					"    },",
					"    \"text\": {",
					"      \"type\": [\"string\",\"null\"]",
					"    },",
					"    \"description\": {",
					"      \"type\": [\"string\",\"null\"]",
					"    },",
					"    \"promo_type\": {",
					"      \"type\": [\"string\",\"null\"]",
					"    },",
					"    \"valid_from\": {",
					"      \"type\": [\"string\",\"null\"]",
					"    },",
					"    \"valid_to\": {",
					"      \"type\": [\"string\",\"null\"]",
					"    },",
					"    \"priority\": {",
					"      \"type\": \"integer\"",
					"    },",
					"    \"priority_group\": {",
					"      \"type\": \"string\"",
					"    }",
					"  },",
					"  \"required\": [",
					"    \"type\",",
					"    \"priority\",",
					"    \"priority_group\"",
					"  ]",
					"}",
					"",
					"const specificationSchema = {",
					"  \"type\": [\"object\",\"null\"],",
					"  \"properties\": {",
					"    \"en\": {",
					"      \"type\": \"object\",",
					"      \"properties\": {",
					"        \"detail_and_care\": {",
					"          \"type\": \"array\"",
					"        },",
					"        \"style_code\": {",
					"          \"type\": \"string\"",
					"        }",
					"      },",
					"      \"required\": [",
					"      ]",
					"    },",
					"    \"fr\": {",
					"      \"type\": \"object\",",
					"      \"properties\": {",
					"        \"detail_and_care\": {",
					"          \"type\": \"array\"",
					"        },",
					"        \"style_code\": {",
					"          \"type\": \"string\"",
					"        }",
					"      },",
					"      \"required\": [",
					"      ]",
					"    }",
					"  },",
					"  \"required\": [",
					"  ]",
					"}",
					"",
					"const imageSchema = {",
					"  \"type\": \"object\",",
					"  \"properties\": {",
					"    \"image_url\": {",
					"      \"type\": [\"string\",\"null\"]",
					"    },",
					"    \"small_url\": {",
					"      \"type\": \"string\"",
					"    },",
					"    \"medium_url\": {",
					"      \"type\": \"string\"",
					"    },",
					"    \"large_url\": {",
					"      \"type\": \"string\"",
					"    },",
					"    \"small_retina_url\": {",
					"      \"type\": \"string\"",
					"    },",
					"    \"medium_retina_url\": {",
					"      \"type\": \"string\"",
					"    },",
					"    \"large_retina_url\": {",
					"      \"type\": \"string\"",
					"    }",
					"  },",
					"  \"required\": [",
					"  ]",
					"}",
					"const pricingUnitSchema = {",
					"  \"type\": \"object\",",
					"  \"properties\": {",
					"    \"interval\": {",
					"      \"type\": \"number\"",
					"    },",
					"    \"max_order_quantity\": {",
					"      \"type\": \"number\"",
					"    },",
					"    \"min_order_quantity\": {",
					"      \"type\": \"number\"",
					"    },",
					"    \"type\": {",
					"      \"type\": \"string\"",
					"    },",
					"    \"unit\": {",
					"      \"type\": \"string\"",
					"    },",
					"    \"weighted\": {",
					"      \"type\": \"boolean\"",
					"    }",
					"  },",
					"  \"required\": [",
					"  ]",
					"}",
					"pm.environment.set('imageResponseSchema', JSON.stringify(imageSchema))",
					"pm.environment.set('priceSchema', JSON.stringify(priceSchema));",
					"pm.environment.set('pricingUnitsSchema', JSON.stringify(pricingUnitSchema));",
					"pm.environment.set('badgeSchema', JSON.stringify(badgeSchema));",
					"pm.environment.set('specificationSchema', JSON.stringify(specificationSchema));",
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "productCode",
			"value": "U2WP028687001_EA"
		}
	]
}