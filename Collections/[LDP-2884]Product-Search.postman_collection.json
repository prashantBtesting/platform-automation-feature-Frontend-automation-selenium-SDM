{
	"info": {
		"_postman_id": "a37becc0-8852-47e0-bf97-5da21200c405",
		"name": "Search",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "19623073"
	},
	"item": [
		{
			"name": "Search",
			"item": [
				{
					"name": "Product Domain (TS-224) [P] - As a user I want to be taken to a SRP for the query I've submitted so that I can view the products that match my query",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status Code | 200 OK', function(){",
									"    pm.response.to.have.status(200)",
									"})",
									"",
									"const schemaToBeValidatedWith = JSON.parse(pm.environment.get('ResponseSchema'));",
									"",
									"pm.test(\"Validate Response against Schema\", function(){",
									"    pm.response.to.have.jsonSchema(schemaToBeValidatedWith)",
									"})",
									"",
									"var responseBody = pm.response.json();",
									"",
									"var Ajv = require('ajv'),",
									"    ajv = new Ajv({logger: console,  allErrors: true});",
									"",
									"var schema = JSON.parse(pm.environment.get('ProductSchema'))",
									"",
									"responseBody.products.forEach(function(index){",
									"pm.test('Validate Product details', function(){",
									"    pm.expect(ajv.validate(schema, index)).to.be.true;",
									"})",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "X-Loblaw-Tenant-ID",
								"value": "JOE_FRESH"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"term\": \"Shirt\",\n    \"lang\": \"en\"\n}"
						},
						"url": {
							"raw": "{{baseURL}}/v1/catalog/search",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"v1",
								"catalog",
								"search"
							]
						}
					},
					"response": []
				},
				{
					"name": "Product Domain (TS-230) [P] - As a user I want to be able to see all the applicable facets on a collections page so that I can filter and sort products",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status Code | 200 OK', function(){",
									"    pm.response.to.have.status(200)",
									"})",
									"",
									"const schemaToBeValidatedWith = JSON.parse(pm.environment.get('ResponseSchema'));",
									"",
									"pm.test(\"Validate Response against Schema\", function(){",
									"    pm.response.to.have.jsonSchema(schemaToBeValidatedWith)",
									"})",
									"",
									"var responseBody = pm.response.json();",
									"",
									"var Ajv = require('ajv'),",
									"    ajv = new Ajv({logger: console,  allErrors: true});",
									"",
									"var schema = JSON.parse(pm.environment.get('ProductSchema'))",
									"",
									"responseBody.products.forEach(function(index){",
									"pm.test('Validate Product details', function(){",
									"    pm.expect(ajv.validate(schema, index)).to.be.true;",
									"})",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "X-Loblaw-Tenant-ID",
								"value": "JOE_FRESH"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"lang\": \"en\",\n    \"includeFacets\": true\n}"
						},
						"url": {
							"raw": "{{baseURL}}/v1/catalog/search",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"v1",
								"catalog",
								"search"
							]
						}
					},
					"response": []
				},
				{
					"name": "Product Domain (TS-234) [P] - As a user I want to see a 0 results page so that I know my search did not result in any findings",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status Code | 200 OK', function(){",
									"    pm.response.to.have.status(200)",
									"})",
									"",
									"const schemaToBeValidatedWith = JSON.parse(pm.environment.get('ResponseSchema'));",
									"",
									"pm.test(\"Validate Response against Schema\", function(){",
									"    pm.response.to.have.jsonSchema(schemaToBeValidatedWith)",
									"})",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "X-Loblaw-Tenant-ID",
								"value": "JOE_FRESH"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"term\": \"CAPS\",\n    \"lang\": \"en\"\n}"
						},
						"url": {
							"raw": "{{baseURL}}/v1/catalog/search",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"v1",
								"catalog",
								"search"
							]
						}
					},
					"response": []
				},
				{
					"name": "Product Domain (TS-241) [P] - As a user I want to be able to filter products so that I can refine my search",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status Code | 200 OK', function(){",
									"    pm.response.to.have.status(200)",
									"})",
									"",
									"const schemaToBeValidatedWith = JSON.parse(pm.environment.get('ResponseSchema'));",
									"",
									"pm.test(\"Validate Response against Schema\", function(){",
									"    pm.response.to.have.jsonSchema(schemaToBeValidatedWith)",
									"})",
									"",
									"var responseBody = pm.response.json();",
									"",
									"var Ajv = require('ajv'),",
									"    ajv = new Ajv({logger: console,  allErrors: true});",
									"",
									"var schema = JSON.parse(pm.environment.get('ProductSchema'))",
									"",
									"responseBody.products.forEach(function(index){",
									"pm.test('Validate Product details', function(){",
									"    pm.expect(ajv.validate(schema, index)).to.be.true;",
									"})",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "X-Loblaw-Tenant-ID",
								"value": "JOE_FRESH"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"term\": \"Shirt\",\n    \"lang\": \"en\",\n    \"includeFacets\" : true,\n    \"filter\" : {\n    \"priceRanges\" : [ \"$20-$30\" ]\n  }\n}"
						},
						"url": {
							"raw": "{{baseURL}}/v1/catalog/search",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"v1",
								"catalog",
								"search"
							]
						}
					},
					"response": []
				},
				{
					"name": "Product Domain (TS-241) [P] - As a user I want to be able to filter products so that I can refine my search",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status Code | 200 OK', function(){",
									"    pm.response.to.have.status(200)",
									"})",
									"",
									"const schemaToBeValidatedWith = JSON.parse(pm.environment.get('ResponseSchema'));",
									"",
									"pm.test(\"Validate Response against Schema\", function(){",
									"    pm.response.to.have.jsonSchema(schemaToBeValidatedWith)",
									"})",
									"",
									"var responseBody = pm.response.json();",
									"",
									"var Ajv = require('ajv'),",
									"    ajv = new Ajv({logger: console,  allErrors: true});",
									"",
									"var schema = JSON.parse(pm.environment.get('ProductSchema'))",
									"",
									"responseBody.products.forEach(function(index){",
									"pm.test('Validate Product details', function(){",
									"    pm.expect(ajv.validate(schema, index)).to.be.true;",
									"})",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "X-Loblaw-Tenant-ID",
								"value": "JOE_FRESH"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"term\": \"Shirt\",\n    \"lang\": \"en\",\n    \"includeFacets\" : true,\n    \"filter\" : {\n    \"categories\" : [ \"56216\" ]\n  }\n}"
						},
						"url": {
							"raw": "{{baseURL}}/v1/catalog/search",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"v1",
								"catalog",
								"search"
							]
						}
					},
					"response": []
				},
				{
					"name": "Product Domain (TS-241) [P] - As a user I want to be able to filter products so that I can refine my search",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status Code | 200 OK', function(){",
									"    pm.response.to.have.status(200)",
									"})",
									"",
									"const schemaToBeValidatedWith = JSON.parse(pm.environment.get('ResponseSchema'));",
									"",
									"pm.test(\"Validate Response against Schema\", function(){",
									"    pm.response.to.have.jsonSchema(schemaToBeValidatedWith)",
									"})",
									"",
									"var responseBody = pm.response.json();",
									"",
									"var Ajv = require('ajv'),",
									"    ajv = new Ajv({logger: console,  allErrors: true});",
									"",
									"var schema = JSON.parse(pm.environment.get('ProductSchema'))",
									"",
									"responseBody.products.forEach(function(index){",
									"pm.test('Validate Product details', function(){",
									"    pm.expect(ajv.validate(schema, index)).to.be.true;",
									"})",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "X-Loblaw-Tenant-ID",
								"value": "JOE_FRESH"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"term\": \"Shirt\",\n    \"lang\": \"en\",\n    \"includeFacets\" : true,\n    \"filter\" : {\n    \"colors\" : [ \"Black\" ]\n  }\n}"
						},
						"url": {
							"raw": "{{baseURL}}/v1/catalog/search",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"v1",
								"catalog",
								"search"
							]
						}
					},
					"response": []
				},
				{
					"name": "Product Domain (TS-241) [P] - As a user I want to be able to filter products so that I can refine my search",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status Code | 200 OK', function(){",
									"    pm.response.to.have.status(200)",
									"})",
									"",
									"const schemaToBeValidatedWith = JSON.parse(pm.environment.get('ResponseSchema'));",
									"",
									"pm.test(\"Validate Response against Schema\", function(){",
									"    pm.response.to.have.jsonSchema(schemaToBeValidatedWith)",
									"})",
									"",
									"var responseBody = pm.response.json();",
									"",
									"var Ajv = require('ajv'),",
									"    ajv = new Ajv({logger: console,  allErrors: true});",
									"",
									"var schema = JSON.parse(pm.environment.get('ProductSchema'))",
									"",
									"responseBody.products.forEach(function(index){",
									"pm.test('Validate Product details', function(){",
									"    pm.expect(ajv.validate(schema, index)).to.be.true;",
									"})",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "X-Loblaw-Tenant-ID",
								"value": "JOE_FRESH"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"term\": \"Shirt\",\n    \"lang\": \"en\",\n    \"includeFacets\" : true,\n    \"filter\" : {\n    \"sizes\" : [ \"S\" ]\n  }\n}"
						},
						"url": {
							"raw": "{{baseURL}}/v1/catalog/search",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"v1",
								"catalog",
								"search"
							]
						}
					},
					"response": []
				},
				{
					"name": "Product Domain (TS-241) [P] - As a user I want to be able to filter products so that I can refine my search",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status Code | 200 OK', function(){",
									"    pm.response.to.have.status(200)",
									"})",
									"",
									"const schemaToBeValidatedWith = JSON.parse(pm.environment.get('ResponseSchema'));",
									"",
									"pm.test(\"Validate Response against Schema\", function(){",
									"    pm.response.to.have.jsonSchema(schemaToBeValidatedWith)",
									"})",
									"",
									"var responseBody = pm.response.json();",
									"",
									"var Ajv = require('ajv'),",
									"    ajv = new Ajv({logger: console,  allErrors: true});",
									"",
									"var schema = JSON.parse(pm.environment.get('ProductSchema'))",
									"",
									"responseBody.products.forEach(function(index){",
									"pm.test('Validate Product details', function(){",
									"    pm.expect(ajv.validate(schema, index)).to.be.true;",
									"})",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "X-Loblaw-Tenant-ID",
								"value": "JOE_FRESH"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"term\": \"Shirt\",\n    \"lang\": \"en\",\n    \"includeFacets\" : true,\n    \"filter\" : {\n    \"itemTypes\" : [ \"Cardigan\" ]\n  }\n}"
						},
						"url": {
							"raw": "{{baseURL}}/v1/catalog/search",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"v1",
								"catalog",
								"search"
							]
						}
					},
					"response": []
				},
				{
					"name": "Product Domain (TS-245) [P] - As a user I want to be able to sort products so that I can refine my search",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status Code | 200 OK', function(){",
									"    pm.response.to.have.status(200)",
									"})",
									"",
									"const schemaToBeValidatedWith = JSON.parse(pm.environment.get('ResponseSchema'));",
									"",
									"pm.test(\"Validate Response against Schema\", function(){",
									"    pm.response.to.have.jsonSchema(schemaToBeValidatedWith)",
									"})",
									"",
									"var responseBody = pm.response.json();",
									"",
									"var Ajv = require('ajv'),",
									"    ajv = new Ajv({logger: console,  allErrors: true});",
									"",
									"var schema = JSON.parse(pm.environment.get('ProductSchema'))",
									"",
									"responseBody.products.forEach(function(index){",
									"pm.test('Validate Product details', function(){",
									"    pm.expect(ajv.validate(schema, index)).to.be.true;",
									"})",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "X-Loblaw-Tenant-ID",
								"value": "JOE_FRESH"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"term\": \"Shirt\",\n    \"lang\": \"en\",\n    \"includeFacets\" : true,\n    \"sort\" : {\n    \"price\" : \"asc\"\n  }\n}"
						},
						"url": {
							"raw": "{{baseURL}}/v1/catalog/search",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"v1",
								"catalog",
								"search"
							]
						}
					},
					"response": []
				},
				{
					"name": "Product Domain (TS-245) [P] - As a user I want to be able to sort products so that I can refine my search Copy 2",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status Code | 200 OK', function(){",
									"    pm.response.to.have.status(200)",
									"})",
									"",
									"const schemaToBeValidatedWith = JSON.parse(pm.environment.get('ResponseSchema'));",
									"",
									"pm.test(\"Validate Response against Schema\", function(){",
									"    pm.response.to.have.jsonSchema(schemaToBeValidatedWith)",
									"})",
									"var responseBody = pm.response.json();",
									"",
									"var Ajv = require('ajv'),",
									"    ajv = new Ajv({logger: console,  allErrors: true});",
									"",
									"var schema = JSON.parse(pm.environment.get('ProductSchema'))",
									"",
									"responseBody.products.forEach(function(index){",
									"pm.test('Validate Product details', function(){",
									"    pm.expect(ajv.validate(schema, index)).to.be.true;",
									"})",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "X-Loblaw-Tenant-ID",
								"value": "JOE_FRESH"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"term\": \"Shirt\",\n    \"lang\": \"en\",\n    \"includeFacets\" : true,\n    \"sort\" : {\n        \"popular\" : \"asc\"\n  }\n}"
						},
						"url": {
							"raw": "{{baseURL}}/v1/catalog/search",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"v1",
								"catalog",
								"search"
							]
						}
					},
					"response": []
				},
				{
					"name": "Product Domain (TS- 1) [N] - One should not able to search product but expect an error to be thrown back by the API when User adds empty string in lang field.",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status Code | 400', function(){",
									"    pm.response.to.have.status(400)",
									"})",
									"",
									"const schemaToBeValidatedWith = JSON.parse(pm.environment.get('ErrorSchema'));",
									"",
									"pm.test(\"Validate Response against Schema\", function(){",
									"    pm.response.to.have.jsonSchema(schemaToBeValidatedWith)",
									"})",
									"",
									"pm.test('Response Assert', function(){",
									"   pm.expect(pm.response.text()).to.include(\"Language provided isn't valid\") ",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "X-Loblaw-Tenant-ID",
								"value": "JOE_FRESH"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"lang\": \"\"\n}"
						},
						"url": {
							"raw": "{{baseURL}}/v1/catalog/search",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"v1",
								"catalog",
								"search"
							]
						}
					},
					"response": []
				},
				{
					"name": "Product Domain (TS- 2) [N] - One should not able to search product but expect an error to be thrown back by the API when User adds invalid value in lang field.",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status Code | 400', function(){",
									"    pm.response.to.have.status(400)",
									"})",
									"",
									"const schemaToBeValidatedWith = JSON.parse(pm.environment.get('ErrorSchema'));",
									"",
									"pm.test(\"Validate Response against Schema\", function(){",
									"    pm.response.to.have.jsonSchema(schemaToBeValidatedWith)",
									"})",
									"",
									"pm.test('Response Assert', function(){",
									"   pm.expect(pm.response.text()).to.include(\"No enum constant com.loblaw.search.constant.Language.PORT\") ",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "X-Loblaw-Tenant-ID",
								"value": "JOE_FRESH"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"lang\": \"Port\"\n}"
						},
						"url": {
							"raw": "{{baseURL}}/v1/catalog/search",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"v1",
								"catalog",
								"search"
							]
						}
					},
					"response": []
				},
				{
					"name": "Product Domain (TS- 3) [P] - One should able to search products when User adds mandatory lang field only. Ex: en, fr.",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status Code | 200 OK', function(){",
									"    pm.response.to.have.status(200)",
									"})",
									"",
									"const schemaToBeValidatedWith = JSON.parse(pm.environment.get('ResponseSchema'));",
									"",
									"pm.test(\"Validate Response against Schema\", function(){",
									"    pm.response.to.have.jsonSchema(schemaToBeValidatedWith)",
									"})",
									"",
									"var responseBody = pm.response.json();",
									"",
									"var Ajv = require('ajv'),",
									"    ajv = new Ajv({logger: console,  allErrors: true});",
									"",
									"var schema = JSON.parse(pm.environment.get('ProductSchema'))",
									"",
									"responseBody.products.forEach(function(index){",
									"pm.test('Validate Product details', function(){",
									"    pm.expect(ajv.validate(schema, index)).to.be.true;",
									"})",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "X-Loblaw-Tenant-ID",
								"value": "JOE_FRESH"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"lang\": \"en\"\n}"
						},
						"url": {
							"raw": "{{baseURL}}/v1/catalog/search",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"v1",
								"catalog",
								"search"
							]
						}
					},
					"response": []
				},
				{
					"name": "Product Domain (TS- 4) [P] - One should able to search products when User adds fr value in lang field only.",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status Code | 200 OK', function(){",
									"    pm.response.to.have.status(200)",
									"})",
									"",
									"const schemaToBeValidatedWith = JSON.parse(pm.environment.get('ResponseSchema'));",
									"",
									"pm.test(\"Validate Response against Schema\", function(){",
									"    pm.response.to.have.jsonSchema(schemaToBeValidatedWith)",
									"})",
									"",
									"var responseBody = pm.response.json();",
									"",
									"var Ajv = require('ajv'),",
									"    ajv = new Ajv({logger: console,  allErrors: true});",
									"",
									"var schema = JSON.parse(pm.environment.get('ProductSchema'))",
									"",
									"responseBody.products.forEach(function(index){",
									"pm.test('Validate Product details', function(){",
									"    pm.expect(ajv.validate(schema, index)).to.be.true;",
									"})",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "X-Loblaw-Tenant-ID",
								"value": "JOE_FRESH"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"lang\": \"fr\",\n    \"includeFacets\": true\n}"
						},
						"url": {
							"raw": "{{baseURL}}/v1/catalog/search",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"v1",
								"catalog",
								"search"
							]
						}
					},
					"response": []
				},
				{
					"name": "Product Domain (TS- 5) [N] - One should not able to search product but expect an error to be thrown back by the API when User adds empty value in Tenant-ID header.",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status Code | 404', function(){",
									"    pm.response.to.have.status(404)",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "X-Loblaw-Tenant-ID",
								"value": ""
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"lang\": \"en\"\n}"
						},
						"url": {
							"raw": "{{baseURL}}/v1/catalog/search",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"v1",
								"catalog",
								"search"
							]
						}
					},
					"response": []
				},
				{
					"name": "Product Domain (TS- 6) [N] - One should not able to search product but expect an error to be thrown back by the API when User adds invalid value Tenant-ID header.",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status Code | 404', function(){",
									"    pm.response.to.have.status(404)",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "X-Loblaw-Tenant-ID",
								"value": "MARKETPLACE"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"lang\": \"en\"\n}"
						},
						"url": {
							"raw": "{{baseURL}}/v1/catalog/search",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"v1",
								"catalog",
								"search"
							]
						}
					},
					"response": []
				},
				{
					"name": "Product Domain (TS- 8) [P] - One should able to search all the products when User adds empty string in term field.",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status Code | 200 OK', function(){",
									"    pm.response.to.have.status(200)",
									"})",
									"",
									"const schemaToBeValidatedWith = JSON.parse(pm.environment.get('ResponseSchema'));",
									"",
									"pm.test(\"Validate Response against Schema\", function(){",
									"    pm.response.to.have.jsonSchema(schemaToBeValidatedWith)",
									"})",
									"",
									"var responseBody = pm.response.json();",
									"",
									"var Ajv = require('ajv'),",
									"    ajv = new Ajv({logger: console,  allErrors: true});",
									"",
									"var schema = JSON.parse(pm.environment.get('ProductSchema'))",
									"",
									"responseBody.products.forEach(function(index){",
									"pm.test('Validate Product details', function(){",
									"    pm.expect(ajv.validate(schema, index)).to.be.true;",
									"})",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "X-Loblaw-Tenant-ID",
								"value": "JOE_FRESH"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"term\": \"\",\n    \"lang\": \"en\"\n}\n"
						},
						"url": {
							"raw": "{{baseURL}}/v1/catalog/search",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"v1",
								"catalog",
								"search"
							]
						}
					},
					"response": []
				},
				{
					"name": "Product Domain (TS- 9) [P] - One should able to search all the products when User adds null value in term field.",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status Code | 200 OK', function(){",
									"    pm.response.to.have.status(200)",
									"})",
									"",
									"const schemaToBeValidatedWith = JSON.parse(pm.environment.get('ResponseSchema'));",
									"",
									"pm.test(\"Validate Response against Schema\", function(){",
									"    pm.response.to.have.jsonSchema(schemaToBeValidatedWith)",
									"})",
									"",
									"var responseBody = pm.response.json();",
									"",
									"var Ajv = require('ajv'),",
									"    ajv = new Ajv({logger: console,  allErrors: true});",
									"",
									"var schema = JSON.parse(pm.environment.get('ProductSchema'))",
									"",
									"responseBody.products.forEach(function(index){",
									"pm.test('Validate Product details', function(){",
									"    pm.expect(ajv.validate(schema, index)).to.be.true;",
									"})",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "X-Loblaw-Tenant-ID",
								"value": "JOE_FRESH"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"term\": null,\n    \"lang\": \"en\"\n}\n"
						},
						"url": {
							"raw": "{{baseURL}}/v1/catalog/search",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"v1",
								"catalog",
								"search"
							]
						}
					},
					"response": []
				},
				{
					"name": "Product Domain (TS- 10) [N] - One should able to search product based on the query when User adds multiple words such that Shirt, JJK in Term field.",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status Code | 200 OK', function(){",
									"    pm.response.to.have.status(200)",
									"})",
									"",
									"const schemaToBeValidatedWith = JSON.parse(pm.environment.get('ResponseSchema'));",
									"",
									"pm.test(\"Validate Response against Schema\", function(){",
									"    pm.response.to.have.jsonSchema(schemaToBeValidatedWith)",
									"})",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "X-Loblaw-Tenant-ID",
								"value": "JOE_FRESH"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"term\": \"Shirt, JJKJ\",\n    \"lang\": \"en\"\n}"
						},
						"url": {
							"raw": "{{baseURL}}/v1/catalog/search",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"v1",
								"catalog",
								"search"
							]
						}
					},
					"response": []
				},
				{
					"name": "Product Domain (TS- 11) [P] - One should able to search all the products based on the query when User adds multiple words such that \"Shirt, Socks\" in Term field.",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status Code | 200 OK', function(){",
									"    pm.response.to.have.status(200)",
									"})",
									"",
									"const schemaToBeValidatedWith = JSON.parse(pm.environment.get('ResponseSchema'));",
									"",
									"pm.test(\"Validate Response against Schema\", function(){",
									"    pm.response.to.have.jsonSchema(schemaToBeValidatedWith)",
									"})",
									"",
									"var responseBody = pm.response.json();",
									"",
									"var Ajv = require('ajv'),",
									"    ajv = new Ajv({logger: console,  allErrors: true});",
									"",
									"var schema = JSON.parse(pm.environment.get('ProductSchema'))",
									"",
									"responseBody.products.forEach(function(index){",
									"pm.test('Validate Product details', function(){",
									"    pm.expect(ajv.validate(schema, index)).to.be.true;",
									"})",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "X-Loblaw-Tenant-ID",
								"value": "JOE_FRESH"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"term\": \"Shirt, Socks\",\n    \"lang\": \"en\"\n}\n"
						},
						"url": {
							"raw": "{{baseURL}}/v1/catalog/search",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"v1",
								"catalog",
								"search"
							]
						}
					},
					"response": []
				},
				{
					"name": "Product Domain (TS- 12) [P] - One should not able to search all the products based on the query but expect an error thrown by the API when User adds multiple words such that \"JOJPJ, NLKNLK\" in Term field.",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status Code | 200 OK', function(){",
									"    pm.response.to.have.status(200)",
									"})",
									"",
									"const schemaToBeValidatedWith = JSON.parse(pm.environment.get('ResponseSchema'));",
									"",
									"pm.test(\"Validate Response against Schema\", function(){",
									"    pm.response.to.have.jsonSchema(schemaToBeValidatedWith)",
									"})",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "X-Loblaw-Tenant-ID",
								"value": "JOE_FRESH"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"term\": \"KJHK, JKLHKL\",\n    \"lang\": \"en\"\n}\n"
						},
						"url": {
							"raw": "{{baseURL}}/v1/catalog/search",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"v1",
								"catalog",
								"search"
							]
						}
					},
					"response": []
				},
				{
					"name": "Product Domain (TS- 13) [P] - One should able to search all the products based on the query when User adds valid value in Term field. Ex: Shirt, Skirt etc.",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status Code | 200 OK', function(){",
									"    pm.response.to.have.status(200)",
									"})",
									"",
									"const schemaToBeValidatedWith = JSON.parse(pm.environment.get('ResponseSchema'));",
									"",
									"pm.test(\"Validate Response against Schema\", function(){",
									"    pm.response.to.have.jsonSchema(schemaToBeValidatedWith)",
									"})",
									"",
									"var responseBody = pm.response.json();",
									"",
									"var Ajv = require('ajv'),",
									"    ajv = new Ajv({logger: console,  allErrors: true});",
									"",
									"var schema = JSON.parse(pm.environment.get('ProductSchema'))",
									"",
									"responseBody.products.forEach(function(index){",
									"pm.test('Validate Product details', function(){",
									"    pm.expect(ajv.validate(schema, index)).to.be.true;",
									"})",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "X-Loblaw-Tenant-ID",
								"value": "JOE_FRESH"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"term\": \"Shirt\",\n    \"lang\": \"en\"\n}\n"
						},
						"url": {
							"raw": "{{baseURL}}/v1/catalog/search",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"v1",
								"catalog",
								"search"
							]
						}
					},
					"response": []
				},
				{
					"name": "Product Domain (TS- 14) [P] - One should not able to search any products when User adds random value in Term field.",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status Code | 200 OK', function(){",
									"    pm.response.to.have.status(200)",
									"})",
									"",
									"const schemaToBeValidatedWith = JSON.parse(pm.environment.get('ResponseSchema'));",
									"",
									"pm.test(\"Validate Response against Schema\", function(){",
									"    pm.response.to.have.jsonSchema(schemaToBeValidatedWith)",
									"})",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "X-Loblaw-Tenant-ID",
								"value": "JOE_FRESH"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"term\": \"CapsXYZ\",\n    \"lang\": \"en\"\n}"
						},
						"url": {
							"raw": "{{baseURL}}/v1/catalog/search",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"v1",
								"catalog",
								"search"
							]
						}
					},
					"response": []
				},
				{
					"name": "Product Domain (TS- 15) [N] - One should not able to search product but expect an error to be thrown back by the API when User adds negative value in Pagination Size field. Ex: -5, -10 etc.",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status Code | 400', function(){",
									"    pm.response.to.have.status(400)",
									"})",
									"",
									"const schemaToBeValidatedWith = JSON.parse(pm.environment.get('ErrorSchema'));",
									"",
									"pm.test(\"Validate Response against Schema\", function(){",
									"    pm.response.to.have.jsonSchema(schemaToBeValidatedWith)",
									"})",
									"",
									"pm.test('Response Assert', function(){",
									"   pm.expect(pm.response.text()).to.include(\"Pagination 'size' and 'from' values must be zero or positive, and the max permissible value of 'size + from' is 10000\") ",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "X-Loblaw-Tenant-ID",
								"value": "JOE_FRESH"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"term\": \"Shirt\",\n    \"lang\": \"en\",\n    \"pagination\": {\n        \"from\": 0,\n        \"size\": -10\n    }}"
						},
						"url": {
							"raw": "{{baseURL}}/v1/catalog/search",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"v1",
								"catalog",
								"search"
							]
						}
					},
					"response": []
				},
				{
					"name": "Product Domain (TS- 16) [P] - One should able to search product based on the query when UsProduct Domain (TS- 16) [N] - One should able to search product based on the query when User adds Valid value in Pagination. Ex: From 0 to size 10.er adds Valid valu",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status Code | 200 OK', function(){",
									"    pm.response.to.have.status(200)",
									"})",
									"",
									"const schemaToBeValidatedWith = JSON.parse(pm.environment.get('ResponseSchema'));",
									"",
									"pm.test(\"Validate Response against Schema\", function(){",
									"    pm.response.to.have.jsonSchema(schemaToBeValidatedWith)",
									"})",
									"var responseBody = pm.response.json();",
									"",
									"var Ajv = require('ajv'),",
									"    ajv = new Ajv({logger: console,  allErrors: true});",
									"",
									"var schema = JSON.parse(pm.environment.get('ProductSchema'))",
									"",
									"responseBody.products.forEach(function(index){",
									"pm.test('Validate Product details', function(){",
									"    pm.expect(ajv.validate(schema, index)).to.be.true;",
									"})",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "X-Loblaw-Tenant-ID",
								"value": "JOE_FRESH"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"term\": \"Shirt\",\n    \"lang\": \"en\",\n    \"pagination\": {\n        \"from\": 0,\n        \"size\": 10\n    }\n}"
						},
						"url": {
							"raw": "{{baseURL}}/v1/catalog/search",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"v1",
								"catalog",
								"search"
							]
						}
					},
					"response": []
				},
				{
					"name": "Product Domain (TS- 17) [N] - One should not able to search product but expect an error to be thrown back by the API when User adds Invalid value in Pagination. Ex: From 5 , size 10000.",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status Code | 400', function(){",
									"    pm.response.to.have.status(400)",
									"})",
									"",
									"const schemaToBeValidatedWith = JSON.parse(pm.environment.get('ErrorSchema'));",
									"",
									"pm.test(\"Validate Response against Schema\", function(){",
									"    pm.response.to.have.jsonSchema(schemaToBeValidatedWith)",
									"})",
									"",
									"pm.test('Response Assert', function(){",
									"   pm.expect(pm.response.text()).to.include(\"Pagination 'size' and 'from' values must be zero or positive, and the max permissible value of 'size + from' is 10000\") ",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "X-Loblaw-Tenant-ID",
								"value": "JOE_FRESH"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"term\": \"Shirt\",\n    \"lang\": \"en\",\n    \"pagination\": {\n        \"from\": 5,\n        \"size\": 10000\n    },\n    \"includeFacets\": true\n}\n"
						},
						"url": {
							"raw": "{{baseURL}}/v1/catalog/search",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"v1",
								"catalog",
								"search"
							]
						}
					},
					"response": []
				},
				{
					"name": "Product Domain (TS- 18) [P] - One should not able to search product when User adds From 50 , size 10 in Pagination as the total search results for this specific search term is way less than 51 and hence the request to return 10 products from the 50th posi",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status Code | 200', function(){",
									"    pm.response.to.have.status(200)",
									"})",
									"",
									"const schemaToBeValidatedWith = JSON.parse(pm.environment.get('ResponseSchema'));",
									"",
									"pm.test(\"Validate Response against Schema\", function(){",
									"    pm.response.to.have.jsonSchema(schemaToBeValidatedWith)",
									"})",
									"",
									"var responseBody = pm.response.json();",
									"",
									"var Ajv = require('ajv'),",
									"    ajv = new Ajv({logger: console,  allErrors: true});",
									"",
									"var schema = JSON.parse(pm.environment.get('ProductSchema'))",
									"",
									"responseBody.products.forEach(function(index){",
									"pm.test('Validate Product details', function(){",
									"    pm.expect(ajv.validate(schema, index)).to.be.true;",
									"})",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "X-Loblaw-Tenant-ID",
								"value": "JOE_FRESH"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"term\": \"Shirt\",\n    \"lang\": \"en\",\n    \"pagination\": {\n        \"from\": 50,\n        \"size\": 10\n    },\n    \"includeFacets\": true\n}\n"
						},
						"url": {
							"raw": "{{baseURL}}/v1/catalog/search",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"v1",
								"catalog",
								"search"
							]
						}
					},
					"response": []
				},
				{
					"name": "Product Domain (TS- 43) [N] - As a User, I want to search the product with negative Pagination. Ex: From: -1, size: 10",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status Code | 400', function(){",
									"    pm.response.to.have.status(400)",
									"})",
									"",
									"const schemaToBeValidatedWith = JSON.parse(pm.environment.get('ErrorSchema'));",
									"",
									"pm.test(\"Validate Response against Schema\", function(){",
									"    pm.response.to.have.jsonSchema(schemaToBeValidatedWith)",
									"})",
									"",
									"pm.test('Response Assert', function(){",
									"   pm.expect(pm.response.text()).to.include(\"Pagination 'size' and 'from' values must be zero or positive, and the max permissible value of 'size + from' is 10000\") ",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "X-Loblaw-Tenant-ID",
								"value": "JOE_FRESH"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"term\": \"Shirt\",\n    \"lang\": \"en\",\n    \"pagination\": {\n        \"from\": -1,\n        \"size\": 10\n    }}"
						},
						"url": {
							"raw": "{{baseURL}}/v1/catalog/search",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"v1",
								"catalog",
								"search"
							]
						}
					},
					"response": []
				},
				{
					"name": "Product Domain (TS- 44) [N] - As a User, I want to search the product with negative from and size Pagination.",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status Code | 400', function(){",
									"    pm.response.to.have.status(400)",
									"})",
									"",
									"const schemaToBeValidatedWith = JSON.parse(pm.environment.get('ErrorSchema'));",
									"",
									"pm.test(\"Validate Response against Schema\", function(){",
									"    pm.response.to.have.jsonSchema(schemaToBeValidatedWith)",
									"})",
									"",
									"pm.test('Response Assert', function(){",
									"   pm.expect(pm.response.text()).to.include(\"Pagination 'size' and 'from' values must be zero or positive, and the max permissible value of 'size + from' is 10000\") ",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "X-Loblaw-Tenant-ID",
								"value": "JOE_FRESH"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"term\": \"Shirt\",\n    \"lang\": \"en\",\n    \"pagination\": {\n        \"from\": -1,\n        \"size\": -10\n    }\n}"
						},
						"url": {
							"raw": "{{baseURL}}/v1/catalog/search",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"v1",
								"catalog",
								"search"
							]
						}
					},
					"response": []
				},
				{
					"name": "Product Domain (TS- 19) [P] - One should able to filter the searched product based on the query when User adds valid value in price range field.",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status Code | 200 OK', function(){",
									"    pm.response.to.have.status(200)",
									"})",
									"",
									"const schemaToBeValidatedWith = JSON.parse(pm.environment.get('ResponseSchema'));",
									"",
									"pm.test(\"Validate Response against Schema\", function(){",
									"    pm.response.to.have.jsonSchema(schemaToBeValidatedWith)",
									"})",
									"",
									"var responseBody = pm.response.json();",
									"",
									"var Ajv = require('ajv'),",
									"    ajv = new Ajv({logger: console,  allErrors: true});",
									"",
									"var schema = JSON.parse(pm.environment.get('ProductSchema'))",
									"",
									"responseBody.products.forEach(function(index){",
									"pm.test('Validate Product details', function(){",
									"    pm.expect(ajv.validate(schema, index)).to.be.true;",
									"})",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "X-Loblaw-Tenant-ID",
								"value": "JOE_FRESH"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"term\" : \"skirt\",\n  \"lang\" : \"en\",\n  \"pagination\" : {\n    \"from\" : 0,\n    \"size\" : 10\n  },\n  \"includeFacets\" : true,\n  \"filter\" : {\n    \"priceRanges\" : [ \"$20-$30\" ]\n  }\n}"
						},
						"url": {
							"raw": "{{baseURL}}/v1/catalog/search",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"v1",
								"catalog",
								"search"
							]
						}
					},
					"response": []
				},
				{
					"name": "Product Domain (TS- 20) [N] - One should not able to filter the searched product based on the query but expect an error thrown by the API when User adds null & empty string in price range field.",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status Code | 200 OK', function(){",
									"    pm.response.to.have.status(200)",
									"})",
									"",
									"const schemaToBeValidatedWith = JSON.parse(pm.environment.get('ResponseSchema'));",
									"",
									"pm.test(\"Validate Response against Schema\", function(){",
									"    pm.response.to.have.jsonSchema(schemaToBeValidatedWith)",
									"})",
									"",
									"var responseBody = pm.response.json();",
									"",
									"var Ajv = require('ajv'),",
									"    ajv = new Ajv({logger: console,  allErrors: true});",
									"",
									"var schema = JSON.parse(pm.environment.get('ProductSchema'))",
									"",
									"responseBody.products.forEach(function(index){",
									"pm.test('Validate Product details', function(){",
									"    pm.expect(ajv.validate(schema, index)).to.be.true;",
									"})",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "X-Loblaw-Tenant-ID",
								"value": "JOE_FRESH"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"term\" : \"skirt\",\n  \"lang\" : \"en\",\n  \"pagination\" : {\n    \"from\" : 0,\n    \"size\" : 10\n  },\n  \"includeFacets\" : true,\n  \"filter\" : {\n    \"priceRanges\" : [ null, \"\" ]\n  }\n}"
						},
						"url": {
							"raw": "{{baseURL}}/v1/catalog/search",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"v1",
								"catalog",
								"search"
							]
						}
					},
					"response": []
				},
				{
					"name": "Product Domain (TS- 21) [N] - One should not able to filter the searched product based on the query but expect an error thrown by the API when User adds random/invalid value in price range field.",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status Code | 200 OK', function(){",
									"    pm.response.to.have.status(200)",
									"})",
									"",
									"const schemaToBeValidatedWith = JSON.parse(pm.environment.get('ResponseSchema'));",
									"",
									"pm.test(\"Validate Response against Schema\", function(){",
									"    pm.response.to.have.jsonSchema(schemaToBeValidatedWith)",
									"})",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "X-Loblaw-Tenant-ID",
								"value": "JOE_FRESH"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"term\" : \"skirt\",\n  \"lang\" : \"en\",\n  \"pagination\" : {\n    \"from\" : 0,\n    \"size\" : 10\n  },\n  \"includeFacets\" : true,\n  \"filter\" : {\n    \"priceRanges\" : [ \"$skflf\" ]\n  }\n}"
						},
						"url": {
							"raw": "{{baseURL}}/v1/catalog/search",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"v1",
								"catalog",
								"search"
							]
						}
					},
					"response": []
				},
				{
					"name": "Product Domain (TS- 22) [P] - One should able to filter the searched product based on the query when user add two valid value in priceRanges filter.",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status Code | 200 OK', function(){",
									"    pm.response.to.have.status(200)",
									"})",
									"",
									"const schemaToBeValidatedWith = JSON.parse(pm.environment.get('ResponseSchema'));",
									"",
									"pm.test(\"Validate Response against Schema\", function(){",
									"    pm.response.to.have.jsonSchema(schemaToBeValidatedWith)",
									"})",
									"",
									"var responseBody = pm.response.json();",
									"",
									"var Ajv = require('ajv'),",
									"    ajv = new Ajv({logger: console,  allErrors: true});",
									"",
									"var schema = JSON.parse(pm.environment.get('ProductSchema'))",
									"",
									"responseBody.products.forEach(function(index){",
									"pm.test('Validate Product details', function(){",
									"    pm.expect(ajv.validate(schema, index)).to.be.true;",
									"})",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "X-Loblaw-Tenant-ID",
								"value": "JOE_FRESH"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"term\" : \"skirt\",\n  \"lang\" : \"en\",\n  \"pagination\" : {\n    \"from\" : 0,\n    \"size\" : 10\n  },\n  \"includeFacets\" : true,\n  \"filter\" : {\n    \"priceRanges\" : [ \"$20-$30\",\"$30-$50\" ]\n  }\n}"
						},
						"url": {
							"raw": "{{baseURL}}/v1/catalog/search",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"v1",
								"catalog",
								"search"
							]
						}
					},
					"response": []
				},
				{
					"name": "Product Domain (TS- 23) [N] - One should not able to filter the searched product based on the query or expect some error from the API when User add two invalid value in priceRanges filter.",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status Code | 200 OK', function(){",
									"    pm.response.to.have.status(200)",
									"})",
									"",
									"const schemaToBeValidatedWith = JSON.parse(pm.environment.get('ResponseSchema'));",
									"",
									"pm.test(\"Validate Response against Schema\", function(){",
									"    pm.response.to.have.jsonSchema(schemaToBeValidatedWith)",
									"})",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "X-Loblaw-Tenant-ID",
								"value": "JOE_FRESH"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"term\" : \"skirt\",\n  \"lang\" : \"en\",\n  \"pagination\" : {\n    \"from\" : 0,\n    \"size\" : 10\n  },\n  \"includeFacets\" : true,\n  \"filter\" : {\n    \"priceRanges\" : [ \"100\",\"$WE10-$PO50\" ]\n  }\n}"
						},
						"url": {
							"raw": "{{baseURL}}/v1/catalog/search",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"v1",
								"catalog",
								"search"
							]
						}
					},
					"response": []
				},
				{
					"name": "Product Domain (TS- 24) [N] - One should not able to filter the searched product based on the query When user add one valid & one invalid value in priceRanges filter.",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status Code | 200 OK', function(){",
									"    pm.response.to.have.status(200)",
									"})",
									"",
									"const schemaToBeValidatedWith = JSON.parse(pm.environment.get('ResponseSchema'));",
									"",
									"pm.test(\"Validate Response against Schema\", function(){",
									"    pm.response.to.have.jsonSchema(schemaToBeValidatedWith)",
									"})",
									"",
									"var responseBody = pm.response.json();",
									"",
									"var Ajv = require('ajv'),",
									"    ajv = new Ajv({logger: console,  allErrors: true});",
									"",
									"var schema = JSON.parse(pm.environment.get('ProductSchema'))",
									"",
									"responseBody.products.forEach(function(index){",
									"pm.test('Validate Product details', function(){",
									"    pm.expect(ajv.validate(schema, index)).to.be.true;",
									"})",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "X-Loblaw-Tenant-ID",
								"value": "JOE_FRESH"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"term\" : \"skirt\",\n  \"lang\" : \"en\",\n  \"pagination\" : {\n    \"from\" : 0,\n    \"size\" : 10\n  },\n  \"includeFacets\" : true,\n  \"filter\" : {\n    \"priceRanges\" : [ \"$20-$30\",\"$WEP10\" ]\n  }\n}"
						},
						"url": {
							"raw": "{{baseURL}}/v1/catalog/search",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"v1",
								"catalog",
								"search"
							]
						}
					},
					"response": []
				},
				{
					"name": "Product Domain (TS- 25) [P] - One should able to sort the searched product based on the query When User adds valid value in price sort field. Ex: asc, desc etc.",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status Code | 200 OK', function(){",
									"    pm.response.to.have.status(200)",
									"})",
									"",
									"const schemaToBeValidatedWith = JSON.parse(pm.environment.get('ResponseSchema'));",
									"",
									"pm.test(\"Validate Response against Schema\", function(){",
									"    pm.response.to.have.jsonSchema(schemaToBeValidatedWith)",
									"})",
									"",
									"var responseBody = pm.response.json();",
									"",
									"var Ajv = require('ajv'),",
									"    ajv = new Ajv({logger: console,  allErrors: true});",
									"",
									"var schema = JSON.parse(pm.environment.get('ProductSchema'))",
									"",
									"responseBody.products.forEach(function(index){",
									"pm.test('Validate Product details', function(){",
									"    pm.expect(ajv.validate(schema, index)).to.be.true;",
									"})",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "X-Loblaw-Tenant-ID",
								"value": "JOE_FRESH"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"term\" : \"skirt\",\n  \"lang\" : \"en\",\n  \"pagination\" : {\n    \"from\" : 0,\n    \"size\" : 10\n  },\n  \"includeFacets\" : true,\n  \"sort\" : {\n    \"price\" : \"asc\"\n  }\n}"
						},
						"url": {
							"raw": "{{baseURL}}/v1/catalog/search",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"v1",
								"catalog",
								"search"
							]
						}
					},
					"response": []
				},
				{
					"name": "Product Domain (TS- 26) [N] - One should not able to sort the searched product or expect an error from the API When User adds invalid value in price sort field. Ex: Ascending, 1234 etc.",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status Code | 400', function(){",
									"    pm.response.to.have.status(400)",
									"})",
									"",
									"const schemaToBeValidatedWith = JSON.parse(pm.environment.get('ErrorSchema'));",
									"",
									"pm.test(\"Validate Response against Schema\", function(){",
									"    pm.response.to.have.jsonSchema(schemaToBeValidatedWith)",
									"})",
									"",
									"pm.test('Response Assert', function(){",
									"   pm.expect(pm.response.text()).to.include('No enum constant com.loblaw.search.constant.Sort.ASCENDING') ",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "X-Loblaw-Tenant-ID",
								"value": "JOE_FRESH"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"term\" : \"skirt\",\n  \"lang\" : \"en\",\n  \"pagination\" : {\n    \"from\" : 0,\n    \"size\" : 10\n  },\n  \"includeFacets\" : true,\n  \"sort\" : {\n    \"price\" : \"ascending\"\n  }\n}"
						},
						"url": {
							"raw": "{{baseURL}}/v1/catalog/search",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"v1",
								"catalog",
								"search"
							]
						}
					},
					"response": []
				},
				{
					"name": "Product Domain (TS- 27) [N] - One should not able to search product but expect an error to be thrown back by the API when User adds different type value in price sort field.Ex: Boolean type value, Int type value.",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status Code | 400', function(){",
									"    pm.response.to.have.status(400)",
									"})",
									"",
									"const schemaToBeValidatedWith = JSON.parse(pm.environment.get('ErrorSchema'));",
									"",
									"pm.test(\"Validate Response against Schema\", function(){",
									"    pm.response.to.have.jsonSchema(schemaToBeValidatedWith)",
									"})",
									"",
									"pm.test('Response Assert', function(){",
									"   pm.expect(pm.response.text()).to.include('Cannot construct instance of `com.loblaw.search.constant.Sort') ",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "X-Loblaw-Tenant-ID",
								"value": "JOE_FRESH"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"term\" : \"skirt\",\n  \"lang\" : \"en\",\n  \"pagination\" : {\n    \"from\" : 0,\n    \"size\" : 10\n  },\n  \"includeFacets\" : true,\n  \"sort\" : {\n    \"price\" : 1234\n  }\n}"
						},
						"url": {
							"raw": "{{baseURL}}/v1/catalog/search",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"v1",
								"catalog",
								"search"
							]
						}
					},
					"response": []
				},
				{
					"name": "Product Domain (TS- 28) [P] - One should not able to apply filter the searched product based on the query when User adds null and empty string value in all filters.",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status Code | 200 OK', function(){",
									"    pm.response.to.have.status(200)",
									"})",
									"",
									"const schemaToBeValidatedWith = JSON.parse(pm.environment.get('ResponseSchema'));",
									"",
									"pm.test(\"Validate Response against Schema\", function(){",
									"    pm.response.to.have.jsonSchema(schemaToBeValidatedWith)",
									"})",
									"",
									"var responseBody = pm.response.json();",
									"",
									"var Ajv = require('ajv'),",
									"    ajv = new Ajv({logger: console,  allErrors: true});",
									"",
									"var schema = JSON.parse(pm.environment.get('ProductSchema'))",
									"",
									"responseBody.products.forEach(function(index){",
									"pm.test('Validate Product details', function(){",
									"    pm.expect(ajv.validate(schema, index)).to.be.true;",
									"})",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "X-Loblaw-Tenant-ID",
								"value": "JOE_FRESH"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"term\" : \"skirt\",\n  \"lang\" : \"en\",\n  \"pagination\" : {\n    \"from\" : 0,\n    \"size\" : 10\n  },\n  \"includeFacets\" : true,\n  \"filter\" : {\n    \"priceRanges\" : [ null, \" \", \"\" ],\n    \"sizes\" : [ null, \" \", \"\" ],\n    \"itemTypes\" : [ null, \" \", \"\" ],\n    \"colors\" : [ null, \" \", \"\" ],\n    \"categories\" : [ null, \" \", \"\" ]\n  }\n}"
						},
						"url": {
							"raw": "{{baseURL}}/v1/catalog/search",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"v1",
								"catalog",
								"search"
							]
						}
					},
					"response": []
				},
				{
					"name": "Product Domain (TS- 29) [P] - As a User, I want to add includefacets field (true, false) so that I can see the total count of products based on facets.",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status Code | 200 OK', function(){",
									"    pm.response.to.have.status(200)",
									"})",
									"",
									"const schemaToBeValidatedWith = JSON.parse(pm.environment.get('ResponseSchema'));",
									"",
									"pm.test(\"Validate Response against Schema\", function(){",
									"    pm.response.to.have.jsonSchema(schemaToBeValidatedWith)",
									"})",
									"",
									"var responseBody = pm.response.json();",
									"",
									"var Ajv = require('ajv'),",
									"    ajv = new Ajv({logger: console,  allErrors: true});",
									"",
									"var schema = JSON.parse(pm.environment.get('ProductSchema'))",
									"",
									"responseBody.products.forEach(function(index){",
									"pm.test('Validate Product details', function(){",
									"    pm.expect(ajv.validate(schema, index)).to.be.true;",
									"})",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "X-Loblaw-Tenant-ID",
								"value": "JOE_FRESH"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"term\" : \"Socks\",\n  \"lang\" : \"en\",\n  \"pagination\" : {\n    \"from\" : 0,\n    \"size\" : 10\n  },\n  \"includeFacets\" : true\n}"
						},
						"url": {
							"raw": "{{baseURL}}/v1/catalog/search",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"v1",
								"catalog",
								"search"
							]
						}
					},
					"response": []
				},
				{
					"name": "Product Domain (TS- 30) [N] - As a User, I want to add includefacets field with different type like int.",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status Code | 400', function(){",
									"    pm.response.to.have.status(400)",
									"})",
									"",
									"const schemaToBeValidatedWith = JSON.parse(pm.environment.get('ErrorSchema'));",
									"",
									"pm.test(\"Validate Response against Schema\", function(){",
									"    pm.response.to.have.jsonSchema(schemaToBeValidatedWith)",
									"})",
									"",
									"pm.test('Response Assert', function(){",
									"   pm.expect(pm.response.text()).to.include('Cannot coerce Integer value (1123) to `boolean` value') ",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "X-Loblaw-Tenant-ID",
								"value": "JOE_FRESH"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"term\" : \"Socks\",\n  \"lang\" : \"en\",\n  \"pagination\" : {\n    \"from\" : 0,\n    \"size\" : 10\n  },\n  \"includeFacets\" : 1123\n}"
						},
						"url": {
							"raw": "{{baseURL}}/v1/catalog/search",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"v1",
								"catalog",
								"search"
							]
						}
					},
					"response": []
				},
				{
					"name": "Product Domain (TS- 31) [N] - As a User, I want to add includefacets field with String type.",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status Code | 400', function(){",
									"    pm.response.to.have.status(400)",
									"})",
									"",
									"const schemaToBeValidatedWith = JSON.parse(pm.environment.get('ErrorSchema'));",
									"",
									"pm.test(\"Validate Response against Schema\", function(){",
									"    pm.response.to.have.jsonSchema(schemaToBeValidatedWith)",
									"})",
									"",
									"pm.test('Response Assert', function(){",
									"   pm.expect(pm.response.text()).to.include('Cannot coerce String value') ",
									"})"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "X-Loblaw-Tenant-ID",
								"value": "JOE_FRESH"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"term\" : \"Socks\",\n  \"lang\" : \"en\",\n  \"pagination\" : {\n    \"from\" : 0,\n    \"size\" : 10\n  },\n  \"includeFacets\" : \"true\"\n}"
						},
						"url": {
							"raw": "{{baseURL}}/v1/catalog/search",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"v1",
								"catalog",
								"search"
							]
						}
					},
					"response": []
				},
				{
					"name": "Product Domain (TS- 32) [N] - As a User, I want to add includefacets field with String type.",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status Code | 400', function(){",
									"    pm.response.to.have.status(400)",
									"})",
									"",
									"const schemaToBeValidatedWith = JSON.parse(pm.environment.get('ErrorSchema'));",
									"",
									"pm.test(\"Validate Response against Schema\", function(){",
									"    pm.response.to.have.jsonSchema(schemaToBeValidatedWith)",
									"})",
									"",
									"",
									"pm.test('Response Assert', function(){",
									"   pm.expect(pm.response.text()).to.include(\"Cannot coerce String value\") ",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "X-Loblaw-Tenant-ID",
								"value": "JOE_FRESH"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"term\" : \"Socks\",\n  \"lang\" : \"en\",\n  \"pagination\" : {\n    \"from\" : 0,\n    \"size\" : 10\n  },\n  \"includeFacets\" : \"efsd\"\n}"
						},
						"url": {
							"raw": "{{baseURL}}/v1/catalog/search",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"v1",
								"catalog",
								"search"
							]
						}
					},
					"response": []
				},
				{
					"name": "Product Domain (TS- 33) [P] - As a User, I want to filter the product by color (valid).",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status Code | 200 OK', function(){",
									"    pm.response.to.have.status(200)",
									"})",
									"",
									"const schemaToBeValidatedWith = JSON.parse(pm.environment.get('ResponseSchema'));",
									"",
									"pm.test(\"Validate Response against Schema\", function(){",
									"    pm.response.to.have.jsonSchema(schemaToBeValidatedWith)",
									"})",
									"",
									"var responseBody = pm.response.json();",
									"",
									"var Ajv = require('ajv'),",
									"    ajv = new Ajv({logger: console,  allErrors: true});",
									"",
									"var schema = JSON.parse(pm.environment.get('ProductSchema'))",
									"",
									"responseBody.products.forEach(function(index){",
									"pm.test('Validate Product details', function(){",
									"    pm.expect(ajv.validate(schema, index)).to.be.true;",
									"})",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "X-Loblaw-Tenant-ID",
								"value": "JOE_FRESH"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"term\" : \"Socks\",\n  \"lang\" : \"en\",\n  \"pagination\" : {\n    \"from\" : 0,\n    \"size\" : 10\n  },\n  \"includeFacets\" : true,\n   \"filter\" : {\n    \"colors\" : [ \"White\" ]\n  }\n}"
						},
						"url": {
							"raw": "{{baseURL}}/v1/catalog/search",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"v1",
								"catalog",
								"search"
							]
						}
					},
					"response": []
				},
				{
					"name": "Product Domain (TS- 34) [N] - As a User, I want to filter the product by color (null) then user can see all the products.",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status Code | 200 OK', function(){",
									"    pm.response.to.have.status(200)",
									"})",
									"",
									"const schemaToBeValidatedWith = JSON.parse(pm.environment.get('ResponseSchema'));",
									"",
									"pm.test(\"Validate Response against Schema\", function(){",
									"    pm.response.to.have.jsonSchema(schemaToBeValidatedWith)",
									"})",
									"",
									"var responseBody = pm.response.json();",
									"",
									"var Ajv = require('ajv'),",
									"    ajv = new Ajv({logger: console,  allErrors: true});",
									"",
									"var schema = JSON.parse(pm.environment.get('ProductSchema'))",
									"",
									"responseBody.products.forEach(function(index){",
									"pm.test('Validate Product details', function(){",
									"    pm.expect(ajv.validate(schema, index)).to.be.true;",
									"})",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "X-Loblaw-Tenant-ID",
								"value": "JOE_FRESH"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"term\" : \"Socks\",\n  \"lang\" : \"en\",\n  \"pagination\" : {\n    \"from\" : 0,\n    \"size\" : 10\n  },\n  \"includeFacets\" : true,\n   \"filter\" : {\n    \"colors\" : [ null ]\n  }\n}"
						},
						"url": {
							"raw": "{{baseURL}}/v1/catalog/search",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"v1",
								"catalog",
								"search"
							]
						}
					},
					"response": []
				},
				{
					"name": "Product Domain (TS- 35) [P] - As a User, I want to filter the product by item filter.",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status Code | 200 OK', function(){",
									"    pm.response.to.have.status(200)",
									"})",
									"",
									"const schemaToBeValidatedWith = JSON.parse(pm.environment.get('ResponseSchema'));",
									"",
									"pm.test(\"Validate Response against Schema\", function(){",
									"    pm.response.to.have.jsonSchema(schemaToBeValidatedWith)",
									"})",
									"",
									"var responseBody = pm.response.json();",
									"",
									"var Ajv = require('ajv'),",
									"    ajv = new Ajv({logger: console,  allErrors: true});",
									"",
									"var schema = JSON.parse(pm.environment.get('ProductSchema'))",
									"",
									"responseBody.products.forEach(function(index){",
									"pm.test('Validate Product details', function(){",
									"    pm.expect(ajv.validate(schema, index)).to.be.true;",
									"})",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "X-Loblaw-Tenant-ID",
								"value": "JOE_FRESH"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"term\" : \"Shirt\",\n  \"lang\" : \"en\",\n  \"pagination\" : {\n    \"from\" : 0,\n    \"size\" : 10\n  },\n  \"includeFacets\" : true,\n     \"filter\" : {\n    \"itemTypes\" : [ \"Tee\" ]\n  }\n}"
						},
						"url": {
							"raw": "{{baseURL}}/v1/catalog/search",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"v1",
								"catalog",
								"search"
							]
						}
					},
					"response": []
				},
				{
					"name": "Product Domain (TS- 36) [N] - As a User, I want to filter the product by item filter with invalid value.",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status Code | 200 OK', function(){",
									"    pm.response.to.have.status(200)",
									"})",
									"",
									"const schemaToBeValidatedWith = JSON.parse(pm.environment.get('ResponseSchema'));",
									"",
									"pm.test(\"Validate Response against Schema\", function(){",
									"    pm.response.to.have.jsonSchema(schemaToBeValidatedWith)",
									"})",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "X-Loblaw-Tenant-ID",
								"value": "JOE_FRESH"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"term\" : \"Shirt\",\n  \"lang\" : \"en\",\n  \"pagination\" : {\n    \"from\" : 0,\n    \"size\" : 10\n  },\n  \"includeFacets\" : true,\n     \"filter\" : {\n    \"itemTypes\" : [ \"dwkncslkd\" ]\n  }\n}"
						},
						"url": {
							"raw": "{{baseURL}}/v1/catalog/search",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"v1",
								"catalog",
								"search"
							]
						}
					},
					"response": []
				},
				{
					"name": "Product Domain (TS- 37) [P] - As a User, I want to filter the product on the basis of sizes.",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status Code | 200 OK', function(){",
									"    pm.response.to.have.status(200)",
									"})",
									"",
									"const schemaToBeValidatedWith = JSON.parse(pm.environment.get('ResponseSchema'));",
									"",
									"pm.test(\"Validate Response against Schema\", function(){",
									"    pm.response.to.have.jsonSchema(schemaToBeValidatedWith)",
									"})",
									"",
									"var responseBody = pm.response.json();",
									"",
									"var Ajv = require('ajv'),",
									"    ajv = new Ajv({logger: console,  allErrors: true});",
									"",
									"var schema = JSON.parse(pm.environment.get('ProductSchema'))",
									"",
									"responseBody.products.forEach(function(index){",
									"pm.test('Validate Product details', function(){",
									"    pm.expect(ajv.validate(schema, index)).to.be.true;",
									"})",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "X-Loblaw-Tenant-ID",
								"value": "JOE_FRESH"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"term\" : \"Shirt\",\n  \"lang\" : \"en\",\n  \"pagination\" : {\n    \"from\" : 0,\n    \"size\" : 10\n  },\n  \"includeFacets\" : true,\n    \"filter\" : {\n    \"sizes\" : [ \"XS\" ]\n  }\n}"
						},
						"url": {
							"raw": "{{baseURL}}/v1/catalog/search",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"v1",
								"catalog",
								"search"
							]
						}
					},
					"response": []
				},
				{
					"name": "Product Domain (TS- 38) [N] - As a User, I want to filter the product on the basis of sizes with invalid value.",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status Code | 200 OK', function(){",
									"    pm.response.to.have.status(200)",
									"})",
									"",
									"const schemaToBeValidatedWith = JSON.parse(pm.environment.get('ResponseSchema'));",
									"",
									"pm.test(\"Validate Response against Schema\", function(){",
									"    pm.response.to.have.jsonSchema(schemaToBeValidatedWith)",
									"})",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "X-Loblaw-Tenant-ID",
								"value": "JOE_FRESH"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"term\" : \"Shirt\",\n  \"lang\" : \"en\",\n  \"pagination\" : {\n    \"from\" : 0,\n    \"size\" : 10\n  },\n  \"includeFacets\" : true,\n    \"filter\" : {\n    \"sizes\" : [ \"12XS\" ]\n  }\n}"
						},
						"url": {
							"raw": "{{baseURL}}/v1/catalog/search",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"v1",
								"catalog",
								"search"
							]
						}
					},
					"response": []
				},
				{
					"name": "Product Domain (TS- 39) [P] - As a User, I want to search the product with Unicode Character in Term field.",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status Code | 200 OK', function(){",
									"    pm.response.to.have.status(200)",
									"})",
									"",
									"const schemaToBeValidatedWith = JSON.parse(pm.environment.get('ResponseSchema'));",
									"",
									"pm.test(\"Validate Response against Schema\", function(){",
									"    pm.response.to.have.jsonSchema(schemaToBeValidatedWith)",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "X-Loblaw-Tenant-ID",
								"value": "JOE_FRESH"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"term\" : \"skirt\\u0000 \",\n  \"lang\" : \"en\",\n  \"pagination\" : {\n    \"from\" : 0,\n    \"size\" : 2\n  },\n  \"includeFacets\" : true\n}"
						},
						"url": {
							"raw": "{{baseURL}}/v1/catalog/search",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"v1",
								"catalog",
								"search"
							]
						}
					},
					"response": []
				},
				{
					"name": "Product Domain (TS- 41) [P] - As a User, I want to filter the product with Categories.",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status Code | 200 OK', function(){",
									"    pm.response.to.have.status(200)",
									"})",
									"",
									"const schemaToBeValidatedWith = JSON.parse(pm.environment.get('ResponseSchema'));",
									"",
									"pm.test(\"Validate Response against Schema\", function(){",
									"    pm.response.to.have.jsonSchema(schemaToBeValidatedWith)",
									"})",
									"",
									"var responseBody = pm.response.json();",
									"",
									"var Ajv = require('ajv'),",
									"    ajv = new Ajv({logger: console,  allErrors: true});",
									"",
									"var schema = JSON.parse(pm.environment.get('ProductSchema'))",
									"",
									"responseBody.products.forEach(function(index){",
									"pm.test('Validate Product details', function(){",
									"    pm.expect(ajv.validate(schema, index)).to.be.true;",
									"})",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "X-Loblaw-Tenant-ID",
								"value": "JOE_FRESH"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"term\" : \"socks\",\n  \"lang\" : \"en\",\n  \"pagination\" : {\n    \"from\" : 0,\n    \"size\" : 2\n  },\n  \"includeFacets\" : true,\n  \"filter\" : {\n    \"categories\" : [ \"56018\" ]\n  }\n}"
						},
						"url": {
							"raw": "{{baseURL}}/v1/catalog/search",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"v1",
								"catalog",
								"search"
							]
						}
					},
					"response": []
				},
				{
					"name": "Product Domain (TS- 42) [P] - As a User, I want to search the product with-special-characters.",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status Code | 200 OK', function(){",
									"    pm.response.to.have.status(200)",
									"})",
									"",
									"const schemaToBeValidatedWith = JSON.parse(pm.environment.get('ResponseSchema'));",
									"",
									"pm.test(\"Validate Response against Schema\", function(){",
									"    pm.response.to.have.jsonSchema(schemaToBeValidatedWith)",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "X-Loblaw-Tenant-ID",
								"value": "JOE_FRESH"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n \"term\" : \"\\\"\\\\skirt// \\\\\\\\\\\\\\\"`~!@#$%^&*()-_+={}[]|:;'<,>.?/\",\n  \"lang\" : \"en\",\n  \"pagination\" : {\n    \"from\" : 0,\n    \"size\" : 2\n  },\n  \"includeFacets\" : true\n}"
						},
						"url": {
							"raw": "{{baseURL}}/v1/catalog/search",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"v1",
								"catalog",
								"search"
							]
						}
					},
					"response": []
				},
				{
					"name": "Product Domain (TS- 45) [N] - One should not able to sort the searched product but expect an error from the API When User adds invalid value in popular sort field. Ex: Ascending etc.",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status Code | 400', function(){",
									"    pm.response.to.have.status(400)",
									"})",
									"",
									"const schemaToBeValidatedWith = JSON.parse(pm.environment.get('ErrorSchema'));",
									"",
									"pm.test(\"Validate Response against Schema\", function(){",
									"    pm.response.to.have.jsonSchema(schemaToBeValidatedWith)",
									"})",
									"",
									"pm.test('Response Assert', function(){",
									"   pm.expect(pm.response.text()).to.include(\"No enum constant com.loblaw.search.constant.Sort.ASCENDING\") ",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "X-Loblaw-Tenant-ID",
								"value": "JOE_FRESH"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"term\" : \"skirt\",\n  \"lang\" : \"en\",\n  \"pagination\" : {\n    \"from\" : 0,\n    \"size\" : 10\n  },\n  \"includeFacets\" : true,\n  \"sort\" : {\n    \"popular\" : \"ascending\"\n  }\n}"
						},
						"url": {
							"raw": "{{baseURL}}/v1/catalog/search",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"v1",
								"catalog",
								"search"
							]
						}
					},
					"response": []
				},
				{
					"name": "Product Domain (TS- 46) [N] - One should not able to sort the searched product but expect an error from the API When User adds int data type value in popular sort field. Ex: 1234 etc.",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status Code | 400', function(){",
									"    pm.response.to.have.status(400)",
									"})",
									"",
									"const schemaToBeValidatedWith = JSON.parse(pm.environment.get('ErrorSchema'));",
									"",
									"pm.test(\"Validate Response against Schema\", function(){",
									"    pm.response.to.have.jsonSchema(schemaToBeValidatedWith)",
									"})",
									"",
									"pm.test('Response Assert', function(){",
									"   pm.expect(pm.response.text()).to.include(\"Cannot construct instance of `com.loblaw.search.constant.Sort`\") ",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "X-Loblaw-Tenant-ID",
								"value": "JOE_FRESH"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"term\" : \"skirt\",\n  \"lang\" : \"en\",\n  \"pagination\" : {\n    \"from\" : 0,\n    \"size\" : 10\n  },\n  \"includeFacets\" : true,\n  \"sort\" : {\n    \"popular\" : 1234\n  }\n}"
						},
						"url": {
							"raw": "{{baseURL}}/v1/catalog/search",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"v1",
								"catalog",
								"search"
							]
						}
					},
					"response": []
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "Listing",
			"item": [
				{
					"name": "Product Domain (TS-245) [P] - As a user I want to be able to sort products so that I can refine my search",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status Code | 200 OK', function(){",
									"    pm.response.to.have.status(200)",
									"})",
									"",
									"const schemaToBeValidatedWith = JSON.parse(pm.environment.get('ResponseSchema'));",
									"",
									"pm.test(\"Validate Response against Schema\", function(){",
									"    pm.response.to.have.jsonSchema(schemaToBeValidatedWith)",
									"})",
									"",
									"var responseBody = pm.response.json();",
									"",
									"var Ajv = require('ajv'),",
									"    ajv = new Ajv({logger: console,  allErrors: true});",
									"",
									"var schema = JSON.parse(pm.environment.get('ProductSchema'))",
									"",
									"responseBody.products.forEach(function(index){",
									"pm.test('Validate Product details', function(){",
									"    pm.expect(ajv.validate(schema, index)).to.be.true;",
									"})",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "X-Loblaw-Tenant-ID",
								"value": "JOE_FRESH"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"categoryId\" : \"56025\",\n  \"lang\" : \"en\",\n  \"pagination\" : {\n    \"from\" : 0,\n    \"size\" : 2\n  },\n  \"includeFacets\" : true,\n  \"sort\" : {\n    \"newest\" : \"desc\"\n  }\n  }"
						},
						"url": {
							"raw": "{{baseURL}}/v1/catalog/listing",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"v1",
								"catalog",
								"listing"
							]
						}
					},
					"response": []
				},
				{
					"name": "Product Domain (TS-245) [P] - As a user I want to be able to sort products so that I can refine my search",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status Code | 200 OK', function(){",
									"    pm.response.to.have.status(200)",
									"})",
									"",
									"const schemaToBeValidatedWith = JSON.parse(pm.environment.get('ResponseSchema'));",
									"",
									"pm.test(\"Validate Response against Schema\", function(){",
									"    pm.response.to.have.jsonSchema(schemaToBeValidatedWith)",
									"})",
									"",
									"var responseBody = pm.response.json();",
									"",
									"var Ajv = require('ajv'),",
									"    ajv = new Ajv({logger: console,  allErrors: true});",
									"",
									"var schema = JSON.parse(pm.environment.get('ProductSchema'))",
									"",
									"responseBody.products.forEach(function(index){",
									"pm.test('Validate Product details', function(){",
									"    pm.expect(ajv.validate(schema, index)).to.be.true;",
									"})",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "X-Loblaw-Tenant-ID",
								"value": "JOE_FRESH"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"categoryId\" : \"56025\",\n  \"lang\" : \"en\",\n  \"pagination\" : {\n    \"from\" : 0,\n    \"size\" : 2\n  },\n  \"includeFacets\" : true,\n  \"sort\" : {\n    \"price\" : \"asc\"\n  }\n  }"
						},
						"url": {
							"raw": "{{baseURL}}/v1/catalog/listing",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"v1",
								"catalog",
								"listing"
							]
						}
					},
					"response": []
				},
				{
					"name": "Product Domain (TS-245) [P] - As a user I want to be able to sort products so that I can refine my search",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status Code | 200 OK', function(){",
									"    pm.response.to.have.status(200)",
									"})",
									"",
									"const schemaToBeValidatedWith = JSON.parse(pm.environment.get('ResponseSchema'));",
									"",
									"pm.test(\"Validate Response against Schema\", function(){",
									"    pm.response.to.have.jsonSchema(schemaToBeValidatedWith)",
									"})",
									"",
									"var responseBody = pm.response.json();",
									"",
									"var Ajv = require('ajv'),",
									"    ajv = new Ajv({logger: console,  allErrors: true});",
									"",
									"var schema = JSON.parse(pm.environment.get('ProductSchema'))",
									"",
									"responseBody.products.forEach(function(index){",
									"pm.test('Validate Product details', function(){",
									"    pm.expect(ajv.validate(schema, index)).to.be.true;",
									"})",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "X-Loblaw-Tenant-ID",
								"value": "JOE_FRESH"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"categoryId\" : \"56025\",\n  \"lang\" : \"en\",\n  \"pagination\" : {\n    \"from\" : 0,\n    \"size\" : 2\n  },\n  \"includeFacets\" : true,\n  \"sort\" : {\n    \"featured\" : \"asc\"\n  }\n  }"
						},
						"url": {
							"raw": "{{baseURL}}/v1/catalog/listing",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"v1",
								"catalog",
								"listing"
							]
						}
					},
					"response": []
				},
				{
					"name": "Product Domain (TS-245) [P] - As a user I want to be able to sort products so that I can refine my search",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status Code | 200 OK', function(){",
									"    pm.response.to.have.status(200)",
									"})",
									"",
									"const schemaToBeValidatedWith = JSON.parse(pm.environment.get('ResponseSchema'));",
									"",
									"pm.test(\"Validate Response against Schema\", function(){",
									"    pm.response.to.have.jsonSchema(schemaToBeValidatedWith)",
									"})",
									"",
									"var responseBody = pm.response.json();",
									"",
									"var Ajv = require('ajv'),",
									"    ajv = new Ajv({logger: console,  allErrors: true});",
									"",
									"var schema = JSON.parse(pm.environment.get('ProductSchema'))",
									"",
									"responseBody.products.forEach(function(index){",
									"pm.test('Validate Product details', function(){",
									"    pm.expect(ajv.validate(schema, index)).to.be.true;",
									"})",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "X-Loblaw-Tenant-ID",
								"value": "JOE_FRESH"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"categoryId\" : \"56025\",\n  \"lang\" : \"en\",\n  \"pagination\" : {\n    \"from\" : 0,\n    \"size\" : 2\n  },\n  \"includeFacets\" : true,\n  \"sort\" : {\n    \"popular\" : \"asc\"\n  }\n  }"
						},
						"url": {
							"raw": "{{baseURL}}/v1/catalog/listing",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"v1",
								"catalog",
								"listing"
							]
						}
					},
					"response": []
				},
				{
					"name": "Product Domain (TS-241) [P] - As a user I want to be able to filter products so that I can refine my search",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status Code | 200 OK', function(){",
									"    pm.response.to.have.status(200)",
									"})",
									"",
									"const schemaToBeValidatedWith = JSON.parse(pm.environment.get('ResponseSchema'));",
									"",
									"pm.test(\"Validate Response against Schema\", function(){",
									"    pm.response.to.have.jsonSchema(schemaToBeValidatedWith)",
									"})",
									"",
									"var responseBody = pm.response.json();",
									"",
									"var Ajv = require('ajv'),",
									"    ajv = new Ajv({logger: console,  allErrors: true});",
									"",
									"var schema = JSON.parse(pm.environment.get('ProductSchema'))",
									"",
									"responseBody.products.forEach(function(index){",
									"pm.test('Validate Product details', function(){",
									"    pm.expect(ajv.validate(schema, index)).to.be.true;",
									"})",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "X-Loblaw-Tenant-ID",
								"value": "JOE_FRESH"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"categoryId\" : \"56018\",\n  \"lang\" : \"en\",\n  \"pagination\" : {\n    \"from\" : 0,\n    \"size\" : 2\n  },\n  \"includeFacets\" : true,\n  \"filter\" : {\n    \"colors\" : [ \"White\" ]\n  }\n}"
						},
						"url": {
							"raw": "{{baseURL}}/v1/catalog/listing",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"v1",
								"catalog",
								"listing"
							]
						}
					},
					"response": []
				},
				{
					"name": "Product Domain (TS-241) [P] - As a user I want to be able to filter products so that I can refine my search",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status Code | 200 OK', function(){",
									"    pm.response.to.have.status(200)",
									"})",
									"",
									"const schemaToBeValidatedWith = JSON.parse(pm.environment.get('ResponseSchema'));",
									"",
									"pm.test(\"Validate Response against Schema\", function(){",
									"    pm.response.to.have.jsonSchema(schemaToBeValidatedWith)",
									"})",
									"",
									"var responseBody = pm.response.json();",
									"",
									"var Ajv = require('ajv'),",
									"    ajv = new Ajv({logger: console,  allErrors: true});",
									"",
									"var schema = JSON.parse(pm.environment.get('ProductSchema'))",
									"",
									"responseBody.products.forEach(function(index){",
									"pm.test('Validate Product details', function(){",
									"    pm.expect(ajv.validate(schema, index)).to.be.true;",
									"})",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "X-Loblaw-Tenant-ID",
								"value": "JOE_FRESH"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"categoryId\" : \"56018\",\n  \"lang\" : \"en\",\n  \"pagination\" : {\n    \"from\" : 0,\n    \"size\" : 2\n  },\n  \"includeFacets\" : true,\n  \"filter\" : {\n    \"sizes\" : [ \"L\" ]\n  }\n}"
						},
						"url": {
							"raw": "{{baseURL}}/v1/catalog/listing",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"v1",
								"catalog",
								"listing"
							]
						}
					},
					"response": []
				},
				{
					"name": "Product Domain (TS-241) [P] - As a user I want to be able to filter products so that I can refine my search",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status Code | 200 OK', function(){",
									"    pm.response.to.have.status(200)",
									"})",
									"",
									"const schemaToBeValidatedWith = JSON.parse(pm.environment.get('ResponseSchema'));",
									"",
									"pm.test(\"Validate Response against Schema\", function(){",
									"    pm.response.to.have.jsonSchema(schemaToBeValidatedWith)",
									"})",
									"",
									"var responseBody = pm.response.json();",
									"",
									"var Ajv = require('ajv'),",
									"    ajv = new Ajv({logger: console,  allErrors: true});",
									"",
									"var schema = JSON.parse(pm.environment.get('ProductSchema'))",
									"",
									"responseBody.products.forEach(function(index){",
									"pm.test('Validate Product details', function(){",
									"    pm.expect(ajv.validate(schema, index)).to.be.true;",
									"})",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "X-Loblaw-Tenant-ID",
								"value": "JOE_FRESH"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"categoryId\" : \"56018\",\n  \"lang\" : \"en\",\n  \"pagination\" : {\n    \"from\" : 0,\n    \"size\" : 2\n  },\n  \"includeFacets\" : true,\n  \"filter\" : {\n    \"itemTypes\" : [ \"Cardigan\" ]\n  }\n}"
						},
						"url": {
							"raw": "{{baseURL}}/v1/catalog/listing",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"v1",
								"catalog",
								"listing"
							]
						}
					},
					"response": []
				},
				{
					"name": "Product Domain (TS-241) [P] - As a user I want to be able to filter products so that I can refine my search",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status Code | 200 OK', function(){",
									"    pm.response.to.have.status(200)",
									"})",
									"",
									"const schemaToBeValidatedWith = JSON.parse(pm.environment.get('ResponseSchema'));",
									"",
									"pm.test(\"Validate Response against Schema\", function(){",
									"    pm.response.to.have.jsonSchema(schemaToBeValidatedWith)",
									"})",
									"",
									"var responseBody = pm.response.json();",
									"",
									"var Ajv = require('ajv'),",
									"    ajv = new Ajv({logger: console,  allErrors: true});",
									"",
									"var schema = JSON.parse(pm.environment.get('ProductSchema'))",
									"",
									"responseBody.products.forEach(function(index){",
									"pm.test('Validate Product details', function(){",
									"    pm.expect(ajv.validate(schema, index)).to.be.true;",
									"})",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "X-Loblaw-Tenant-ID",
								"value": "JOE_FRESH"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"categoryId\" : \"56018\",\n  \"lang\" : \"en\",\n  \"pagination\" : {\n    \"from\" : 0,\n    \"size\" : 2\n  },\n  \"includeFacets\" : true,\n  \"filter\" : {\n    \"priceRanges\" : [ \"$20-$30\" ]\n  }\n}"
						},
						"url": {
							"raw": "{{baseURL}}/v1/catalog/listing",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"v1",
								"catalog",
								"listing"
							]
						}
					},
					"response": []
				},
				{
					"name": "Product Domain (TS-230) [P] - As a user I want to be able to see all the applicable facets on a collections page so that I can filter and sort products",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status Code | 200 OK', function(){",
									"    pm.response.to.have.status(200)",
									"})",
									"",
									"const schemaToBeValidatedWith = JSON.parse(pm.environment.get('ResponseSchema'));",
									"",
									"pm.test(\"Validate Response against Schema\", function(){",
									"    pm.response.to.have.jsonSchema(schemaToBeValidatedWith)",
									"})",
									"",
									"var responseBody = pm.response.json();",
									"",
									"var Ajv = require('ajv'),",
									"    ajv = new Ajv({logger: console,  allErrors: true});",
									"",
									"var schema = JSON.parse(pm.environment.get('ProductSchema'))",
									"",
									"responseBody.products.forEach(function(index){",
									"pm.test('Validate Product details', function(){",
									"    pm.expect(ajv.validate(schema, index)).to.be.true;",
									"})",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "X-Loblaw-Tenant-ID",
								"value": "JOE_FRESH"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"categoryId\" : \"56018\",\n  \"lang\" : \"en\",\n  \"includeFacets\" : true\n}"
						},
						"url": {
							"raw": "{{baseURL}}/v1/catalog/listing",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"v1",
								"catalog",
								"listing"
							]
						}
					},
					"response": []
				},
				{
					"name": "Product Domain (TS-225) [P] - As a user I want to be taken to the CLP/PLP for the category/aisle I've selected from the navigation so that I can find what I'm looking for",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status Code | 200 OK', function(){",
									"    pm.response.to.have.status(200)",
									"})",
									"",
									"const schemaToBeValidatedWith = JSON.parse(pm.environment.get('ResponseSchema'));",
									"",
									"pm.test(\"Validate Response against Schema\", function(){",
									"    pm.response.to.have.jsonSchema(schemaToBeValidatedWith)",
									"})",
									"",
									"var responseBody = pm.response.json();",
									"",
									"var Ajv = require('ajv'),",
									"    ajv = new Ajv({logger: console,  allErrors: true});",
									"",
									"var schema = JSON.parse(pm.environment.get('ProductSchema'))",
									"",
									"responseBody.products.forEach(function(index){",
									"pm.test('Validate Product details', function(){",
									"    pm.expect(ajv.validate(schema, index)).to.be.true;",
									"})",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "X-Loblaw-Tenant-ID",
								"value": "JOE_FRESH"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"categoryId\" : \"56072\",\n  \"lang\" : \"en\"\n}"
						},
						"url": {
							"raw": "{{baseURL}}/v1/catalog/listing",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"v1",
								"catalog",
								"listing"
							]
						}
					},
					"response": []
				},
				{
					"name": "Product Domain (TS- 47) [P] - One should able to see all product When User adds mandatory fields such as Category ID and lang.",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status Code | 200 OK', function(){",
									"    pm.response.to.have.status(200)",
									"})",
									"",
									"const schemaToBeValidatedWith = JSON.parse(pm.environment.get('ResponseSchema'));",
									"",
									"pm.test(\"Validate Response against Schema\", function(){",
									"    pm.response.to.have.jsonSchema(schemaToBeValidatedWith)",
									"})",
									"",
									"var responseBody = pm.response.json();",
									"",
									"var Ajv = require('ajv'),",
									"    ajv = new Ajv({logger: console,  allErrors: true});",
									"",
									"var schema = JSON.parse(pm.environment.get('ProductSchema'))",
									"",
									"responseBody.products.forEach(function(index){",
									"pm.test('Validate Product details', function(){",
									"    pm.expect(ajv.validate(schema, index)).to.be.true;",
									"})",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "X-Loblaw-Tenant-ID",
								"value": "JOE_FRESH"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"categoryId\": \"56043\",\n    \"lang\": \"en\"\n}"
						},
						"url": {
							"raw": "{{baseURL}}/v1/catalog/listing",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"v1",
								"catalog",
								"listing"
							]
						}
					},
					"response": []
				},
				{
					"name": "Product Domain (TS- 48) [N] - As a User, I want to add empty value in lang field.",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status Code | 400', function(){",
									"    pm.response.to.have.status(400)",
									"})",
									"",
									"const schemaToBeValidatedWith = JSON.parse(pm.environment.get('ErrorSchema'));",
									"",
									"pm.test(\"Validate Response against Schema\", function(){",
									"    pm.response.to.have.jsonSchema(schemaToBeValidatedWith)",
									"})",
									"",
									"pm.test('Response Assert', function(){",
									"   pm.expect(pm.response.text()).to.include(\"Language provided isn't valid\") ",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "X-Loblaw-Tenant-ID",
								"value": "JOE_FRESH"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"categoryId\": \"56018\",\n    \"lang\": \"\"\n}"
						},
						"url": {
							"raw": "{{baseURL}}/v1/catalog/listing",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"v1",
								"catalog",
								"listing"
							]
						}
					},
					"response": []
				},
				{
					"name": "Product Domain (TS- 49) [N] - As a User, I want to add invalid value in lang field. Ex: Port or any value.",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status Code | 400', function(){",
									"    pm.response.to.have.status(400)",
									"})",
									"",
									"const schemaToBeValidatedWith = JSON.parse(pm.environment.get('ErrorSchema'));",
									"",
									"pm.test(\"Validate Response against Schema\", function(){",
									"    pm.response.to.have.jsonSchema(schemaToBeValidatedWith)",
									"})",
									"",
									"pm.test('Response Assert', function(){",
									"   pm.expect(pm.response.text()).to.include(\"No enum constant com.loblaw.search.constant.Language.PORT\") ",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "X-Loblaw-Tenant-ID",
								"value": "JOE_FRESH"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"categoryId\": \"56018\",\n    \"lang\": \"Port\"\n}"
						},
						"url": {
							"raw": "{{baseURL}}/v1/catalog/listing",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"v1",
								"catalog",
								"listing"
							]
						}
					},
					"response": []
				},
				{
					"name": "Product Domain (TS- 50) [N] - As a User, I want to add only add Category ID field",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status Code | 400', function(){",
									"    pm.response.to.have.status(400)",
									"})",
									"",
									"const schemaToBeValidatedWith = JSON.parse(pm.environment.get('ErrorSchema'));",
									"",
									"pm.test(\"Validate Response against Schema\", function(){",
									"    pm.response.to.have.jsonSchema(schemaToBeValidatedWith)",
									"})",
									"",
									"pm.test('Response Assert', function(){",
									"   pm.expect(pm.response.text()).to.include('default message [lang]]; default message [must not be null]') ",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "X-Loblaw-Tenant-ID",
								"value": "JOE_FRESH"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"categoryId\": \"56018\"\n}"
						},
						"url": {
							"raw": "{{baseURL}}/v1/catalog/listing",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"v1",
								"catalog",
								"listing"
							]
						}
					},
					"response": []
				},
				{
					"name": "Product Domain (TS- 51) [N] - As a User, I want to add only add lang field.",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status Code | 400', function(){",
									"    pm.response.to.have.status(400)",
									"})",
									"",
									"const schemaToBeValidatedWith = JSON.parse(pm.environment.get('ErrorSchema'));",
									"",
									"pm.test(\"Validate Response against Schema\", function(){",
									"    pm.response.to.have.jsonSchema(schemaToBeValidatedWith)",
									"})",
									"",
									"pm.test('Response Assert', function(){",
									"   pm.expect(pm.response.text()).to.include('default message [categoryId]]; default message [must not be blank]') ",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "X-Loblaw-Tenant-ID",
								"value": "JOE_FRESH"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"lang\": \"en\"\n}"
						},
						"url": {
							"raw": "{{baseURL}}/v1/catalog/listing",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"v1",
								"catalog",
								"listing"
							]
						}
					},
					"response": []
				},
				{
					"name": "Product Domain (TS- 52) [N] - As a User, I want to add empty string in Category ID.",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status Code | 400', function(){",
									"    pm.response.to.have.status(400)",
									"})",
									"",
									"const schemaToBeValidatedWith = JSON.parse(pm.environment.get('ErrorSchema'));",
									"",
									"pm.test(\"Validate Response against Schema\", function(){",
									"    pm.response.to.have.jsonSchema(schemaToBeValidatedWith)",
									"})",
									"",
									"pm.test('Response Assert', function(){",
									"   pm.expect(pm.response.text()).to.include('default message [categoryId]]; default message [must not be blank]') ",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "X-Loblaw-Tenant-ID",
								"value": "JOE_FRESH"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"categoryId\": \"\",\n    \"lang\": \"en\"\n}"
						},
						"url": {
							"raw": "{{baseURL}}/v1/catalog/listing",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"v1",
								"catalog",
								"listing"
							]
						}
					},
					"response": []
				},
				{
					"name": "Product Domain (TS- 53) [N] - As a User, I want to add invalid value in Category ID.",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status Code | 200 OK', function(){",
									"    pm.response.to.have.status(200)",
									"})",
									"",
									"const schemaToBeValidatedWith = JSON.parse(pm.environment.get('ResponseSchema'));",
									"",
									"pm.test(\"Validate Response against Schema\", function(){",
									"    pm.response.to.have.jsonSchema(schemaToBeValidatedWith)",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "X-Loblaw-Tenant-ID",
								"value": "JOE_FRESH"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"categoryId\": \"56018AAA\",\n    \"lang\": \"en\"\n}"
						},
						"url": {
							"raw": "{{baseURL}}/v1/catalog/listing",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"v1",
								"catalog",
								"listing"
							]
						}
					},
					"response": []
				},
				{
					"name": "Product Domain (TS- 55) [N] - As a User, I want to add empty value in Tenant-ID header field.",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status Code | 404', function(){",
									"    pm.response.to.have.status(404)",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "X-Loblaw-Tenant-ID",
								"value": ""
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"categoryId\": \"56043\",\n    \"lang\": \"en\"\n}"
						},
						"url": {
							"raw": "{{baseURL}}/v1/catalog/listing",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"v1",
								"catalog",
								"listing"
							]
						}
					},
					"response": []
				},
				{
					"name": "Product Domain (TS- 56) [N] - As a User, I want to add invalid value in Tenant-ID header field.",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status Code | 404', function(){",
									"    pm.response.to.have.status(404)",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "X-Loblaw-Tenant-ID",
								"value": "MARKETPLACE"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"categoryId\": \"56043\",\n    \"lang\": \"en\"\n}"
						},
						"url": {
							"raw": "{{baseURL}}/v1/catalog/listing",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"v1",
								"catalog",
								"listing"
							]
						}
					},
					"response": []
				},
				{
					"name": "Product Domain (TS- 57) [P] - As a User, I want to add valid value in Tenant-ID (JOE_FRESH) header field.",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status Code | 200 OK', function(){",
									"    pm.response.to.have.status(200)",
									"})",
									"",
									"const schemaToBeValidatedWith = JSON.parse(pm.environment.get('ResponseSchema'));",
									"",
									"pm.test(\"Validate Response against Schema\", function(){",
									"    pm.response.to.have.jsonSchema(schemaToBeValidatedWith)",
									"})",
									"",
									"var responseBody = pm.response.json();",
									"",
									"var Ajv = require('ajv'),",
									"    ajv = new Ajv({logger: console,  allErrors: true});",
									"",
									"var schema = JSON.parse(pm.environment.get('ProductSchema'))",
									"",
									"responseBody.products.forEach(function(index){",
									"pm.test('Validate Product details', function(){",
									"    pm.expect(ajv.validate(schema, index)).to.be.true;",
									"})",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "X-Loblaw-Tenant-ID",
								"value": "JOE_FRESH"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"categoryId\": \"56043\",\n    \"lang\": \"en\"\n}"
						},
						"url": {
							"raw": "{{baseURL}}/v1/catalog/listing",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"v1",
								"catalog",
								"listing"
							]
						}
					},
					"response": []
				},
				{
					"name": "Product Domain (TS- 58) [N] - If user provide int type value in CategoryID then it should provide error.",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status Code | 200 OK', function(){",
									"    pm.response.to.have.status(200)",
									"})",
									"",
									"const schemaToBeValidatedWith = JSON.parse(pm.environment.get('ResponseSchema'));",
									"",
									"pm.test(\"Validate Response against Schema\", function(){",
									"    pm.response.to.have.jsonSchema(schemaToBeValidatedWith)",
									"",
									"})",
									"",
									"var responseBody = pm.response.json();",
									"",
									"var Ajv = require('ajv'),",
									"    ajv = new Ajv({logger: console,  allErrors: true});",
									"",
									"var schema = JSON.parse(pm.environment.get('ProductSchema'))",
									"",
									"responseBody.products.forEach(function(index){",
									"pm.test('Validate Product details', function(){",
									"    pm.expect(ajv.validate(schema, index)).to.be.true;",
									"})",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "X-Loblaw-Tenant-ID",
								"value": "JOE_FRESH"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"categoryId\": 56043,\n    \"lang\": \"en\"\n}"
						},
						"url": {
							"raw": "{{baseURL}}/v1/catalog/listing",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"v1",
								"catalog",
								"listing"
							]
						}
					},
					"response": []
				},
				{
					"name": "Product Domain (TS- 59) [N] - As a User, I want to search the product with negative Pagination.",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status Code | 400', function(){",
									"    pm.response.to.have.status(400)",
									"})",
									"",
									"const schemaToBeValidatedWith = JSON.parse(pm.environment.get('ErrorSchema'));",
									"",
									"pm.test(\"Validate Response against Schema\", function(){",
									"    pm.response.to.have.jsonSchema(schemaToBeValidatedWith)",
									"})",
									"",
									"pm.test('Response Assert', function(){",
									"   pm.expect(pm.response.text()).to.include(\"Pagination 'size' and 'from' values must be zero or positive, and the max permissible value of 'size + from' is 10000\") ",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "X-Loblaw-Tenant-ID",
								"value": "JOE_FRESH"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"categoryId\": \"56043\",\n    \"lang\": \"en\",\n     \"pagination\": {\n        \"from\": -1,\n        \"size\": 10\n    },\n    \"includeFacets\": true\n}"
						},
						"url": {
							"raw": "{{baseURL}}/v1/catalog/listing",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"v1",
								"catalog",
								"listing"
							]
						}
					},
					"response": []
				},
				{
					"name": "Product Domain (TS- 60) [N] - As a User, I want to search the product with negative from and size Pagination",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status Code | 400', function(){",
									"    pm.response.to.have.status(400)",
									"})",
									"",
									"const schemaToBeValidatedWith = JSON.parse(pm.environment.get('ErrorSchema'));",
									"",
									"pm.test(\"Validate Response against Schema\", function(){",
									"    pm.response.to.have.jsonSchema(schemaToBeValidatedWith)",
									"})",
									"",
									"pm.test('Response Assert', function(){",
									"   pm.expect(pm.response.text()).to.include(\"Pagination 'size' and 'from' values must be zero or positive, and the max permissible value of 'size + from' is 10000\") ",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "X-Loblaw-Tenant-ID",
								"value": "JOE_FRESH"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"categoryId\": \"56043\",\n    \"lang\": \"en\",\n     \"pagination\": {\n        \"from\": -1,\n        \"size\": -10\n    },\n    \"includeFacets\": true\n}"
						},
						"url": {
							"raw": "{{baseURL}}/v1/catalog/listing",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"v1",
								"catalog",
								"listing"
							]
						}
					},
					"response": []
				},
				{
					"name": "Product Domain (TS- 61) [N] - As a User, I want to add negative value in Pagination Size (-10 etc) then it will show some error.",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status Code | 400', function(){",
									"    pm.response.to.have.status(400)",
									"})",
									"",
									"const schemaToBeValidatedWith = JSON.parse(pm.environment.get('ErrorSchema'));",
									"",
									"pm.test(\"Validate Response against Schema\", function(){",
									"    pm.response.to.have.jsonSchema(schemaToBeValidatedWith)",
									"})",
									"",
									"pm.test('Response Assert', function(){",
									"   pm.expect(pm.response.text()).to.include(\"Pagination 'size' and 'from' values must be zero or positive, and the max permissible value of 'size + from' is 10000\") ",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "X-Loblaw-Tenant-ID",
								"value": "JOE_FRESH"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"categoryId\": \"56043\",\n    \"lang\": \"en\",\n     \"pagination\": {\n        \"from\": 0,\n        \"size\": -10\n    },\n    \"includeFacets\": true\n}"
						},
						"url": {
							"raw": "{{baseURL}}/v1/catalog/listing",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"v1",
								"catalog",
								"listing"
							]
						}
					},
					"response": []
				},
				{
					"name": "Product Domain (TS- 62) [P] - As a User, I want to add Valid value in Pagination like from 0 to size 10.",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status Code | 200 OK', function(){",
									"    pm.response.to.have.status(200)",
									"})",
									"",
									"const schemaToBeValidatedWith = JSON.parse(pm.environment.get('ResponseSchema'));",
									"",
									"pm.test(\"Validate Response against Schema\", function(){",
									"    pm.response.to.have.jsonSchema(schemaToBeValidatedWith)",
									"})",
									"",
									"var responseBody = pm.response.json();",
									"",
									"var Ajv = require('ajv'),",
									"    ajv = new Ajv({logger: console,  allErrors: true});",
									"",
									"var schema = JSON.parse(pm.environment.get('ProductSchema'))",
									"",
									"responseBody.products.forEach(function(index){",
									"pm.test('Validate Product details', function(){",
									"    pm.expect(ajv.validate(schema, index)).to.be.true;",
									"})",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "X-Loblaw-Tenant-ID",
								"value": "JOE_FRESH"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"categoryId\": \"56043\",\n    \"lang\": \"en\",\n     \"pagination\": {\n        \"from\": 0,\n        \"size\": 10\n    }\n}"
						},
						"url": {
							"raw": "{{baseURL}}/v1/catalog/listing",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"v1",
								"catalog",
								"listing"
							]
						}
					},
					"response": []
				},
				{
					"name": "Product Domain (TS- 63) [N] - As a User, I want to add Invalid value in Pagination like from 5 , size 10000.",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status Code | 400', function(){",
									"    pm.response.to.have.status(400)",
									"})",
									"",
									"const schemaToBeValidatedWith = JSON.parse(pm.environment.get('ErrorSchema'));",
									"",
									"pm.test(\"Validate Response against Schema\", function(){",
									"    pm.response.to.have.jsonSchema(schemaToBeValidatedWith)",
									"})",
									"",
									"pm.test('Response Assert', function(){",
									"   pm.expect(pm.response.text()).to.include(\"Pagination 'size' and 'from' values must be zero or positive, and the max permissible value of 'size + from' is 10000\") ",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "X-Loblaw-Tenant-ID",
								"value": "JOE_FRESH"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"categoryId\": \"56043\",\n    \"lang\": \"en\",\n     \"pagination\": {\n        \"from\": 3,\n        \"size\": 10000\n    },\n    \"includeFacets\": true\n}"
						},
						"url": {
							"raw": "{{baseURL}}/v1/catalog/listing",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"v1",
								"catalog",
								"listing"
							]
						}
					},
					"response": []
				},
				{
					"name": "Product Domain (TS- 64) [P] - One should not able to search product when User adds From 50 , size 10 in Pagination as the total search results for this specific search term is way less than 51 and hence the request to return 10 products from the 50th posi",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status Code | 200', function(){",
									"    pm.response.to.have.status(200)",
									"})",
									"",
									"const schemaToBeValidatedWith = JSON.parse(pm.environment.get('ResponseSchema'));",
									"",
									"pm.test(\"Validate Response against Schema\", function(){",
									"    pm.response.to.have.jsonSchema(schemaToBeValidatedWith)",
									"})",
									"",
									"var responseBody = pm.response.json();",
									"",
									"var Ajv = require('ajv'),",
									"    ajv = new Ajv({logger: console,  allErrors: true});",
									"",
									"var schema = JSON.parse(pm.environment.get('ProductSchema'))",
									"",
									"responseBody.products.forEach(function(index){",
									"pm.test('Validate Product details', function(){",
									"    pm.expect(ajv.validate(schema, index)).to.be.true;",
									"})",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "X-Loblaw-Tenant-ID",
								"value": "JOE_FRESH"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"categoryId\": \"56018\",\n    \"lang\": \"en\",\n     \"pagination\": {\n        \"from\": 50,\n        \"size\": 10\n    }\n}"
						},
						"url": {
							"raw": "{{baseURL}}/v1/catalog/listing",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"v1",
								"catalog",
								"listing"
							]
						}
					},
					"response": []
				},
				{
					"name": "Product Domain (TS- 65) [P] - As a User, I want to add includefacets field (true, false) so that I can see the total count of products based on facets.",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status Code | 200 OK', function(){",
									"    pm.response.to.have.status(200)",
									"})",
									"",
									"const schemaToBeValidatedWith = JSON.parse(pm.environment.get('ResponseSchema'));",
									"",
									"pm.test(\"Validate Response against Schema\", function(){",
									"    pm.response.to.have.jsonSchema(schemaToBeValidatedWith)",
									"})",
									"",
									"var responseBody = pm.response.json();",
									"",
									"var Ajv = require('ajv'),",
									"    ajv = new Ajv({logger: console,  allErrors: true});",
									"",
									"var schema = JSON.parse(pm.environment.get('ProductSchema'))",
									"",
									"responseBody.products.forEach(function(index){",
									"pm.test('Validate Product details', function(){",
									"    pm.expect(ajv.validate(schema, index)).to.be.true;",
									"})",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "X-Loblaw-Tenant-ID",
								"value": "JOE_FRESH"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"categoryId\": \"56043\",\n    \"lang\": \"en\",\n     \"pagination\": {\n        \"from\": 0,\n        \"size\": 10\n    },\n    \"includeFacets\": true\n}"
						},
						"url": {
							"raw": "{{baseURL}}/v1/catalog/listing",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"v1",
								"catalog",
								"listing"
							]
						}
					},
					"response": []
				},
				{
					"name": "Product Domain (TS- 66) [N] - As a User, I want to add includefacets field with different type like int.",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status Code | 400', function(){",
									"    pm.response.to.have.status(400)",
									"})",
									"",
									"const schemaToBeValidatedWith = JSON.parse(pm.environment.get('ErrorSchema'));",
									"",
									"pm.test(\"Validate Response against Schema\", function(){",
									"    pm.response.to.have.jsonSchema(schemaToBeValidatedWith)",
									"})",
									"",
									"pm.test('Response Assert', function(){",
									"   pm.expect(pm.response.text()).to.include('Cannot coerce Integer value (1234) to `boolean` value') ",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "X-Loblaw-Tenant-ID",
								"value": "JOE_FRESH"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"categoryId\": \"56043\",\n    \"lang\": \"en\",\n     \"pagination\": {\n        \"from\": 0,\n        \"size\": 10\n    },\n    \"includeFacets\": 1234\n}"
						},
						"url": {
							"raw": "{{baseURL}}/v1/catalog/listing",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"v1",
								"catalog",
								"listing"
							]
						}
					},
					"response": []
				},
				{
					"name": "Product Domain (TS- 67) [N] - As a User, I want to add includefacets field with different type like string.",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status Code | 400', function(){",
									"    pm.response.to.have.status(400)",
									"})",
									"",
									"const schemaToBeValidatedWith = JSON.parse(pm.environment.get('ErrorSchema'));",
									"",
									"pm.test(\"Validate Response against Schema\", function(){",
									"    pm.response.to.have.jsonSchema(schemaToBeValidatedWith)",
									"})",
									"",
									"pm.test('Response Assert', function(){",
									"   pm.expect(pm.response.text()).to.include('Cannot coerce String value') ",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "X-Loblaw-Tenant-ID",
								"value": "JOE_FRESH"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"categoryId\": \"56043\",\n    \"lang\": \"en\",\n     \"pagination\": {\n        \"from\": 0,\n        \"size\": 10\n    },\n    \"includeFacets\": \"true\"\n}"
						},
						"url": {
							"raw": "{{baseURL}}/v1/catalog/listing",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"v1",
								"catalog",
								"listing"
							]
						}
					},
					"response": []
				},
				{
					"name": "Product Domain (TS- 68) [N] - As a User, I want to add includefacets field with different type like string.",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status Code | 400', function(){",
									"    pm.response.to.have.status(400)",
									"})",
									"",
									"const schemaToBeValidatedWith = JSON.parse(pm.environment.get('ErrorSchema'));",
									"",
									"pm.test(\"Validate Response against Schema\", function(){",
									"    pm.response.to.have.jsonSchema(schemaToBeValidatedWith)",
									"})",
									"",
									"pm.test('Response Assert', function(){",
									"   pm.expect(pm.response.text()).to.include('Cannot coerce String value') ",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "X-Loblaw-Tenant-ID",
								"value": "JOE_FRESH"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"categoryId\": \"56043\",\n    \"lang\": \"en\",\n     \"pagination\": {\n        \"from\": 0,\n        \"size\": 10\n    },\n    \"includeFacets\": \"JHJKHwkhfdk\"\n}"
						},
						"url": {
							"raw": "{{baseURL}}/v1/catalog/listing",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"v1",
								"catalog",
								"listing"
							]
						}
					},
					"response": []
				},
				{
					"name": "Product Domain (TS- 69) [P] - As a User, I want to filter the list of product based on prices ranges (Valid value)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status Code | 200 OK', function(){",
									"    pm.response.to.have.status(200)",
									"})",
									"",
									"const schemaToBeValidatedWith = JSON.parse(pm.environment.get('ResponseSchema'));",
									"",
									"pm.test(\"Validate Response against Schema\", function(){",
									"    pm.response.to.have.jsonSchema(schemaToBeValidatedWith)",
									"})",
									"",
									"var responseBody = pm.response.json();",
									"",
									"var Ajv = require('ajv'),",
									"    ajv = new Ajv({logger: console,  allErrors: true});",
									"",
									"var schema = JSON.parse(pm.environment.get('ProductSchema'))",
									"",
									"responseBody.products.forEach(function(index){",
									"pm.test('Validate Product details', function(){",
									"    pm.expect(ajv.validate(schema, index)).to.be.true;",
									"})",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "X-Loblaw-Tenant-ID",
								"value": "JOE_FRESH"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"categoryId\": \"56043\",\n    \"lang\": \"en\",\n     \"pagination\": {\n        \"from\": 0,\n        \"size\": 10\n    },\n    \"includeFacets\": true,\n    \"filter\" : {\n    \"priceRanges\" : [ \"$20-$30\" ]\n  }\n}"
						},
						"url": {
							"raw": "{{baseURL}}/v1/catalog/listing",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"v1",
								"catalog",
								"listing"
							]
						}
					},
					"response": []
				},
				{
					"name": "Product Domain (TS- 70) [P] - If a user add integer value in price range field then it should not filter the list.",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status Code | 400', function(){",
									"    pm.response.to.have.status(400)",
									"})",
									"",
									"",
									"const schemaToBeValidatedWith = JSON.parse(pm.environment.get('ErrorSchema'));",
									"",
									"pm.test(\"Validate Response against Schema\", function(){",
									"    pm.response.to.have.jsonSchema(schemaToBeValidatedWith)",
									"})",
									"",
									"pm.test('Response Assert', function(){",
									"   pm.expect(pm.response.text()).to.include('Cannot deserialize value of type `java.util.ArrayList<java.lang.String>` from Integer value (token `JsonToken.VALUE_NUMBER_INT`)') ",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "X-Loblaw-Tenant-ID",
								"value": "JOE_FRESH"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"categoryId\": \"56043\",\n    \"lang\": \"en\",\n     \"pagination\": {\n        \"from\": 0,\n        \"size\": 10\n    },\n    \"includeFacets\": true,\n    \"filter\" : {\n    \"priceRanges\" : 20\n  }\n}"
						},
						"url": {
							"raw": "{{baseURL}}/v1/catalog/listing",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"v1",
								"catalog",
								"listing"
							]
						}
					},
					"response": []
				},
				{
					"name": "Product Domain (TS- 71) [N] -If a user add arr[int] in price range field then it should not filter the list.",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status Code | 200 OK', function(){",
									"    pm.response.to.have.status(200)",
									"})",
									"",
									"const schemaToBeValidatedWith = JSON.parse(pm.environment.get('ResponseSchema'));",
									"",
									"pm.test(\"Validate Response against Schema\", function(){",
									"    pm.response.to.have.jsonSchema(schemaToBeValidatedWith)",
									"})",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "X-Loblaw-Tenant-ID",
								"value": "JOE_FRESH"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"categoryId\": \"56043\",\n    \"lang\": \"en\",\n     \"pagination\": {\n        \"from\": 0,\n        \"size\": 10\n    },\n    \"includeFacets\": true,\n    \"filter\" : {\n    \"priceRanges\" : [ 20 ]\n  }\n}"
						},
						"url": {
							"raw": "{{baseURL}}/v1/catalog/listing",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"v1",
								"catalog",
								"listing"
							]
						}
					},
					"response": []
				},
				{
					"name": "Product Domain (TS- 72) [P] - If a user add no value in price range then it should filter all the facets.",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status Code | 200 OK', function(){",
									"    pm.response.to.have.status(200)",
									"})",
									"",
									"const schemaToBeValidatedWith = JSON.parse(pm.environment.get('ResponseSchema'));",
									"",
									"pm.test(\"Validate Response against Schema\", function(){",
									"    pm.response.to.have.jsonSchema(schemaToBeValidatedWith)",
									"})",
									"",
									"var responseBody = pm.response.json();",
									"",
									"var Ajv = require('ajv'),",
									"    ajv = new Ajv({logger: console,  allErrors: true});",
									"",
									"var schema = JSON.parse(pm.environment.get('ProductSchema'))",
									"",
									"responseBody.products.forEach(function(index){",
									"pm.test('Validate Product details', function(){",
									"    pm.expect(ajv.validate(schema, index)).to.be.true;",
									"})",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "X-Loblaw-Tenant-ID",
								"value": "JOE_FRESH"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"categoryId\": \"56043\",\n    \"lang\": \"en\",\n     \"pagination\": {\n        \"from\": 0,\n        \"size\": 10\n    },\n    \"includeFacets\": true,\n    \"filter\" : {\n    \"priceRanges\" : [ null ]\n  }\n}"
						},
						"url": {
							"raw": "{{baseURL}}/v1/catalog/listing",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"v1",
								"catalog",
								"listing"
							]
						}
					},
					"response": []
				},
				{
					"name": "Product Domain (TS- 73) [P] - As a User, I want to filter the list of product based on Sizes (Valid Value).",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status Code | 200 OK', function(){",
									"    pm.response.to.have.status(200)",
									"})",
									"",
									"const schemaToBeValidatedWith = JSON.parse(pm.environment.get('ResponseSchema'));",
									"",
									"pm.test(\"Validate Response against Schema\", function(){",
									"    pm.response.to.have.jsonSchema(schemaToBeValidatedWith)",
									"})",
									"",
									"var responseBody = pm.response.json();",
									"",
									"var Ajv = require('ajv'),",
									"    ajv = new Ajv({logger: console,  allErrors: true});",
									"",
									"var schema = JSON.parse(pm.environment.get('ProductSchema'))",
									"",
									"responseBody.products.forEach(function(index){",
									"pm.test('Validate Product details', function(){",
									"    pm.expect(ajv.validate(schema, index)).to.be.true;",
									"})",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "X-Loblaw-Tenant-ID",
								"value": "JOE_FRESH"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"categoryId\": \"56043\",\n    \"lang\": \"en\",\n     \"pagination\": {\n        \"from\": 0,\n        \"size\": 10\n    },\n    \"includeFacets\": true,\n    \"filter\" : {\n    \"sizes\" : [ \"XL\" ]\n  }\n}"
						},
						"url": {
							"raw": "{{baseURL}}/v1/catalog/listing",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"v1",
								"catalog",
								"listing"
							]
						}
					},
					"response": []
				},
				{
					"name": "Product Domain (TS- 74) [N] - As a User, I want to add int type value in Sizes field then it should give some error",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status Code | 400', function(){",
									"    pm.response.to.have.status(400)",
									"})",
									"",
									"const schemaToBeValidatedWith = JSON.parse(pm.environment.get('ErrorSchema'));",
									"",
									"pm.test(\"Validate Response against Schema\", function(){",
									"    pm.response.to.have.jsonSchema(schemaToBeValidatedWith)",
									"})",
									"",
									"pm.test('Response Assert', function(){",
									"   pm.expect(pm.response.text()).to.include('Cannot deserialize value of type `java.util.ArrayList<java.lang.String>` from Integer value (token `JsonToken.VALUE_NUMBER_INT`)') ",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "X-Loblaw-Tenant-ID",
								"value": "JOE_FRESH"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"categoryId\": \"56043\",\n    \"lang\": \"en\",\n     \"pagination\": {\n        \"from\": 0,\n        \"size\": 10\n    },\n    \"includeFacets\": true,\n    \"filter\" : {\n    \"sizes\" : 12 \n  }\n}"
						},
						"url": {
							"raw": "{{baseURL}}/v1/catalog/listing",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"v1",
								"catalog",
								"listing"
							]
						}
					},
					"response": []
				},
				{
					"name": "Product Domain (TS- 75) [N] - As a User, I want to add null/invalid value in Sizes field then it should not display any product.",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status Code | 200 OK', function(){",
									"    pm.response.to.have.status(200)",
									"})",
									"",
									"const schemaToBeValidatedWith = JSON.parse(pm.environment.get('ResponseSchema'));",
									"",
									"pm.test(\"Validate Response against Schema\", function(){",
									"    pm.response.to.have.jsonSchema(schemaToBeValidatedWith)",
									"})",
									"",
									"var responseBody = pm.response.json();",
									"",
									"var Ajv = require('ajv'),",
									"    ajv = new Ajv({logger: console,  allErrors: true});",
									"",
									"var schema = JSON.parse(pm.environment.get('ProductSchema'))",
									"",
									"responseBody.products.forEach(function(index){",
									"pm.test('Validate Product details', function(){",
									"    pm.expect(ajv.validate(schema, index)).to.be.true;",
									"})",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "X-Loblaw-Tenant-ID",
								"value": "JOE_FRESH"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"categoryId\": \"56043\",\n    \"lang\": \"en\",\n     \"pagination\": {\n        \"from\": 0,\n        \"size\": 10\n    },\n    \"includeFacets\": true,\n    \"filter\" : {\n    \"sizes\" : [ null ]\n  }\n}"
						},
						"url": {
							"raw": "{{baseURL}}/v1/catalog/listing",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"v1",
								"catalog",
								"listing"
							]
						}
					},
					"response": []
				},
				{
					"name": "Product Domain (TS- 76) [P] - As a User, I want to filter the list of product based on colors (Valid Value).",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status Code | 200 OK', function(){",
									"    pm.response.to.have.status(200)",
									"})",
									"",
									"const schemaToBeValidatedWith = JSON.parse(pm.environment.get('ResponseSchema'));",
									"",
									"pm.test(\"Validate Response against Schema\", function(){",
									"    pm.response.to.have.jsonSchema(schemaToBeValidatedWith)",
									"})",
									"",
									"var responseBody = pm.response.json();",
									"",
									"var Ajv = require('ajv'),",
									"    ajv = new Ajv({logger: console,  allErrors: true});",
									"",
									"var schema = JSON.parse(pm.environment.get('ProductSchema'))",
									"",
									"responseBody.products.forEach(function(index){",
									"pm.test('Validate Product details', function(){",
									"    pm.expect(ajv.validate(schema, index)).to.be.true;",
									"})",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "X-Loblaw-Tenant-ID",
								"value": "JOE_FRESH"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"categoryId\": \"56043\",\n    \"lang\": \"en\",\n     \"pagination\": {\n        \"from\": 0,\n        \"size\": 10\n    },\n    \"includeFacets\": true,\n    \"filter\" : {\n    \"colors\" : [ \"Black\" ]\n  }\n}"
						},
						"url": {
							"raw": "{{baseURL}}/v1/catalog/listing",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"v1",
								"catalog",
								"listing"
							]
						}
					},
					"response": []
				},
				{
					"name": "Product Domain (TS- 77) [N] - As a User, I want to add int type value in colors field then it should give some error.",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status Code | 400', function(){",
									"    pm.response.to.have.status(400)",
									"})",
									"",
									"const schemaToBeValidatedWith = JSON.parse(pm.environment.get('ErrorSchema'));",
									"",
									"pm.test(\"Validate Response against Schema\", function(){",
									"    pm.response.to.have.jsonSchema(schemaToBeValidatedWith)",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "X-Loblaw-Tenant-ID",
								"value": "JOE_FRESH"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"categoryId\": \"56043\",\n    \"lang\": \"en\",\n     \"pagination\": {\n        \"from\": 0,\n        \"size\": 10\n    },\n    \"includeFacets\": true,\n    \"filter\" : {\n    \"colors\" : 1234\n  }\n}"
						},
						"url": {
							"raw": "{{baseURL}}/v1/catalog/listing",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"v1",
								"catalog",
								"listing"
							]
						}
					},
					"response": []
				},
				{
					"name": "Product Domain (TS- 78) [P] - As a User, I want to add null/invalid value in colors field.",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status Code | 200 OK', function(){",
									"    pm.response.to.have.status(200)",
									"})",
									"",
									"const schemaToBeValidatedWith = JSON.parse(pm.environment.get('ResponseSchema'));",
									"",
									"pm.test(\"Validate Response against Schema\", function(){",
									"    pm.response.to.have.jsonSchema(schemaToBeValidatedWith)",
									"})",
									"",
									"var responseBody = pm.response.json();",
									"",
									"var Ajv = require('ajv'),",
									"    ajv = new Ajv({logger: console,  allErrors: true});",
									"",
									"var schema = JSON.parse(pm.environment.get('ProductSchema'))",
									"",
									"responseBody.products.forEach(function(index){",
									"pm.test('Validate Product details', function(){",
									"    pm.expect(ajv.validate(schema, index)).to.be.true;",
									"})",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "X-Loblaw-Tenant-ID",
								"value": "JOE_FRESH"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"categoryId\": \"56043\",\n    \"lang\": \"en\",\n     \"pagination\": {\n        \"from\": 0,\n        \"size\": 10\n    },\n    \"includeFacets\": true,\n    \"filter\" : {\n    \"colors\" : [ null ]\n  }\n}"
						},
						"url": {
							"raw": "{{baseURL}}/v1/catalog/listing",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"v1",
								"catalog",
								"listing"
							]
						}
					},
					"response": []
				},
				{
					"name": "Product Domain (TS- 79) [P] - As a User, I want to filter the list of product based on itemsTypes (Valid Value).",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status Code | 200 OK', function(){",
									"    pm.response.to.have.status(200)",
									"})",
									"",
									"const schemaToBeValidatedWith = JSON.parse(pm.environment.get('ResponseSchema'));",
									"",
									"pm.test(\"Validate Response against Schema\", function(){",
									"    pm.response.to.have.jsonSchema(schemaToBeValidatedWith)",
									"})",
									"",
									"var responseBody = pm.response.json();",
									"",
									"var Ajv = require('ajv'),",
									"    ajv = new Ajv({logger: console,  allErrors: true});",
									"",
									"var schema = JSON.parse(pm.environment.get('ProductSchema'))",
									"",
									"responseBody.products.forEach(function(index){",
									"pm.test('Validate Product details', function(){",
									"    pm.expect(ajv.validate(schema, index)).to.be.true;",
									"})",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "X-Loblaw-Tenant-ID",
								"value": "JOE_FRESH"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"categoryId\": \"56043\",\n    \"lang\": \"en\",\n     \"pagination\": {\n        \"from\": 0,\n        \"size\": 10\n    },\n    \"includeFacets\": true,\n    \"filter\" : {\n    \"itemTypes\" : [ \"Cardigan\" ]\n  }\n}"
						},
						"url": {
							"raw": "{{baseURL}}/v1/catalog/listing",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"v1",
								"catalog",
								"listing"
							]
						}
					},
					"response": []
				},
				{
					"name": "Product Domain (TS- 80) [N] - As a User, I want to add int type value in itemsTypes field then it should give some error.",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status Code | 400', function(){",
									"    pm.response.to.have.status(400)",
									"})",
									"",
									"const schemaToBeValidatedWith = JSON.parse(pm.environment.get('ErrorSchema'));",
									"",
									"pm.test(\"Validate Response against Schema\", function(){",
									"    pm.response.to.have.jsonSchema(schemaToBeValidatedWith)",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "X-Loblaw-Tenant-ID",
								"value": "JOE_FRESH"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"categoryId\": \"56043\",\n    \"lang\": \"en\",\n     \"pagination\": {\n        \"from\": 0,\n        \"size\": 10\n    },\n    \"includeFacets\": true,\n    \"filter\" : {\n    \"itemTypes\" : 123\n  }\n}"
						},
						"url": {
							"raw": "{{baseURL}}/v1/catalog/listing",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"v1",
								"catalog",
								"listing"
							]
						}
					},
					"response": []
				},
				{
					"name": "Product Domain (TS- 81) [N] - As a User, I want to add null/invalid value in itemsTypes field.",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status Code | 200 OK', function(){",
									"    pm.response.to.have.status(200)",
									"})",
									"",
									"const schemaToBeValidatedWith = JSON.parse(pm.environment.get('ResponseSchema'));",
									"",
									"pm.test(\"Validate Response against Schema\", function(){",
									"    pm.response.to.have.jsonSchema(schemaToBeValidatedWith)",
									"})",
									"",
									"var responseBody = pm.response.json();",
									"",
									"var Ajv = require('ajv'),",
									"    ajv = new Ajv({logger: console,  allErrors: true});",
									"",
									"var schema = JSON.parse(pm.environment.get('ProductSchema'))",
									"",
									"responseBody.products.forEach(function(index){",
									"pm.test('Validate Product details', function(){",
									"    pm.expect(ajv.validate(schema, index)).to.be.true;",
									"})",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "X-Loblaw-Tenant-ID",
								"value": "JOE_FRESH"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"categoryId\": \"56043\",\n    \"lang\": \"en\",\n     \"pagination\": {\n        \"from\": 0,\n        \"size\": 10\n    },\n    \"includeFacets\": true,\n    \"filter\" : {\n    \"itemTypes\" : [null]\n  }\n}"
						},
						"url": {
							"raw": "{{baseURL}}/v1/catalog/listing",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"v1",
								"catalog",
								"listing"
							]
						}
					},
					"response": []
				},
				{
					"name": "Product Domain (TS- 82) [P] - As a User, I want to sort the list of product based on prices (Valid Value).",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status Code | 200 OK', function(){",
									"    pm.response.to.have.status(200)",
									"})",
									"",
									"const schemaToBeValidatedWith = JSON.parse(pm.environment.get('ResponseSchema'));",
									"",
									"pm.test(\"Validate Response against Schema\", function(){",
									"    pm.response.to.have.jsonSchema(schemaToBeValidatedWith)",
									"})",
									"",
									"var responseBody = pm.response.json();",
									"",
									"var Ajv = require('ajv'),",
									"    ajv = new Ajv({logger: console,  allErrors: true});",
									"",
									"var schema = JSON.parse(pm.environment.get('ProductSchema'))",
									"",
									"responseBody.products.forEach(function(index){",
									"pm.test('Validate Product details', function(){",
									"    pm.expect(ajv.validate(schema, index)).to.be.true;",
									"})",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "X-Loblaw-Tenant-ID",
								"value": "JOE_FRESH"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"categoryId\" : \"56025\",\n  \"lang\" : \"en\",\n  \"pagination\" : {\n    \"from\" : 0,\n    \"size\" : 2\n  },\n  \"includeFacets\" : true,\n  \"sort\" : {\n    \"price\" : \"asc\"\n  }}"
						},
						"url": {
							"raw": "{{baseURL}}/v1/catalog/listing",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"v1",
								"catalog",
								"listing"
							]
						}
					},
					"response": []
				},
				{
					"name": "Product Domain (TS- 83) [N] - As a User, I want to add int type value in prices field then it should give some error.",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status Code | 400', function(){",
									"    pm.response.to.have.status(400)",
									"})",
									"const schemaToBeValidatedWith = JSON.parse(pm.environment.get('ErrorSchema'));",
									"",
									"pm.test(\"Validate Response against Schema\", function(){",
									"    pm.response.to.have.jsonSchema(schemaToBeValidatedWith)",
									"})",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "X-Loblaw-Tenant-ID",
								"value": "JOE_FRESH"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"categoryId\" : \"56025\",\n  \"lang\" : \"en\",\n  \"pagination\" : {\n    \"from\" : 0,\n    \"size\" : 2\n  },\n  \"includeFacets\" : true,\n  \"sort\" : {\n    \"price\" : 333\n  }}"
						},
						"url": {
							"raw": "{{baseURL}}/v1/catalog/listing",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"v1",
								"catalog",
								"listing"
							]
						}
					},
					"response": []
				},
				{
					"name": "Product Domain (TS- 84) [N] - As a User, I want to add null/invalid value in prices field then it should error.",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status Code | 400', function(){",
									"    pm.response.to.have.status(400)",
									"})",
									"",
									"const schemaToBeValidatedWith = JSON.parse(pm.environment.get('ErrorSchema'));",
									"",
									"pm.test(\"Validate Response against Schema\", function(){",
									"    pm.response.to.have.jsonSchema(schemaToBeValidatedWith)",
									"})",
									"",
									"pm.test('Response Assert', function(){",
									"   pm.expect(pm.response.text()).to.include(\"No enum constant com.loblaw.search.constant.Sort.ASCENDING\") ",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "X-Loblaw-Tenant-ID",
								"value": "JOE_FRESH"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"categoryId\" : \"56025\",\n  \"lang\" : \"en\",\n  \"pagination\" : {\n    \"from\" : 0,\n    \"size\" : 2\n  },\n  \"includeFacets\" : true,\n  \"sort\" : {\n    \"price\" : \"ascending\"\n  }}"
						},
						"url": {
							"raw": "{{baseURL}}/v1/catalog/listing",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"v1",
								"catalog",
								"listing"
							]
						}
					},
					"response": []
				},
				{
					"name": "Product Domain (TS- 85) [P] - As a User, I want to sort the list of product based on newest (Valid Value).",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status Code | 200 OK', function(){",
									"    pm.response.to.have.status(200)",
									"})",
									"",
									"const schemaToBeValidatedWith = JSON.parse(pm.environment.get('ResponseSchema'));",
									"",
									"pm.test(\"Validate Response against Schema\", function(){",
									"    pm.response.to.have.jsonSchema(schemaToBeValidatedWith)",
									"})",
									"",
									"var responseBody = pm.response.json();",
									"",
									"var Ajv = require('ajv'),",
									"    ajv = new Ajv({logger: console,  allErrors: true});",
									"",
									"var schema = JSON.parse(pm.environment.get('ProductSchema'))",
									"",
									"responseBody.products.forEach(function(index){",
									"pm.test('Validate Product details', function(){",
									"    pm.expect(ajv.validate(schema, index)).to.be.true;",
									"})",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "X-Loblaw-Tenant-ID",
								"value": "JOE_FRESH"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"categoryId\" : \"56025\",\n  \"lang\" : \"en\",\n  \"pagination\" : {\n    \"from\" : 0,\n    \"size\" : 2\n  },\n  \"includeFacets\" : true,\n  \"sort\" : {\n    \"newest\" : \"asc\"\n  }}"
						},
						"url": {
							"raw": "{{baseURL}}/v1/catalog/listing",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"v1",
								"catalog",
								"listing"
							]
						}
					},
					"response": []
				},
				{
					"name": "Product Domain (TS- 86) [N] - As a User, I want to add int type value in newest field then it should give some error.",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status Code | 400', function(){",
									"    pm.response.to.have.status(400)",
									"})",
									"",
									"const schemaToBeValidatedWith = JSON.parse(pm.environment.get('ErrorSchema'));",
									"",
									"pm.test(\"Validate Response against Schema\", function(){",
									"    pm.response.to.have.jsonSchema(schemaToBeValidatedWith)",
									"})",
									"",
									"pm.test('Response Assert', function(){",
									"   pm.expect(pm.response.text()).to.include('Cannot construct instance of `com.loblaw.search.constant.Sort`') ",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "X-Loblaw-Tenant-ID",
								"value": "JOE_FRESH"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"categoryId\" : \"56025\",\n  \"lang\" : \"en\",\n  \"pagination\" : {\n    \"from\" : 0,\n    \"size\" : 2\n  },\n  \"includeFacets\" : true,\n  \"sort\" : {\n    \"newest\" : 234\n  }}"
						},
						"url": {
							"raw": "{{baseURL}}/v1/catalog/listing",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"v1",
								"catalog",
								"listing"
							]
						}
					},
					"response": []
				},
				{
					"name": "Product Domain (TS- 87) [N] - As a User, I want to add null/invalid value in newest field then it should show error.",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status Code | 400', function(){",
									"    pm.response.to.have.status(400)",
									"})",
									"",
									"const schemaToBeValidatedWith = JSON.parse(pm.environment.get('ErrorSchema'));",
									"",
									"pm.test(\"Validate Response against Schema\", function(){",
									"    pm.response.to.have.jsonSchema(schemaToBeValidatedWith)",
									"})",
									"",
									"pm.test('Response Assert', function(){",
									"   pm.expect(pm.response.text()).to.include(\"No enum constant com.loblaw.search.constant.Sort.ASCENDING\") ",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "X-Loblaw-Tenant-ID",
								"value": "JOE_FRESH"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"categoryId\" : \"56025\",\n  \"lang\" : \"en\",\n  \"pagination\" : {\n    \"from\" : 0,\n    \"size\" : 2\n  },\n  \"includeFacets\" : true,\n  \"sort\" : {\n    \"newest\" : \"ascending\"\n  }}"
						},
						"url": {
							"raw": "{{baseURL}}/v1/catalog/listing",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"v1",
								"catalog",
								"listing"
							]
						}
					},
					"response": []
				},
				{
					"name": "Product Domain (TS- 88) [P] - As a User, I want to sort the list of product based on popular (Valid Value).",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status Code | 200 OK', function(){",
									"    pm.response.to.have.status(200)",
									"})",
									"",
									"const schemaToBeValidatedWith = JSON.parse(pm.environment.get('ResponseSchema'));",
									"",
									"pm.test(\"Validate Response against Schema\", function(){",
									"    pm.response.to.have.jsonSchema(schemaToBeValidatedWith)",
									"})",
									"",
									"var responseBody = pm.response.json();",
									"",
									"var Ajv = require('ajv'),",
									"    ajv = new Ajv({logger: console,  allErrors: true});",
									"",
									"var schema = JSON.parse(pm.environment.get('ProductSchema'))",
									"",
									"responseBody.products.forEach(function(index){",
									"pm.test('Validate Product details', function(){",
									"    pm.expect(ajv.validate(schema, index)).to.be.true;",
									"})",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "X-Loblaw-Tenant-ID",
								"value": "JOE_FRESH"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"categoryId\" : \"56025\",\n  \"lang\" : \"en\",\n  \"pagination\" : {\n    \"from\" : 0,\n    \"size\" : 2\n  },\n  \"includeFacets\" : true,\n  \"sort\" : {\n    \"popular\" : \"asc\"\n  }}"
						},
						"url": {
							"raw": "{{baseURL}}/v1/catalog/listing",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"v1",
								"catalog",
								"listing"
							]
						}
					},
					"response": []
				},
				{
					"name": "Product Domain (TS- 89) [N] - As a User, I want to add int type value in popular field then it should give some error.",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status Code | 400', function(){",
									"    pm.response.to.have.status(400)",
									"})",
									"",
									"const schemaToBeValidatedWith = JSON.parse(pm.environment.get('ErrorSchema'));",
									"",
									"pm.test(\"Validate Response against Schema\", function(){",
									"    pm.response.to.have.jsonSchema(schemaToBeValidatedWith)",
									"})",
									"",
									"pm.test('Response Assert', function(){",
									"   pm.expect(pm.response.text()).to.include('Cannot construct instance of `com.loblaw.search.constant.Sort`') ",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "X-Loblaw-Tenant-ID",
								"value": "JOE_FRESH"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"categoryId\" : \"56025\",\n  \"lang\" : \"en\",\n  \"pagination\" : {\n    \"from\" : 0,\n    \"size\" : 2\n  },\n  \"includeFacets\" : true,\n  \"sort\" : {\n    \"popular\" : 1456\n  }}"
						},
						"url": {
							"raw": "{{baseURL}}/v1/catalog/listing",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"v1",
								"catalog",
								"listing"
							]
						}
					},
					"response": []
				},
				{
					"name": "Product Domain (TS- 90) [N] - As a User, I want to add null/invalid value in popular field then it should display error.",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status Code | 400', function(){",
									"    pm.response.to.have.status(400)",
									"})",
									"",
									"const schemaToBeValidatedWith = JSON.parse(pm.environment.get('ErrorSchema'));",
									"",
									"pm.test(\"Validate Response against Schema\", function(){",
									"    pm.response.to.have.jsonSchema(schemaToBeValidatedWith)",
									"})",
									"",
									"pm.test('Response Assert', function(){",
									"   pm.expect(pm.response.text()).to.include(\"No enum constant com.loblaw.search.constant.Sort.ASCENDING\") ",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "X-Loblaw-Tenant-ID",
								"value": "JOE_FRESH"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"categoryId\" : \"56025\",\n  \"lang\" : \"en\",\n  \"pagination\" : {\n    \"from\" : 0,\n    \"size\" : 2\n  },\n  \"includeFacets\" : true,\n  \"sort\" : {\n    \"popular\" : \"ascending\"\n  }}"
						},
						"url": {
							"raw": "{{baseURL}}/v1/catalog/listing",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"v1",
								"catalog",
								"listing"
							]
						}
					},
					"response": []
				},
				{
					"name": "Product Domain (TS- 91) [P] - As a User, I want to sort the list of product based on featured field (Valid Value).",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status Code | 200 OK', function(){",
									"    pm.response.to.have.status(200)",
									"})",
									"",
									"const schemaToBeValidatedWith = JSON.parse(pm.environment.get('ResponseSchema'));",
									"",
									"pm.test(\"Validate Response against Schema\", function(){",
									"    pm.response.to.have.jsonSchema(schemaToBeValidatedWith)",
									"})",
									"",
									"var responseBody = pm.response.json();",
									"",
									"var Ajv = require('ajv'),",
									"    ajv = new Ajv({logger: console,  allErrors: true});",
									"",
									"var schema = JSON.parse(pm.environment.get('ProductSchema'))",
									"",
									"responseBody.products.forEach(function(index){",
									"pm.test('Validate Product details', function(){",
									"    pm.expect(ajv.validate(schema, index)).to.be.true;",
									"})",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "X-Loblaw-Tenant-ID",
								"value": "JOE_FRESH"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"categoryId\" : \"56025\",\n  \"lang\" : \"en\",\n  \"pagination\" : {\n    \"from\" : 0,\n    \"size\" : 2\n  },\n  \"includeFacets\" : true,\n  \"sort\" : {\n    \"featured\" : \"asc\"\n}}"
						},
						"url": {
							"raw": "{{baseURL}}/v1/catalog/listing",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"v1",
								"catalog",
								"listing"
							]
						}
					},
					"response": []
				},
				{
					"name": "Product Domain (TS- 92) [N] - As a User, I want to add int type value in featured field then it should give some error.",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status Code | 400', function(){",
									"    pm.response.to.have.status(400)",
									"})",
									"",
									"const schemaToBeValidatedWith = JSON.parse(pm.environment.get('ErrorSchema'));",
									"",
									"pm.test(\"Validate Response against Schema\", function(){",
									"    pm.response.to.have.jsonSchema(schemaToBeValidatedWith)",
									"})",
									"",
									"pm.test('Response Assert', function(){",
									"   pm.expect(pm.response.text()).to.include('Cannot construct instance of `com.loblaw.search.constant.Sort`') ",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "X-Loblaw-Tenant-ID",
								"value": "JOE_FRESH"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"categoryId\" : \"56025\",\n  \"lang\" : \"en\",\n  \"pagination\" : {\n    \"from\" : 0,\n    \"size\" : 2\n  },\n  \"includeFacets\" : true,\n  \"sort\" : {\n    \"featured\" : 3333\n      }}"
						},
						"url": {
							"raw": "{{baseURL}}/v1/catalog/listing",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"v1",
								"catalog",
								"listing"
							]
						}
					},
					"response": []
				},
				{
					"name": "Product Domain (TS- 93) [N] - As a User, I want to add string type value in featured field then it should give some error.",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status Code | 400', function(){",
									"    pm.response.to.have.status(400)",
									"})",
									"",
									"const schemaToBeValidatedWith = JSON.parse(pm.environment.get('ErrorSchema'));",
									"",
									"pm.test(\"Validate Response against Schema\", function(){",
									"    pm.response.to.have.jsonSchema(schemaToBeValidatedWith)",
									"})",
									"",
									"pm.test('Response Assert', function(){",
									"   pm.expect(pm.response.text()).to.include('Cannot construct instance of `com.loblaw.search.constant.Sort`') ",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "X-Loblaw-Tenant-ID",
								"value": "JOE_FRESH"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"categoryId\" : \"56025\",\n  \"lang\" : \"en\",\n  \"pagination\" : {\n    \"from\" : 0,\n    \"size\" : 2\n  },\n  \"includeFacets\" : true,\n  \"sort\" : {\n    \"featured\" : \"ascending\"\n      }}"
						},
						"url": {
							"raw": "{{baseURL}}/v1/catalog/listing",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"v1",
								"catalog",
								"listing"
							]
						}
					},
					"response": []
				},
				{
					"name": "Product Domain (TS- 94) [N] - As a User, I want to add special character in Category ID field.",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status Code | 200 OK', function(){",
									"    pm.response.to.have.status(200)",
									"})",
									"",
									"const schemaToBeValidatedWith = JSON.parse(pm.environment.get('ResponseSchema'));",
									"",
									"pm.test(\"Validate Response against Schema\", function(){",
									"    pm.response.to.have.jsonSchema(schemaToBeValidatedWith)",
									"})",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "X-Loblaw-Tenant-ID",
								"value": "JOE_FRESH"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"categoryId\" : \"~\\\"@#$%^&*()_+-=|';:?/><,.|\\\\\\\\|[]!{banner}56018\",\n    \"lang\": \"en\",\n     \"pagination\": {\n        \"from\": 0,\n        \"size\": 10\n    },\n    \"includeFacets\": true\n}"
						},
						"url": {
							"raw": "{{baseURL}}/v1/catalog/listing",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"v1",
								"catalog",
								"listing"
							]
						}
					},
					"response": []
				},
				{
					"name": "Product Domain (TS- 95) [N] - As a User, I want to add unicode character in Category ID field.",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status Code | 200 OK', function(){",
									"    pm.response.to.have.status(200)",
									"})",
									"",
									"const schemaToBeValidatedWith = JSON.parse(pm.environment.get('ResponseSchema'));",
									"",
									"pm.test(\"Validate Response against Schema\", function(){",
									"    pm.response.to.have.jsonSchema(schemaToBeValidatedWith)",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "X-Loblaw-Tenant-ID",
								"value": "JOE_FRESH"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"categoryId\" : \"öbanner¢025004007000000000000000™®©¡§\",\n    \"lang\": \"en\",\n     \"pagination\": {\n        \"from\": 0,\n        \"size\": 10\n    },\n    \"includeFacets\": true\n}"
						},
						"url": {
							"raw": "{{baseURL}}/v1/catalog/listing",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"v1",
								"catalog",
								"listing"
							]
						}
					},
					"response": []
				},
				{
					"name": "Product Domain (TS- 96) [P] - As a user, I want to add a blank value in all listing filters and get results with no filters applied",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status Code | 200 OK', function(){",
									"    pm.response.to.have.status(200)",
									"})",
									"",
									"const schemaToBeValidatedWith = JSON.parse(pm.environment.get('ResponseSchema'));",
									"",
									"pm.test(\"Validate Response against Schema\", function(){",
									"    pm.response.to.have.jsonSchema(schemaToBeValidatedWith)",
									"})",
									"",
									"var responseBody = pm.response.json();",
									"",
									"var Ajv = require('ajv'),",
									"    ajv = new Ajv({logger: console,  allErrors: true});",
									"",
									"var schema = JSON.parse(pm.environment.get('ProductSchema'))",
									"",
									"responseBody.products.forEach(function(index){",
									"pm.test('Validate Product details', function(){",
									"    pm.expect(ajv.validate(schema, index)).to.be.true;",
									"})",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "X-Loblaw-Tenant-ID",
								"value": "JOE_FRESH"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"categoryId\": \"56043\",\n    \"lang\": \"en\",\n     \"pagination\": {\n        \"from\": 0,\n        \"size\": 10\n    },\n    \"includeFacets\": true,\n    \"filter\" : {\n    \"priceRanges\" : null,\n    \"sizes\" : null,\n    \"itemTypes\" : null,\n    \"colors\" : null\n  }\n}"
						},
						"url": {
							"raw": "{{baseURL}}/v1/catalog/listing",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"v1",
								"catalog",
								"listing"
							]
						}
					},
					"response": []
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "Search-in-ids",
			"item": [
				{
					"name": "Product Domain (TS- 100) [N] - As a User, I want to add empty value in Tenant-ID header field.",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status Code | 404', function(){",
									"    pm.response.to.have.status(404)",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "X-Loblaw-Tenant-ID",
								"value": ""
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"productIds\": [\n        \"U2WP028705008_EA\",\n        \"U2SP029760001_EA\"\n    ],\n    \"categoryIds\": [\n        \"56032\"\n    ],\n    \"lang\": \"en\"\n}"
						},
						"url": {
							"raw": "{{baseURL}}/v1/catalog/search-in-ids",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"v1",
								"catalog",
								"search-in-ids"
							]
						}
					},
					"response": []
				},
				{
					"name": "Product Domain (TS- 101) [N] - As a User, I want to add invalid value in Tenant-ID header field.",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status Code | 404', function(){",
									"    pm.response.to.have.status(404)",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "X-Loblaw-Tenant-ID",
								"value": "MARKETPLACE"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"productIds\": [\n        \"U2WP028705008_EA\",\n        \"U2SP029760001_EA\"\n    ],\n    \"categoryIds\": [\n        \"56032\"\n    ],\n    \"lang\": \"en\"\n}"
						},
						"url": {
							"raw": "{{baseURL}}/v1/catalog/search-in-ids",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"v1",
								"catalog",
								"search-in-ids"
							]
						}
					},
					"response": []
				},
				{
					"name": "Product Domain (TS- 138) [N] - User missing product-ids-category-ids fields",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status Code | 400', function(){",
									"    pm.response.to.have.status(400)",
									"})",
									"",
									"const schemaToBeValidatedWith = JSON.parse(pm.environment.get('ErrorSchema'));",
									"",
									"pm.test(\"Validate Response against Schema\", function(){",
									"    pm.response.to.have.jsonSchema(schemaToBeValidatedWith)",
									"})",
									"",
									"pm.test('Response Assert', function(){",
									"   pm.expect(pm.response.text()).to.include('Either productIds or categoryIds is missing') ",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "X-Loblaw-Tenant-ID",
								"value": "JOE_FRESH"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"lang\": \"en\"\n}"
						},
						"url": {
							"raw": "{{baseURL}}/v1/catalog/search-in-ids",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"v1",
								"catalog",
								"search-in-ids"
							]
						}
					},
					"response": []
				},
				{
					"name": "Product Domain (TS- 97) [N] - As a User, I want to add empty string in lang field",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status Code | 400', function(){",
									"    pm.response.to.have.status(400)",
									"})",
									"",
									"const schemaToBeValidatedWith = JSON.parse(pm.environment.get('ErrorSchema'));",
									"",
									"pm.test(\"Validate Response against Schema\", function(){",
									"    pm.response.to.have.jsonSchema(schemaToBeValidatedWith)",
									"})",
									"",
									"pm.test('Response Assert', function(){",
									"   pm.expect(pm.response.text()).to.include(\"Language provided isn't valid.\") ",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "X-Loblaw-Tenant-ID",
								"value": "JOE_FRESH"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"productIds\": [\n        \"U2WP028705008_EA\",\n        \"U2SP029760001_EA\"\n    ],\n    \"categoryIds\": [\n        \"56032\"\n    ],\n    \"lang\": \"\"\n}"
						},
						"url": {
							"raw": "{{baseURL}}/v1/catalog/search-in-ids",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"v1",
								"catalog",
								"search-in-ids"
							]
						}
					},
					"response": []
				},
				{
					"name": "Product Domain (TS- 98) [N] - As a User, I want to add invalid value in lang field",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status Code | 400', function(){",
									"    pm.response.to.have.status(400)",
									"})",
									"",
									"const schemaToBeValidatedWith = JSON.parse(pm.environment.get('ErrorSchema'));",
									"",
									"pm.test(\"Validate Response against Schema\", function(){",
									"    pm.response.to.have.jsonSchema(schemaToBeValidatedWith)",
									"})",
									"",
									"pm.test('Response Assert', function(){",
									"   pm.expect(pm.response.text()).to.include(\"No enum constant com.loblaw.search.constant.Language.PORT\") ",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "X-Loblaw-Tenant-ID",
								"value": "JOE_FRESH"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"productIds\": [\n        \"U2WP028705008_EA\",\n        \"U2SP029760001_EA\"\n    ],\n    \"categoryIds\": [\n        \"56032\"\n    ],\n    \"lang\": \"Port\"\n}"
						},
						"url": {
							"raw": "{{baseURL}}/v1/catalog/search-in-ids",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"v1",
								"catalog",
								"search-in-ids"
							]
						}
					},
					"response": []
				},
				{
					"name": "Product Domain (TS- 141) [P] - User missing product-ids field",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status Code | 200 OK', function(){",
									"    pm.response.to.have.status(200)",
									"})",
									"",
									"const schemaToBeValidatedWith = JSON.parse(pm.environment.get('ResponseSchema'));",
									"",
									"pm.test(\"Validate Response against Schema\", function(){",
									"    pm.response.to.have.jsonSchema(schemaToBeValidatedWith)",
									"})",
									"",
									"var responseBody = pm.response.json();",
									"",
									"var Ajv = require('ajv'),",
									"    ajv = new Ajv({logger: console,  allErrors: true});",
									"",
									"var schema = JSON.parse(pm.environment.get('ProductSchema'))",
									"",
									"responseBody.products.forEach(function(index){",
									"pm.test('Validate Product details', function(){",
									"    pm.expect(ajv.validate(schema, index)).to.be.true;",
									"})",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "X-Loblaw-Tenant-ID",
								"value": "JOE_FRESH"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"categoryIds\": [\n        \"56032\"\n    ],\n    \"lang\": \"en\"\n}"
						},
						"url": {
							"raw": "{{baseURL}}/v1/catalog/search-in-ids",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"v1",
								"catalog",
								"search-in-ids"
							]
						}
					},
					"response": []
				},
				{
					"name": "Product Domain (TS- 140) [P] - One should able to search the product based on the query when User misses category-ids field",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status Code | 200 OK', function(){",
									"    pm.response.to.have.status(200)",
									"})",
									"",
									"const schemaToBeValidatedWith = JSON.parse(pm.environment.get('ResponseSchema'));",
									"",
									"pm.test(\"Validate Response against Schema\", function(){",
									"    pm.response.to.have.jsonSchema(schemaToBeValidatedWith)",
									"})",
									"",
									"var responseBody = pm.response.json();",
									"",
									"var Ajv = require('ajv'),",
									"    ajv = new Ajv({logger: console,  allErrors: true});",
									"",
									"var schema = JSON.parse(pm.environment.get('ProductSchema'))",
									"",
									"responseBody.products.forEach(function(index){",
									"pm.test('Validate Product details', function(){",
									"    pm.expect(ajv.validate(schema, index)).to.be.true;",
									"})",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "X-Loblaw-Tenant-ID",
								"value": "JOE_FRESH"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"productIds\": [\n        \"F2WR030171001_EA\",\n        \"F2WP031920006_EA\"\n    ],\n    \"lang\": \"en\"\n}"
						},
						"url": {
							"raw": "{{baseURL}}/v1/catalog/search-in-ids",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"v1",
								"catalog",
								"search-in-ids"
							]
						}
					},
					"response": []
				},
				{
					"name": "Product Domain (TS- 139) [N] - User missing language field",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status Code | 400', function(){",
									"    pm.response.to.have.status(400)",
									"})",
									"",
									"const schemaToBeValidatedWith = JSON.parse(pm.environment.get('ErrorSchema'));",
									"",
									"pm.test(\"Validate Response against Schema\", function(){",
									"    pm.response.to.have.jsonSchema(schemaToBeValidatedWith)",
									"})",
									"",
									"pm.test('Response Assert', function(){",
									"   pm.expect(pm.response.text()).to.include('default message [lang]]; default message [must not be null]') ",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "X-Loblaw-Tenant-ID",
								"value": "JOE_FRESH"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"productIds\": [\n        \"U2WP028705008_EA\",\n        \"U2SP029760001_EA\"\n    ],\n    \"categoryIds\": [\n        \"56032\"\n    ]\n}"
						},
						"url": {
							"raw": "{{baseURL}}/v1/catalog/search-in-ids",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"v1",
								"catalog",
								"search-in-ids"
							]
						}
					},
					"response": []
				},
				{
					"name": "Product Domain (TS- 142) [P] - User adds both product ID and Category ID.",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status Code | 200 OK', function(){",
									"    pm.response.to.have.status(200)",
									"})",
									"",
									"const schemaToBeValidatedWith = JSON.parse(pm.environment.get('ResponseSchema'));",
									"",
									"pm.test(\"Validate Response against Schema\", function(){",
									"    pm.response.to.have.jsonSchema(schemaToBeValidatedWith)",
									"})",
									"",
									"var responseBody = pm.response.json();",
									"",
									"var Ajv = require('ajv'),",
									"    ajv = new Ajv({logger: console,  allErrors: true});",
									"",
									"var schema = JSON.parse(pm.environment.get('ProductSchema'))",
									"",
									"responseBody.products.forEach(function(index){",
									"pm.test('Validate Product details', function(){",
									"    pm.expect(ajv.validate(schema, index)).to.be.true;",
									"})",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "X-Loblaw-Tenant-ID",
								"value": "JOE_FRESH"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"productIds\": [\n        \"F2WR030171001_EA\",\n        \"F2WP031920006_EA\"\n    ],\n    \"categoryIds\": [\n        \"56032\"\n    ],\n    \"lang\": \"en\"\n}"
						},
						"url": {
							"raw": "{{baseURL}}/v1/catalog/search-in-ids",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"v1",
								"catalog",
								"search-in-ids"
							]
						}
					},
					"response": []
				},
				{
					"name": "Product Domain (TS- 103) [N] - As a User, I want to add negative value in Pagination Size (-10 etc) then it will show invalid parameter error",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status Code | 400', function(){",
									"    pm.response.to.have.status(400)",
									"})",
									"",
									"const schemaToBeValidatedWith = JSON.parse(pm.environment.get('ErrorSchema'));",
									"",
									"pm.test(\"Validate Response against Schema\", function(){",
									"    pm.response.to.have.jsonSchema(schemaToBeValidatedWith)",
									"})",
									"",
									"pm.test('Response Assert', function(){",
									"   pm.expect(pm.response.text()).to.include(\"Pagination 'size' and 'from' values must be zero or positive, and the max permissible value of 'size + from' is 10000\") ",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "X-Loblaw-Tenant-ID",
								"value": "JOE_FRESH"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"productIds\": [\n        \"U2WP028705008_EA\",\n        \"U2SP029760001_EA\"\n    ],\n    \"categoryIds\": [\n        \"56032\"\n    ],\n    \"lang\": \"en\",\n    \"pagination\": {\n        \"from\": 0,\n        \"size\": -10\n    },\n    \"includeFacets\": true\n}"
						},
						"url": {
							"raw": "{{baseURL}}/v1/catalog/search-in-ids",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"v1",
								"catalog",
								"search-in-ids"
							]
						}
					},
					"response": []
				},
				{
					"name": "Product Domain (TS- 104) [N] - As a User, I want to search the product with negative Pagination",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status Code | 400', function(){",
									"    pm.response.to.have.status(400)",
									"})",
									"",
									"const schemaToBeValidatedWith = JSON.parse(pm.environment.get('ErrorSchema'));",
									"",
									"pm.test(\"Validate Response against Schema\", function(){",
									"    pm.response.to.have.jsonSchema(schemaToBeValidatedWith)",
									"})",
									"",
									"pm.test('Response Assert', function(){",
									"   pm.expect(pm.response.text()).to.include(\"Pagination 'size' and 'from' values must be zero or positive, and the max permissible value of 'size + from' is 10000\") ",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "X-Loblaw-Tenant-ID",
								"value": "JOE_FRESH"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"productIds\": [\n        \"U2WP028705008_EA\",\n        \"U2SP029760001_EA\"\n    ],\n    \"categoryIds\": [\n        \"56032\"\n    ],\n    \"lang\": \"en\",\n    \"pagination\": {\n        \"from\": -1,\n        \"size\": 10\n    },\n    \"includeFacets\": true\n}"
						},
						"url": {
							"raw": "{{baseURL}}/v1/catalog/search-in-ids",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"v1",
								"catalog",
								"search-in-ids"
							]
						}
					},
					"response": []
				},
				{
					"name": "Product Domain (TS- 105) [N] - As a User, I want to search the product with negative from and size Pagination",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status Code | 400', function(){",
									"    pm.response.to.have.status(400)",
									"})",
									"",
									"const schemaToBeValidatedWith = JSON.parse(pm.environment.get('ErrorSchema'));",
									"",
									"pm.test(\"Validate Response against Schema\", function(){",
									"    pm.response.to.have.jsonSchema(schemaToBeValidatedWith)",
									"})",
									"",
									"pm.test('Response Assert', function(){",
									"   pm.expect(pm.response.text()).to.include(\"Pagination 'size' and 'from' values must be zero or positive, and the max permissible value of 'size + from' is 10000\") ",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "X-Loblaw-Tenant-ID",
								"value": "JOE_FRESH"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"productIds\": [\n        \"U2WP028705008_EA\",\n        \"U2SP029760001_EA\"\n    ],\n    \"categoryIds\": [\n        \"56032\"\n    ],\n    \"lang\": \"en\",\n    \"pagination\": {\n        \"from\": -1,\n        \"size\": -10\n    },\n    \"includeFacets\": true\n}"
						},
						"url": {
							"raw": "{{baseURL}}/v1/catalog/search-in-ids",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"v1",
								"catalog",
								"search-in-ids"
							]
						}
					},
					"response": []
				},
				{
					"name": "Product Domain (TS- 107) [N] - As a User, I want to add Invalid value in Pagination like from 5 , size 10000.",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status Code | 400', function(){",
									"    pm.response.to.have.status(400)",
									"})",
									"",
									"const schemaToBeValidatedWith = JSON.parse(pm.environment.get('ErrorSchema'));",
									"",
									"pm.test(\"Validate Response against Schema\", function(){",
									"    pm.response.to.have.jsonSchema(schemaToBeValidatedWith)",
									"})",
									"",
									"pm.test('Response Assert', function(){",
									"   pm.expect(pm.response.text()).to.include(\"Pagination 'size' and 'from' values must be zero or positive, and the max permissible value of 'size + from' is 10000\") ",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "X-Loblaw-Tenant-ID",
								"value": "JOE_FRESH"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"productIds\": [\n        \"U2WP028705008_EA\",\n        \"U2SP029760001_EA\"\n    ],\n    \"categoryIds\": [\n        \"56032\"\n    ],\n    \"lang\": \"en\",\n    \"pagination\": {\n        \"from\": 5,\n        \"size\": 10000\n    },\n    \"includeFacets\": true\n}"
						},
						"url": {
							"raw": "{{baseURL}}/v1/catalog/search-in-ids",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"v1",
								"catalog",
								"search-in-ids"
							]
						}
					},
					"response": []
				},
				{
					"name": "Product Domain (TS- 108) [P] - As a User, I want to add includefacets field (true, false) so that I can see the total count of products based on facets.",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status Code | 200 OK', function(){",
									"    pm.response.to.have.status(200)",
									"})",
									"",
									"const schemaToBeValidatedWith = JSON.parse(pm.environment.get('ResponseSchema'));",
									"",
									"pm.test(\"Validate Response against Schema\", function(){",
									"    pm.response.to.have.jsonSchema(schemaToBeValidatedWith)",
									"})",
									"",
									"var responseBody = pm.response.json();",
									"",
									"var Ajv = require('ajv'),",
									"    ajv = new Ajv({logger: console,  allErrors: true});",
									"",
									"var schema = JSON.parse(pm.environment.get('ProductSchema'))",
									"",
									"responseBody.products.forEach(function(index){",
									"pm.test('Validate Product details', function(){",
									"    pm.expect(ajv.validate(schema, index)).to.be.true;",
									"})",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "X-Loblaw-Tenant-ID",
								"value": "JOE_FRESH"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"productIds\": [\n        \"U2WP028705008_EA\",\n        \"U2SP029760001_EA\"\n    ],\n    \"categoryIds\": [\n        \"56032\"\n    ],\n    \"lang\": \"en\",\n    \"pagination\": {\n        \"from\": 0,\n        \"size\": 10\n    },\n    \"includeFacets\": true\n}"
						},
						"url": {
							"raw": "{{baseURL}}/v1/catalog/search-in-ids",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"v1",
								"catalog",
								"search-in-ids"
							]
						}
					},
					"response": []
				},
				{
					"name": "Product Domain (TS- 109) [N] - As a User, I want to add includefacets field with different type like int, string.",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status Code | 400', function(){",
									"    pm.response.to.have.status(400)",
									"})",
									"",
									"const schemaToBeValidatedWith = JSON.parse(pm.environment.get('ErrorSchema'));",
									"",
									"pm.test(\"Validate Response against Schema\", function(){",
									"    pm.response.to.have.jsonSchema(schemaToBeValidatedWith)",
									"})",
									"",
									"pm.test('Response Assert', function(){",
									"   pm.expect(pm.response.text()).to.include('Cannot coerce Integer value (1212) to `boolean` value') ",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "X-Loblaw-Tenant-ID",
								"value": "JOE_FRESH"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"productIds\": [\n        \"U2WP028705008_EA\",\n        \"U2SP029760001_EA\"\n    ],\n    \"categoryIds\": [\n        \"56032\"\n    ],\n    \"lang\": \"en\",\n    \"pagination\": {\n        \"from\": 0,\n        \"size\": 10\n    },\n    \"includeFacets\": 1212\n}"
						},
						"url": {
							"raw": "{{baseURL}}/v1/catalog/search-in-ids",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"v1",
								"catalog",
								"search-in-ids"
							]
						}
					},
					"response": []
				},
				{
					"name": "Product Domain (TS- 110) [P] - As a User, I want to filter the list of product based on prices ranges (Valid value)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status Code | 200 OK', function(){",
									"    pm.response.to.have.status(200)",
									"})",
									"",
									"const schemaToBeValidatedWith = JSON.parse(pm.environment.get('ResponseSchema'));",
									"",
									"pm.test(\"Validate Response against Schema\", function(){",
									"    pm.response.to.have.jsonSchema(schemaToBeValidatedWith)",
									"})",
									"",
									"var responseBody = pm.response.json();",
									"",
									"var Ajv = require('ajv'),",
									"    ajv = new Ajv({logger: console,  allErrors: true});",
									"",
									"var schema = JSON.parse(pm.environment.get('ProductSchema'))",
									"",
									"responseBody.products.forEach(function(index){",
									"pm.test('Validate Product details', function(){",
									"    pm.expect(ajv.validate(schema, index)).to.be.true;",
									"})",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "X-Loblaw-Tenant-ID",
								"value": "JOE_FRESH"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"productIds\": [\n        \"U2WP028705008_EA\",\n        \"U2SP029760001_EA\"\n    ],\n    \"categoryIds\": [\n        \"56032\"\n    ],\n    \"lang\": \"en\",\n    \"pagination\": {\n        \"from\": 0,\n        \"size\": 5\n    },\n    \"includeFacets\": true,\n   \"filter\" : {\n    \"priceRanges\" : [ \"$20-$30\" ]\n    }\n}"
						},
						"url": {
							"raw": "{{baseURL}}/v1/catalog/search-in-ids",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"v1",
								"catalog",
								"search-in-ids"
							]
						}
					},
					"response": []
				},
				{
					"name": "Product Domain (TS- 111) [N] - If a user add int type value in price range then it should not filter the list",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status Code | 400', function(){",
									"    pm.response.to.have.status(400)",
									"})",
									"",
									"const schemaToBeValidatedWith = JSON.parse(pm.environment.get('ErrorSchema'));",
									"",
									"pm.test(\"Validate Response against Schema\", function(){",
									"    pm.response.to.have.jsonSchema(schemaToBeValidatedWith)",
									"})",
									"",
									"pm.test('Response Assert', function(){",
									"   pm.expect(pm.response.text()).to.include('Cannot deserialize value of type `java.util.ArrayList<java.lang.String>` from Integer value (token `JsonToken.VALUE_NUMBER_INT`)') ",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "X-Loblaw-Tenant-ID",
								"value": "JOE_FRESH"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"productIds\": [\n        \"U2WP028705008_EA\",\n        \"U2SP029760001_EA\"\n    ],\n    \"categoryIds\": [\n        \"56032\"\n    ],\n    \"lang\": \"en\",\n    \"pagination\": {\n        \"from\": 0,\n        \"size\": 5\n    },\n    \"includeFacets\": true,\n   \"filter\" : {\n    \"priceRanges\" : 32\n    }\n}"
						},
						"url": {
							"raw": "{{baseURL}}/v1/catalog/search-in-ids",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"v1",
								"catalog",
								"search-in-ids"
							]
						}
					},
					"response": []
				},
				{
					"name": "Product Domain (TS- 112) [P] - If a user add null value in price range then it should filter all the facets.",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status Code | 200 OK', function(){",
									"    pm.response.to.have.status(200)",
									"})",
									"",
									"const schemaToBeValidatedWith = JSON.parse(pm.environment.get('ResponseSchema'));",
									"",
									"pm.test(\"Validate Response against Schema\", function(){",
									"    pm.response.to.have.jsonSchema(schemaToBeValidatedWith)",
									"})",
									"",
									"var responseBody = pm.response.json();",
									"",
									"var Ajv = require('ajv'),",
									"    ajv = new Ajv({logger: console,  allErrors: true});",
									"",
									"var schema = JSON.parse(pm.environment.get('ProductSchema'))",
									"",
									"responseBody.products.forEach(function(index){",
									"pm.test('Validate Product details', function(){",
									"    pm.expect(ajv.validate(schema, index)).to.be.true;",
									"})",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "X-Loblaw-Tenant-ID",
								"value": "JOE_FRESH"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"productIds\": [\n        \"U2WP028705008_EA\",\n        \"U2SP029760001_EA\"\n    ],\n    \"categoryIds\": [\n        \"56032\"\n    ],\n    \"lang\": \"en\",\n    \"pagination\": {\n        \"from\": 0,\n        \"size\": 5\n    },\n    \"includeFacets\": true,\n   \"filter\" : {\n    \"priceRanges\" : [null]\n    }\n}"
						},
						"url": {
							"raw": "{{baseURL}}/v1/catalog/search-in-ids",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"v1",
								"catalog",
								"search-in-ids"
							]
						}
					},
					"response": []
				},
				{
					"name": "Product Domain (TS- 113) [P] - As a User, I want to filter the list of product based on Sizes (Valid Value).",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status Code | 200 OK', function(){",
									"    pm.response.to.have.status(200)",
									"})",
									"",
									"const schemaToBeValidatedWith = JSON.parse(pm.environment.get('ResponseSchema'));",
									"",
									"pm.test(\"Validate Response against Schema\", function(){",
									"    pm.response.to.have.jsonSchema(schemaToBeValidatedWith)",
									"})",
									"",
									"var responseBody = pm.response.json();",
									"",
									"var Ajv = require('ajv'),",
									"    ajv = new Ajv({logger: console,  allErrors: true});",
									"",
									"var schema = JSON.parse(pm.environment.get('ProductSchema'))",
									"",
									"responseBody.products.forEach(function(index){",
									"pm.test('Validate Product details', function(){",
									"    pm.expect(ajv.validate(schema, index)).to.be.true;",
									"})",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "X-Loblaw-Tenant-ID",
								"value": "JOE_FRESH"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"productIds\": [\n        \"U2WP028705008_EA\",\n        \"U2SP029760001_EA\"\n    ],\n    \"categoryIds\": [\n        \"56032\"\n    ],\n    \"lang\": \"en\",\n    \"pagination\": {\n        \"from\": 0,\n        \"size\": 5\n    },\n    \"includeFacets\": true,\n    \"filter\": {\n        \"sizes\": [\n            \"L\"\n        ]\n    }\n}"
						},
						"url": {
							"raw": "{{baseURL}}/v1/catalog/search-in-ids",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"v1",
								"catalog",
								"search-in-ids"
							]
						}
					},
					"response": []
				},
				{
					"name": "Product Domain (TS- 114) [N] - As a User, I want to add int type value in Sizes field then it should give some error",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status Code | 400', function(){",
									"    pm.response.to.have.status(400)",
									"})",
									"",
									"const schemaToBeValidatedWith = JSON.parse(pm.environment.get('ErrorSchema'));",
									"",
									"pm.test(\"Validate Response against Schema\", function(){",
									"    pm.response.to.have.jsonSchema(schemaToBeValidatedWith)",
									"})",
									"",
									"pm.test('Response Assert', function(){",
									"   pm.expect(pm.response.text()).to.include('Cannot deserialize value of type `java.util.ArrayList<java.lang.String>` from Integer value (token `JsonToken.VALUE_NUMBER_INT`)') ",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "X-Loblaw-Tenant-ID",
								"value": "JOE_FRESH"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"productIds\": [\n        \"U2WP028705008_EA\",\n        \"U2SP029760001_EA\"\n    ],\n    \"categoryIds\": [\n        \"56032\"\n    ],\n    \"lang\": \"en\",\n    \"pagination\": {\n        \"from\": 0,\n        \"size\": 5\n    },\n    \"includeFacets\": true,\n    \"filter\": {\n        \"sizes\": 24\n    }\n}"
						},
						"url": {
							"raw": "{{baseURL}}/v1/catalog/search-in-ids",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"v1",
								"catalog",
								"search-in-ids"
							]
						}
					},
					"response": []
				},
				{
					"name": "Product Domain (TS- 115) [N] - As a User, I want to add null/invalid value in Sizes field then it should not display any product.",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status Code | 200 OK', function(){",
									"    pm.response.to.have.status(200)",
									"})",
									"",
									"const schemaToBeValidatedWith = JSON.parse(pm.environment.get('ResponseSchema'));",
									"",
									"pm.test(\"Validate Response against Schema\", function(){",
									"    pm.response.to.have.jsonSchema(schemaToBeValidatedWith)",
									"})",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "X-Loblaw-Tenant-ID",
								"value": "JOE_FRESH"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"productIds\": [\n        \"U2WP028705008_EA\",\n        \"U2SP029760001_EA\"\n    ],\n    \"categoryIds\": [\n        \"56032\"\n    ],\n    \"lang\": \"en\",\n    \"pagination\": {\n        \"from\": 0,\n        \"size\": 5\n    },\n    \"includeFacets\": true,\n    \"filter\": {\n        \"sizes\": [\n            \"3324\"\n        ]\n    }\n}"
						},
						"url": {
							"raw": "{{baseURL}}/v1/catalog/search-in-ids",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"v1",
								"catalog",
								"search-in-ids"
							]
						}
					},
					"response": []
				},
				{
					"name": "Product Domain (TS- 116) [P] - As a User, I want to filter the list of product based on colors (Valid Value).",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status Code | 200 OK', function(){",
									"    pm.response.to.have.status(200)",
									"})",
									"",
									"const schemaToBeValidatedWith = JSON.parse(pm.environment.get('ResponseSchema'));",
									"",
									"pm.test(\"Validate Response against Schema\", function(){",
									"    pm.response.to.have.jsonSchema(schemaToBeValidatedWith)",
									"})",
									"",
									"var responseBody = pm.response.json();",
									"",
									"var Ajv = require('ajv'),",
									"    ajv = new Ajv({logger: console,  allErrors: true});",
									"",
									"var schema = JSON.parse(pm.environment.get('ProductSchema'))",
									"",
									"responseBody.products.forEach(function(index){",
									"pm.test('Validate Product details', function(){",
									"    pm.expect(ajv.validate(schema, index)).to.be.true;",
									"})",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "X-Loblaw-Tenant-ID",
								"value": "JOE_FRESH"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"productIds\": [\n        \"U2WP028705008_EA\",\n        \"U2SP029760001_EA\"\n    ],\n    \"categoryIds\": [\n        \"56032\"\n    ],\n    \"lang\": \"en\",\n    \"pagination\": {\n        \"from\": 0,\n        \"size\": 5\n    },\n    \"includeFacets\": true,\n    \"filter\": {\n        \"colors\": [\n            \"Grey\"\n        ]\n    }\n}"
						},
						"url": {
							"raw": "{{baseURL}}/v1/catalog/search-in-ids",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"v1",
								"catalog",
								"search-in-ids"
							]
						}
					},
					"response": []
				},
				{
					"name": "Product Domain (TS- 117) [N] - As a User, I want to add int type value in colors field then it should give some error",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status Code | 400', function(){",
									"    pm.response.to.have.status(400)",
									"})",
									"",
									"const schemaToBeValidatedWith = JSON.parse(pm.environment.get('ErrorSchema'));",
									"",
									"pm.test(\"Validate Response against Schema\", function(){",
									"    pm.response.to.have.jsonSchema(schemaToBeValidatedWith)",
									"})",
									"",
									"pm.test('Response Assert', function(){",
									"   pm.expect(pm.response.text()).to.include('Cannot deserialize value of type `java.util.ArrayList<java.lang.String>` from Integer value (token `JsonToken.VALUE_NUMBER_INT`)') ",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "X-Loblaw-Tenant-ID",
								"value": "JOE_FRESH"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"productIds\": [\n        \"U2WP028705008_EA\",\n        \"U2SP029760001_EA\"\n    ],\n    \"categoryIds\": [\n        \"56032\"\n    ],\n    \"lang\": \"en\",\n    \"pagination\": {\n        \"from\": 0,\n        \"size\": 5\n    },\n    \"includeFacets\": true,\n    \"filter\": {\n        \"colors\": 123\n    }\n}"
						},
						"url": {
							"raw": "{{baseURL}}/v1/catalog/search-in-ids",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"v1",
								"catalog",
								"search-in-ids"
							]
						}
					},
					"response": []
				},
				{
					"name": "Product Domain (TS- 118) [N] - As a User, I want to add null/invalid value in colors field then it should not display any product.",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status Code | 400', function(){",
									"    pm.response.to.have.status(400)",
									"})",
									"",
									"const schemaToBeValidatedWith = JSON.parse(pm.environment.get('ErrorSchema'));",
									"",
									"pm.test(\"Validate Response against Schema\", function(){",
									"    pm.response.to.have.jsonSchema(schemaToBeValidatedWith)",
									"})",
									"",
									"pm.test('Response Assert', function(){",
									"   pm.expect(pm.response.text()).to.include('Cannot construct instance of `java.util.ArrayList`') ",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "X-Loblaw-Tenant-ID",
								"value": "JOE_FRESH"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"productIds\": [\n        \"U2WP028705008_EA\",\n        \"U2SP029760001_EA\"\n    ],\n    \"categoryIds\": [\n        \"56032\"\n    ],\n    \"lang\": \"en\",\n    \"pagination\": {\n        \"from\": 0,\n        \"size\": 5\n    },\n    \"includeFacets\": true,\n    \"filter\": {\n        \"colors\": \"wkdwlkm\"\n    }\n}"
						},
						"url": {
							"raw": "{{baseURL}}/v1/catalog/search-in-ids",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"v1",
								"catalog",
								"search-in-ids"
							]
						}
					},
					"response": []
				},
				{
					"name": "Product Domain (TS- 119) [P] - As a User, I want to filter the list of product based on itemsTypes (Valid Value).",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status Code | 200 OK', function(){",
									"    pm.response.to.have.status(200)",
									"})",
									"",
									"const schemaToBeValidatedWith = JSON.parse(pm.environment.get('ResponseSchema'));",
									"",
									"pm.test(\"Validate Response against Schema\", function(){",
									"    pm.response.to.have.jsonSchema(schemaToBeValidatedWith)",
									"})",
									"",
									"var responseBody = pm.response.json();",
									"",
									"var Ajv = require('ajv'),",
									"    ajv = new Ajv({logger: console,  allErrors: true});",
									"",
									"var schema = JSON.parse(pm.environment.get('ProductSchema'))",
									"",
									"responseBody.products.forEach(function(index){",
									"pm.test('Validate Product details', function(){",
									"    pm.expect(ajv.validate(schema, index)).to.be.true;",
									"})",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "X-Loblaw-Tenant-ID",
								"value": "JOE_FRESH"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"productIds\": [\n        \"U2WP028705008_EA\",\n        \"U2SP029760001_EA\"\n    ],\n    \"categoryIds\": [\n        \"56032\"\n    ],\n    \"lang\": \"en\",\n    \"pagination\": {\n        \"from\": 0,\n        \"size\": 5\n    },\n    \"includeFacets\": true\n}"
						},
						"url": {
							"raw": "{{baseURL}}/v1/catalog/search-in-ids",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"v1",
								"catalog",
								"search-in-ids"
							]
						}
					},
					"response": []
				},
				{
					"name": "Product Domain (TS- 120) [N] - As a User, I want to add int type value in itemsTypes field then it should give some error",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status Code | 400', function(){",
									"    pm.response.to.have.status(400)",
									"})",
									"",
									"const schemaToBeValidatedWith = JSON.parse(pm.environment.get('ErrorSchema'));",
									"",
									"pm.test(\"Validate Response against Schema\", function(){",
									"    pm.response.to.have.jsonSchema(schemaToBeValidatedWith)",
									"})",
									"",
									"pm.test('Response Assert', function(){",
									"   pm.expect(pm.response.text()).to.include('Cannot deserialize value of type `java.util.ArrayList<java.lang.String>` from Integer value (token `JsonToken.VALUE_NUMBER_INT`)') ",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "X-Loblaw-Tenant-ID",
								"value": "JOE_FRESH"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"productIds\": [\n        \"U2WP028705008_EA\",\n        \"U2SP029760001_EA\"\n    ],\n    \"categoryIds\": [\n        \"56032\"\n    ],\n    \"lang\": \"en\",\n    \"pagination\": {\n        \"from\": 0,\n        \"size\": 5\n    },\n    \"includeFacets\": true,\n    \"filter\" : {\n    \"itemTypes\" : 123\n    }\n}"
						},
						"url": {
							"raw": "{{baseURL}}/v1/catalog/search-in-ids",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"v1",
								"catalog",
								"search-in-ids"
							]
						}
					},
					"response": []
				},
				{
					"name": "Product Domain (TS- 121) [N] - As a User, I want to add null/invalid value in itemsTypes field then it should not display any product.",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status Code | 200 OK', function(){",
									"    pm.response.to.have.status(200)",
									"})",
									"",
									"const schemaToBeValidatedWith = JSON.parse(pm.environment.get('ResponseSchema'));",
									"",
									"pm.test(\"Validate Response against Schema\", function(){",
									"    pm.response.to.have.jsonSchema(schemaToBeValidatedWith)",
									"})",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "X-Loblaw-Tenant-ID",
								"value": "JOE_FRESH"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"productIds\": [\n        \"U2WP028705008_EA\",\n        \"U2SP029760001_EA\"\n    ],\n    \"categoryIds\": [\n        \"56032\"\n    ],\n    \"lang\": \"en\",\n    \"pagination\": {\n        \"from\": 0,\n        \"size\": 5\n    },\n    \"includeFacets\": true,\n    \"filter\" : {\n    \"itemTypes\" : [ \"jhwodiejd\" ]\n    }\n}"
						},
						"url": {
							"raw": "{{baseURL}}/v1/catalog/search-in-ids",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"v1",
								"catalog",
								"search-in-ids"
							]
						}
					},
					"response": []
				},
				{
					"name": "Product Domain (TS- 122) [P] - As a User, I want to sort the list of product based on prices (Valid Value).",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status Code | 200 OK', function(){",
									"    pm.response.to.have.status(200)",
									"})",
									"",
									"const schemaToBeValidatedWith = JSON.parse(pm.environment.get('ResponseSchema'));",
									"",
									"pm.test(\"Validate Response against Schema\", function(){",
									"    pm.response.to.have.jsonSchema(schemaToBeValidatedWith)",
									"})",
									"",
									"var responseBody = pm.response.json();",
									"",
									"var Ajv = require('ajv'),",
									"    ajv = new Ajv({logger: console,  allErrors: true});",
									"",
									"var schema = JSON.parse(pm.environment.get('ProductSchema'))",
									"",
									"responseBody.products.forEach(function(index){",
									"pm.test('Validate Product details', function(){",
									"    pm.expect(ajv.validate(schema, index)).to.be.true;",
									"})",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "X-Loblaw-Tenant-ID",
								"value": "JOE_FRESH"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"productIds\": [\n        \"U2WP028705008_EA\",\n        \"U2SP029760001_EA\"\n    ],\n    \"categoryIds\": [\n        \"56032\"\n    ],\n    \"lang\": \"en\",\n    \"pagination\": {\n        \"from\": 0,\n        \"size\": 5\n    },\n    \"includeFacets\": true,\n    \"sort\" : {\n    \"price\" : \"asc\"\n  }\n}"
						},
						"url": {
							"raw": "{{baseURL}}/v1/catalog/search-in-ids",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"v1",
								"catalog",
								"search-in-ids"
							]
						}
					},
					"response": []
				},
				{
					"name": "Product Domain (TS- 123) [N] - As a User, I want to add int type value in prices field then it should give some error",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status Code | 400', function(){",
									"    pm.response.to.have.status(400)",
									"})",
									"",
									"const schemaToBeValidatedWith = JSON.parse(pm.environment.get('ErrorSchema'));",
									"",
									"pm.test(\"Validate Response against Schema\", function(){",
									"    pm.response.to.have.jsonSchema(schemaToBeValidatedWith)",
									"})",
									"",
									"pm.test('Response Assert', function(){",
									"   pm.expect(pm.response.text()).to.include('Cannot construct instance of `com.loblaw.search.constant.Sort`') ",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "X-Loblaw-Tenant-ID",
								"value": "JOE_FRESH"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"productIds\": [\n        \"U2WP028705008_EA\",\n        \"U2SP029760001_EA\"\n    ],\n    \"categoryIds\": [\n        \"56032\"\n    ],\n    \"lang\": \"en\",\n    \"pagination\": {\n        \"from\": 0,\n        \"size\": 5\n    },\n    \"includeFacets\": true,\n    \"sort\" : {\n    \"price\" : 123\n  }\n}"
						},
						"url": {
							"raw": "{{baseURL}}/v1/catalog/search-in-ids",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"v1",
								"catalog",
								"search-in-ids"
							]
						}
					},
					"response": []
				},
				{
					"name": "Product Domain (TS- 124) [N] - As a User, I want to add null/invalid value in prices field then it should not display any product (error).",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status Code | 400', function(){",
									"    pm.response.to.have.status(400)",
									"})",
									"",
									"const schemaToBeValidatedWith = JSON.parse(pm.environment.get('ErrorSchema'));",
									"",
									"pm.test(\"Validate Response against Schema\", function(){",
									"    pm.response.to.have.jsonSchema(schemaToBeValidatedWith)",
									"})",
									"",
									"pm.test('Response Assert', function(){",
									"   pm.expect(pm.response.text()).to.include('No enum constant com.loblaw.search.constant.Sort.ASCENDING') ",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "X-Loblaw-Tenant-ID",
								"value": "JOE_FRESH"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"productIds\": [\n        \"U2WP028705008_EA\",\n        \"U2SP029760001_EA\"\n    ],\n    \"categoryIds\": [\n        \"56032\"\n    ],\n    \"lang\": \"en\",\n    \"pagination\": {\n        \"from\": 0,\n        \"size\": 5\n    },\n    \"includeFacets\": true,\n    \"sort\" : {\n    \"price\" : \"ascending\"\n  }\n}"
						},
						"url": {
							"raw": "{{baseURL}}/v1/catalog/search-in-ids",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"v1",
								"catalog",
								"search-in-ids"
							]
						}
					},
					"response": []
				},
				{
					"name": "Product Domain (TS- 125) [P] - As a User, I want to sort the list of product based on newest (Valid Value).",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status Code | 200 OK', function(){",
									"    pm.response.to.have.status(200)",
									"})",
									"",
									"const schemaToBeValidatedWith = JSON.parse(pm.environment.get('ResponseSchema'));",
									"",
									"pm.test(\"Validate Response against Schema\", function(){",
									"    pm.response.to.have.jsonSchema(schemaToBeValidatedWith)",
									"})",
									"",
									"var responseBody = pm.response.json();",
									"",
									"var Ajv = require('ajv'),",
									"    ajv = new Ajv({logger: console,  allErrors: true});",
									"",
									"var schema = JSON.parse(pm.environment.get('ProductSchema'))",
									"",
									"responseBody.products.forEach(function(index){",
									"pm.test('Validate Product details', function(){",
									"    pm.expect(ajv.validate(schema, index)).to.be.true;",
									"})",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "X-Loblaw-Tenant-ID",
								"value": "JOE_FRESH"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"productIds\": [\n        \"U2WP028705008_EA\",\n        \"U2SP029760001_EA\"\n    ],\n    \"categoryIds\": [\n        \"56032\"\n    ],\n    \"lang\": \"en\",\n    \"pagination\": {\n        \"from\": 0,\n        \"size\": 5\n    },\n    \"includeFacets\": true, \n    \"sort\" : {\n        \"newest\" : \"asc\"\n  }\n}"
						},
						"url": {
							"raw": "{{baseURL}}/v1/catalog/search-in-ids",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"v1",
								"catalog",
								"search-in-ids"
							]
						}
					},
					"response": []
				},
				{
					"name": "Product Domain (TS- 126) [N] - As a User, I want to add int type value in newest field then it should give some error",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status Code | 400', function(){",
									"    pm.response.to.have.status(400)",
									"})",
									"",
									"const schemaToBeValidatedWith = JSON.parse(pm.environment.get('ErrorSchema'));",
									"",
									"pm.test(\"Validate Response against Schema\", function(){",
									"    pm.response.to.have.jsonSchema(schemaToBeValidatedWith)",
									"})",
									"",
									"pm.test('Response Assert', function(){",
									"   pm.expect(pm.response.text()).to.include('Cannot construct instance of `com.loblaw.search.constant.Sort`') ",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "X-Loblaw-Tenant-ID",
								"value": "JOE_FRESH"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"productIds\": [\n        \"U2WP028705008_EA\",\n        \"U2SP029760001_EA\"\n    ],\n    \"categoryIds\": [\n        \"56032\"\n    ],\n    \"lang\": \"en\",\n    \"pagination\": {\n        \"from\": 0,\n        \"size\": 5\n    },\n    \"includeFacets\": true, \n    \"sort\" : {\n        \"newest\" : 322\n  }\n}"
						},
						"url": {
							"raw": "{{baseURL}}/v1/catalog/search-in-ids",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"v1",
								"catalog",
								"search-in-ids"
							]
						}
					},
					"response": []
				},
				{
					"name": "Product Domain (TS- 127) [N] - As a User, I want to add null/invalid value in newest field then it should not display any product (error).",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status Code | 400', function(){",
									"    pm.response.to.have.status(400)",
									"})",
									"",
									"const schemaToBeValidatedWith = JSON.parse(pm.environment.get('ErrorSchema'));",
									"",
									"pm.test(\"Validate Response against Schema\", function(){",
									"    pm.response.to.have.jsonSchema(schemaToBeValidatedWith)",
									"})",
									"",
									"pm.test('Response Assert', function(){",
									"   pm.expect(pm.response.text()).to.include('No enum constant com.loblaw.search.constant.Sort.DESCENDING') ",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "X-Loblaw-Tenant-ID",
								"value": "JOE_FRESH"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"productIds\": [\n        \"U2WP028705008_EA\",\n        \"U2SP029760001_EA\"\n    ],\n    \"categoryIds\": [\n        \"56032\"\n    ],\n    \"lang\": \"en\",\n    \"pagination\": {\n        \"from\": 0,\n        \"size\": 5\n    },\n    \"includeFacets\": true, \n    \"sort\" : {\n        \"newest\" : \"descending\"\n  }\n}"
						},
						"url": {
							"raw": "{{baseURL}}/v1/catalog/search-in-ids",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"v1",
								"catalog",
								"search-in-ids"
							]
						}
					},
					"response": []
				},
				{
					"name": "Product Domain (TS- 128) [P] - As a User, I want to sort the list of product based on popular (Valid Value).",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status Code | 200 OK', function(){",
									"    pm.response.to.have.status(200)",
									"})",
									"",
									"const schemaToBeValidatedWith = JSON.parse(pm.environment.get('ResponseSchema'));",
									"",
									"pm.test(\"Validate Response against Schema\", function(){",
									"    pm.response.to.have.jsonSchema(schemaToBeValidatedWith)",
									"})",
									"",
									"var responseBody = pm.response.json();",
									"",
									"var Ajv = require('ajv'),",
									"    ajv = new Ajv({logger: console,  allErrors: true});",
									"",
									"var schema = JSON.parse(pm.environment.get('ProductSchema'))",
									"",
									"responseBody.products.forEach(function(index){",
									"pm.test('Validate Product details', function(){",
									"    pm.expect(ajv.validate(schema, index)).to.be.true;",
									"})",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "X-Loblaw-Tenant-ID",
								"value": "JOE_FRESH"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"productIds\": [\n        \"U2WP028705008_EA\",\n        \"U2SP029760001_EA\"\n    ],\n    \"categoryIds\": [\n        \"56032\"\n    ],\n    \"lang\": \"en\",\n    \"pagination\": {\n        \"from\": 0,\n        \"size\": 5\n    },\n    \"includeFacets\": true,\n    \"sort\" : {\n    \"popular\" : \"desc\"\n  }\n}"
						},
						"url": {
							"raw": "{{baseURL}}/v1/catalog/search-in-ids",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"v1",
								"catalog",
								"search-in-ids"
							]
						}
					},
					"response": []
				},
				{
					"name": "Product Domain (TS- 129) [N] - As a User, I want to add int type value in popular field then it should give some error",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status Code | 400', function(){",
									"    pm.response.to.have.status(400)",
									"})",
									"",
									"const schemaToBeValidatedWith = JSON.parse(pm.environment.get('ErrorSchema'));",
									"",
									"pm.test(\"Validate Response against Schema\", function(){",
									"    pm.response.to.have.jsonSchema(schemaToBeValidatedWith)",
									"})",
									"",
									"pm.test('Response Assert', function(){",
									"   pm.expect(pm.response.text()).to.include('Cannot construct instance of `com.loblaw.search.constant.Sort`') ",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "X-Loblaw-Tenant-ID",
								"value": "JOE_FRESH"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"productIds\": [\n        \"U2WP028705008_EA\",\n        \"U2SP029760001_EA\"\n    ],\n    \"categoryIds\": [\n        \"56032\"\n    ],\n    \"lang\": \"en\",\n    \"pagination\": {\n        \"from\": 0,\n        \"size\": 5\n    },\n    \"includeFacets\": true,\n    \"sort\" : {\n    \"popular\" : 212\n  }\n}"
						},
						"url": {
							"raw": "{{baseURL}}/v1/catalog/search-in-ids",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"v1",
								"catalog",
								"search-in-ids"
							]
						}
					},
					"response": []
				},
				{
					"name": "Product Domain (TS- 130) [N] - As a User, I want to add null/invalid value in popular field then it should not display any product (error).",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status Code | 400', function(){",
									"    pm.response.to.have.status(400)",
									"})",
									"",
									"const schemaToBeValidatedWith = JSON.parse(pm.environment.get('ErrorSchema'));",
									"",
									"pm.test(\"Validate Response against Schema\", function(){",
									"    pm.response.to.have.jsonSchema(schemaToBeValidatedWith)",
									"})",
									"",
									"pm.test('Response Assert', function(){",
									"   pm.expect(pm.response.text()).to.include('No enum constant com.loblaw.search.constant.Sort.DESCENDING') ",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "X-Loblaw-Tenant-ID",
								"value": "JOE_FRESH"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"productIds\": [\n        \"U2WP028705008_EA\",\n        \"U2SP029760001_EA\"\n    ],\n    \"categoryIds\": [\n        \"56032\"\n    ],\n    \"lang\": \"en\",\n    \"pagination\": {\n        \"from\": 0,\n        \"size\": 5\n    },\n    \"includeFacets\": true,\n    \"sort\" : {\n    \"popular\" : \"descending\"\n  }\n}"
						},
						"url": {
							"raw": "{{baseURL}}/v1/catalog/search-in-ids",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"v1",
								"catalog",
								"search-in-ids"
							]
						}
					},
					"response": []
				},
				{
					"name": "Product Domain (TS- 131) [P] - As a User, I want to sort the list of product based on featured field (Valid Value).",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status Code | 200 OK', function(){",
									"    pm.response.to.have.status(200)",
									"})",
									"",
									"const schemaToBeValidatedWith = JSON.parse(pm.environment.get('ResponseSchema'));",
									"",
									"pm.test(\"Validate Response against Schema\", function(){",
									"    pm.response.to.have.jsonSchema(schemaToBeValidatedWith)",
									"})",
									"",
									"var responseBody = pm.response.json();",
									"",
									"var Ajv = require('ajv'),",
									"    ajv = new Ajv({logger: console,  allErrors: true});",
									"",
									"var schema = JSON.parse(pm.environment.get('ProductSchema'))",
									"",
									"responseBody.products.forEach(function(index){",
									"pm.test('Validate Product details', function(){",
									"    pm.expect(ajv.validate(schema, index)).to.be.true;",
									"})",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "X-Loblaw-Tenant-ID",
								"value": "JOE_FRESH"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"productIds\": [\n        \"U2WP028705008_EA\",\n        \"U2SP029760001_EA\"\n    ],\n    \"categoryIds\": [\n        \"56032\"\n    ],\n    \"lang\": \"en\",\n    \"pagination\": {\n        \"from\": 0,\n        \"size\": 5\n    },\n    \"includeFacets\": true,\n    \"sort\" : {\n    \"featured\" : \"asc\"\n  }\n}"
						},
						"url": {
							"raw": "{{baseURL}}/v1/catalog/search-in-ids",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"v1",
								"catalog",
								"search-in-ids"
							]
						}
					},
					"response": []
				},
				{
					"name": "Product Domain (TS- 132) [N] - As a User, I want to add int, string type value in featured field then it should give some error",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status Code | 400', function(){",
									"    pm.response.to.have.status(400)",
									"})",
									"",
									"const schemaToBeValidatedWith = JSON.parse(pm.environment.get('ErrorSchema'));",
									"",
									"pm.test(\"Validate Response against Schema\", function(){",
									"    pm.response.to.have.jsonSchema(schemaToBeValidatedWith)",
									"})",
									"",
									"pm.test('Response Assert', function(){",
									"   pm.expect(pm.response.text()).to.include('No enum constant com.loblaw.search.constant.Sort.DSCSDC') ",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "X-Loblaw-Tenant-ID",
								"value": "JOE_FRESH"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"productIds\": [\n        \"U2WP028705008_EA\",\n        \"U2SP029760001_EA\"\n    ],\n    \"categoryIds\": [\n        \"56032\"\n    ],\n    \"lang\": \"en\",\n    \"pagination\": {\n        \"from\": 0,\n        \"size\": 5\n    },\n    \"includeFacets\": true,\n    \"sort\" : {\n    \"featured\" : \"dscsdc\"\n  }\n}"
						},
						"url": {
							"raw": "{{baseURL}}/v1/catalog/search-in-ids",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"v1",
								"catalog",
								"search-in-ids"
							]
						}
					},
					"response": []
				},
				{
					"name": "Product Domain (TS- 133) [P] - As a User, I want to add special character in Category ID field",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status Code | 200 OK', function(){",
									"    pm.response.to.have.status(200)",
									"})",
									"",
									"const schemaToBeValidatedWith = JSON.parse(pm.environment.get('ResponseSchema'));",
									"",
									"pm.test(\"Validate Response against Schema\", function(){",
									"    pm.response.to.have.jsonSchema(schemaToBeValidatedWith)",
									"})",
									"var responseBody = pm.response.json();",
									"",
									"var Ajv = require('ajv'),",
									"    ajv = new Ajv({logger: console,  allErrors: true});",
									"",
									"var schema = JSON.parse(pm.environment.get('ProductSchema'))",
									"",
									"responseBody.products.forEach(function(index){",
									"pm.test('Validate Product details', function(){",
									"    pm.expect(ajv.validate(schema, index)).to.be.true;",
									"})",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "X-Loblaw-Tenant-ID",
								"value": "JOE_FRESH"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"productIds\": [\n       \"U0WP009475001_EA\",\n       \"F1WR019965011_EA\"\n    ],\n    \"categoryIds\": [\n        \"~\\\"@#$%^&*()_+-=|';:?/><,.|\\\\\\\\|[]!{banner}56018\"\n    ],\n    \"lang\": \"en\",\n    \"pagination\": {\n        \"from\": 0,\n        \"size\": 5\n    },\n    \"includeFacets\": true\n}"
						},
						"url": {
							"raw": "{{baseURL}}/v1/catalog/search-in-ids",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"v1",
								"catalog",
								"search-in-ids"
							]
						}
					},
					"response": []
				},
				{
					"name": "Product Domain (TS- 134) [P] - As a User, I want to add special character in Product ID field",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status Code | 200 OK', function(){",
									"    pm.response.to.have.status(200)",
									"})",
									"",
									"const schemaToBeValidatedWith = JSON.parse(pm.environment.get('ResponseSchema'));",
									"",
									"pm.test(\"Validate Response against Schema\", function(){",
									"    pm.response.to.have.jsonSchema(schemaToBeValidatedWith)",
									"})",
									"var responseBody = pm.response.json();",
									"",
									"var Ajv = require('ajv'),",
									"    ajv = new Ajv({logger: console,  allErrors: true});",
									"",
									"var schema = JSON.parse(pm.environment.get('ProductSchema'))",
									"",
									"responseBody.products.forEach(function(index){",
									"pm.test('Validate Product details', function(){",
									"    pm.expect(ajv.validate(schema, index)).to.be.true;",
									"})",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "X-Loblaw-Tenant-ID",
								"value": "JOE_FRESH"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"productIds\": [\n        \"~\\\"@#$%^&*()_+-=|';:?/><,.|\\\\\\\\|[]!{banner}U2WP028705008_EA\",\n        \"U2SP029760001_EA\"\n    ],\n    \"categoryIds\": [\n        \"56018\"\n    ],\n    \"lang\": \"en\",\n    \"pagination\": {\n        \"from\": 0,\n        \"size\": 5\n    },\n    \"includeFacets\": true\n}"
						},
						"url": {
							"raw": "{{baseURL}}/v1/catalog/search-in-ids",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"v1",
								"catalog",
								"search-in-ids"
							]
						}
					},
					"response": []
				},
				{
					"name": "Product Domain (TS- 135) [P] - As a User, I want to add unicode character in Category ID field",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status Code | 200 OK', function(){",
									"    pm.response.to.have.status(200)",
									"})",
									"",
									"const schemaToBeValidatedWith = JSON.parse(pm.environment.get('ResponseSchema'));",
									"",
									"pm.test(\"Validate Response against Schema\", function(){",
									"    pm.response.to.have.jsonSchema(schemaToBeValidatedWith)",
									"})",
									"",
									"var responseBody = pm.response.json();",
									"",
									"var Ajv = require('ajv'),",
									"    ajv = new Ajv({logger: console,  allErrors: true});",
									"",
									"var schema = JSON.parse(pm.environment.get('ProductSchema'))",
									"",
									"responseBody.products.forEach(function(index){",
									"pm.test('Validate Product details', function(){",
									"    pm.expect(ajv.validate(schema, index)).to.be.true;",
									"})",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "X-Loblaw-Tenant-ID",
								"value": "JOE_FRESH"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"productIds\": [\n        \"F2WR030171001_EA\",\n        \"F2WP031920006_EA\"\n    ],\n    \"categoryIds\": [\n        \"öbanner¢025004007000000000000000™®©¡§\"\n    ],\n    \"lang\": \"en\",\n    \"pagination\": {\n        \"from\": 0,\n        \"size\": 5\n    },\n    \"includeFacets\": true\n}"
						},
						"url": {
							"raw": "{{baseURL}}/v1/catalog/search-in-ids",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"v1",
								"catalog",
								"search-in-ids"
							]
						}
					},
					"response": []
				},
				{
					"name": "Product Domain (TS- 136) [P] - As a User, I want to add unicode character in Product ID field",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status Code | 200 OK', function(){",
									"    pm.response.to.have.status(200)",
									"})",
									"",
									"const schemaToBeValidatedWith = JSON.parse(pm.environment.get('ResponseSchema'));",
									"",
									"pm.test(\"Validate Response against Schema\", function(){",
									"    pm.response.to.have.jsonSchema(schemaToBeValidatedWith)",
									"})",
									"",
									"var responseBody = pm.response.json();",
									"",
									"var Ajv = require('ajv'),",
									"    ajv = new Ajv({logger: console,  allErrors: true});",
									"",
									"var schema = JSON.parse(pm.environment.get('ProductSchema'))",
									"",
									"responseBody.products.forEach(function(index){",
									"pm.test('Validate Product details', function(){",
									"    pm.expect(ajv.validate(schema, index)).to.be.true;",
									"})",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "X-Loblaw-Tenant-ID",
								"value": "JOE_FRESH"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"productIds\": [\n        \"öbanner¢025004007000000000000000™®©¡§U2WP028705008_EA\",\n        \"U2SP029760001_EA\"\n    ],\n    \"categoryIds\": [\n        \"56018\"\n    ],\n    \"lang\": \"en\",\n    \"pagination\": {\n        \"from\": 0,\n        \"size\": 5\n    },\n    \"includeFacets\": true\n}"
						},
						"url": {
							"raw": "{{baseURL}}/v1/catalog/search-in-ids",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"v1",
								"catalog",
								"search-in-ids"
							]
						}
					},
					"response": []
				},
				{
					"name": "Product Domain (TS- 137) [P] - As a user, I want to add a blank value in all listing filters and get results with no filters applied",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status Code | 200 OK', function(){",
									"    pm.response.to.have.status(200)",
									"})",
									"",
									"const schemaToBeValidatedWith = JSON.parse(pm.environment.get('ResponseSchema'));",
									"",
									"pm.test(\"Validate Response against Schema\", function(){",
									"    pm.response.to.have.jsonSchema(schemaToBeValidatedWith)",
									"})",
									"",
									"var responseBody = pm.response.json();",
									"",
									"var Ajv = require('ajv'),",
									"    ajv = new Ajv({logger: console,  allErrors: true});",
									"",
									"var schema = JSON.parse(pm.environment.get('ProductSchema'))",
									"",
									"responseBody.products.forEach(function(index){",
									"pm.test('Validate Product details', function(){",
									"    pm.expect(ajv.validate(schema, index)).to.be.true;",
									"})",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "X-Loblaw-Tenant-ID",
								"value": "JOE_FRESH"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"productIds\": [\n        \"U2WP028705008_EA\",\n        \"U2SP029760001_EA\"\n    ],\n    \"categoryIds\": [\n        \"56032\"\n    ],\n    \"lang\": \"en\",\n    \"pagination\": {\n        \"from\": 0,\n        \"size\": 5\n    },\n    \"includeFacets\": true,\n    \"filter\" : {\n    \"priceRanges\" : null,\n    \"sizes\" : null,\n    \"itemTypes\" : null,\n    \"colors\" : null,\n    \"categories\" : null\n  }\n}"
						},
						"url": {
							"raw": "{{baseURL}}/v1/catalog/search-in-ids",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"v1",
								"catalog",
								"search-in-ids"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Product Suggestions",
			"item": [
				{
					"name": "Product Domain (TS- 143) [P] - One should able to see product suggestions when user adds only mandatory fields like lang, term.",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status Code | 200 OK', function(){",
									"    pm.response.to.have.status(200)",
									"})",
									"const schemaToBeValidatedWith = JSON.parse(pm.environment.get('PSResponseSchema'));",
									"",
									"pm.test(\"Validate Response against Schema\", function(){",
									"    pm.response.to.have.jsonSchema(schemaToBeValidatedWith)",
									"})",
									"",
									"var responseBody = pm.response.json();",
									"",
									"var Ajv = require('ajv'),",
									"    ajv = new Ajv({logger: console,  allErrors: true});",
									"",
									"var schema = JSON.parse(pm.environment.get('Suggestions'))",
									"",
									"responseBody.suggestions.forEach(function(index){",
									"pm.test('Validate Suggestions in Product', function(){",
									"    pm.expect(ajv.validate(schema, index)).to.be.true;",
									"})",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "accept",
								"value": "application/json"
							},
							{
								"key": "X-Loblaw-Tenant-ID",
								"value": "JOE_FRESH"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"lang\": \"en\",\n  \"term\": \"Denim\"\n}"
						},
						"url": {
							"raw": "{{baseURL}}/v1/catalog/product-suggestions",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"v1",
								"catalog",
								"product-suggestions"
							]
						}
					},
					"response": []
				},
				{
					"name": "Product Domain (TS- 144) [P] - One should able to see product suggestions when user adds all fields (Optional + Mandatory).",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status Code | 200 OK', function(){",
									"    pm.response.to.have.status(200)",
									"})",
									"const schemaToBeValidatedWith = JSON.parse(pm.environment.get('PSResponseSchema'));",
									"",
									"pm.test(\"Validate Response against Schema\", function(){",
									"    pm.response.to.have.jsonSchema(schemaToBeValidatedWith)",
									"})",
									"",
									"var responseBody = pm.response.json();",
									"",
									"var Ajv = require('ajv'),",
									"    ajv = new Ajv({logger: console,  allErrors: true});",
									"",
									"var schema = JSON.parse(pm.environment.get('Suggestions'))",
									"",
									"responseBody.suggestions.forEach(function(index){",
									"pm.test('Validate Suggestions in Product', function(){",
									"    pm.expect(ajv.validate(schema, index)).to.be.true;",
									"})",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "accept",
								"value": "application/json"
							},
							{
								"key": "X-Loblaw-Tenant-ID",
								"value": "JOE_FRESH"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"lang\": \"en\",\n  \"term\": \"Denim\",\n  \"size\": 25\n}"
						},
						"url": {
							"raw": "{{baseURL}}/v1/catalog/product-suggestions",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"v1",
								"catalog",
								"product-suggestions"
							]
						}
					},
					"response": []
				},
				{
					"name": "Product Domain (TS- 145) [N] - One should not able to see product suggestions but expect an error thrown by the API When User adds only lang field in the request body.",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status Code | 400', function(){",
									"    pm.response.to.have.status(400)",
									"})",
									"",
									"const schemaToBeValidatedWith = JSON.parse(pm.environment.get('ErrorSchema'));",
									"",
									"pm.test(\"Validate Response against Schema\", function(){",
									"    pm.response.to.have.jsonSchema(schemaToBeValidatedWith)",
									"})",
									"",
									"pm.test('Response Assert', function(){",
									"   pm.expect(pm.response.text()).to.include(\"Field error in object 'jfProductSuggestionsRequest' on field 'term': rejected value\") ",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "accept",
								"value": "application/json"
							},
							{
								"key": "X-Loblaw-Tenant-ID",
								"value": "JOE_FRESH"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"lang\": \"en\"\n}"
						},
						"url": {
							"raw": "{{baseURL}}/v1/catalog/product-suggestions",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"v1",
								"catalog",
								"product-suggestions"
							]
						}
					},
					"response": []
				},
				{
					"name": "Product Domain (TS- 146) [N] - One should not able to see product suggestions but expect an error thrown by the API When User adds only term field in the request body.",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status Code | 400', function(){",
									"    pm.response.to.have.status(400)",
									"})",
									"",
									"const schemaToBeValidatedWith = JSON.parse(pm.environment.get('ErrorSchema'));",
									"",
									"pm.test(\"Validate Response against Schema\", function(){",
									"    pm.response.to.have.jsonSchema(schemaToBeValidatedWith)",
									"})",
									"",
									"pm.test('Response Assert', function(){",
									"   pm.expect(pm.response.text()).to.include(\"Field error in object 'jfProductSuggestionsRequest' on field 'lang': rejected value\") ",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "accept",
								"value": "application/json"
							},
							{
								"key": "X-Loblaw-Tenant-ID",
								"value": "JOE_FRESH"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"term\": \"Denim\"\n}"
						},
						"url": {
							"raw": "{{baseURL}}/v1/catalog/product-suggestions",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"v1",
								"catalog",
								"product-suggestions"
							]
						}
					},
					"response": []
				},
				{
					"name": "Product Domain (TS- 147) [N] - One should not able to see product suggestions but expect an error thrown by the API When User adds empty/blank string in lang term field.",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status Code | 400', function(){",
									"    pm.response.to.have.status(400)",
									"})",
									"",
									"const schemaToBeValidatedWith = JSON.parse(pm.environment.get('ErrorSchema'));",
									"",
									"pm.test(\"Validate Response against Schema\", function(){",
									"    pm.response.to.have.jsonSchema(schemaToBeValidatedWith)",
									"})",
									"",
									"pm.test('Response Assert', function(){",
									"   pm.expect(pm.response.text()).to.include(\"Language provided isn't valid.\") ",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "accept",
								"value": "application/json"
							},
							{
								"key": "X-Loblaw-Tenant-ID",
								"value": "JOE_FRESH"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"lang\": \"\",\n  \"term\": \"Denim\"\n}"
						},
						"url": {
							"raw": "{{baseURL}}/v1/catalog/product-suggestions",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"v1",
								"catalog",
								"product-suggestions"
							]
						}
					},
					"response": []
				},
				{
					"name": "Product Domain (TS- 148) [N] - One should not able to see product suggestions but expect an error thrown by the API When User adds invalid string in lang term field.",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status Code | 400', function(){",
									"    pm.response.to.have.status(400)",
									"})",
									"",
									"const schemaToBeValidatedWith = JSON.parse(pm.environment.get('ErrorSchema'));",
									"",
									"pm.test(\"Validate Response against Schema\", function(){",
									"    pm.response.to.have.jsonSchema(schemaToBeValidatedWith)",
									"})",
									"",
									"pm.test('Response Assert', function(){",
									"   pm.expect(pm.response.text()).to.include('No enum constant com.loblaw.search.constant.Language.PORT') ",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "accept",
								"value": "application/json"
							},
							{
								"key": "X-Loblaw-Tenant-ID",
								"value": "JOE_FRESH"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"lang\": \"Port\",\n  \"term\": \"Denim\"\n}"
						},
						"url": {
							"raw": "{{baseURL}}/v1/catalog/product-suggestions",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"v1",
								"catalog",
								"product-suggestions"
							]
						}
					},
					"response": []
				},
				{
					"name": "Product Domain (TS- 149) [N] - One should not able to see product suggestions but expect an error thrown by the API When User adds int value into string in size field.",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status Code | 400', function(){",
									"    pm.response.to.have.status(400)",
									"})",
									"",
									"const schemaToBeValidatedWith = JSON.parse(pm.environment.get('ErrorSchema'));",
									"",
									"pm.test(\"Validate Response against Schema\", function(){",
									"    pm.response.to.have.jsonSchema(schemaToBeValidatedWith)",
									"})",
									"",
									"pm.test('Response Assert', function(){",
									"   pm.expect(pm.response.text()).to.include(\"Cannot coerce String value\") ",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "accept",
								"value": "application/json"
							},
							{
								"key": "X-Loblaw-Tenant-ID",
								"value": "JOE_FRESH"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"lang\": \"en\",\n  \"term\": \"Denim\",\n  \"size\": \"122\"\n}"
						},
						"url": {
							"raw": "{{baseURL}}/v1/catalog/product-suggestions",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"v1",
								"catalog",
								"product-suggestions"
							]
						}
					},
					"response": []
				},
				{
					"name": "Product Domain (TS- 150) [N] - One should not able to see product suggestions but expect an error thrown by the API When User adds int(big) value into string in size field.",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status Code | 400', function(){",
									"    pm.response.to.have.status(400)",
									"})",
									"",
									"const schemaToBeValidatedWith = JSON.parse(pm.environment.get('ErrorSchema'));",
									"",
									"pm.test(\"Validate Response against Schema\", function(){",
									"    pm.response.to.have.jsonSchema(schemaToBeValidatedWith)",
									"})",
									"",
									"pm.test('Response Assert', function(){",
									"   pm.expect(pm.response.text()).to.include(\"Cannot coerce String value\") ",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "accept",
								"value": "application/json"
							},
							{
								"key": "X-Loblaw-Tenant-ID",
								"value": "JOE_FRESH"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"lang\": \"en\",\n  \"term\": \"Denim\",\n  \"size\": \"12222\"\n}"
						},
						"url": {
							"raw": "{{baseURL}}/v1/catalog/product-suggestions",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"v1",
								"catalog",
								"product-suggestions"
							]
						}
					},
					"response": []
				},
				{
					"name": "Product Domain (TS- 151) [N] - One should not able to see product suggestions but expect an error thrown by the API When User adds string type value in size field.",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status Code | 400', function(){",
									"    pm.response.to.have.status(400)",
									"})",
									"",
									"const schemaToBeValidatedWith = JSON.parse(pm.environment.get('ErrorSchema'));",
									"",
									"pm.test(\"Validate Response against Schema\", function(){",
									"    pm.response.to.have.jsonSchema(schemaToBeValidatedWith)",
									"})",
									"",
									"pm.test('Response Assert', function(){",
									"   pm.expect(pm.response.text()).to.include(\"Cannot coerce String value\") ",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "accept",
								"value": "application/json"
							},
							{
								"key": "X-Loblaw-Tenant-ID",
								"value": "JOE_FRESH"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"lang\": \"en\",\n  \"term\": \"Denim\",\n  \"size\": \"yiuoiu2\"\n}"
						},
						"url": {
							"raw": "{{baseURL}}/v1/catalog/product-suggestions",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"v1",
								"catalog",
								"product-suggestions"
							]
						}
					},
					"response": []
				},
				{
					"name": "Product Domain (TS- 152) [N] - One should not able to see product suggestions but expect an error thrown by the API When User adds empty/blank string in term field.",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status Code | 400', function(){",
									"    pm.response.to.have.status(400)",
									"})",
									"",
									"const schemaToBeValidatedWith = JSON.parse(pm.environment.get('ErrorSchema'));",
									"",
									"pm.test(\"Validate Response against Schema\", function(){",
									"    pm.response.to.have.jsonSchema(schemaToBeValidatedWith)",
									"})",
									"",
									"pm.test('Response Assert', function(){",
									"   pm.expect(pm.response.text()).to.include(\"[Field error in object 'jfProductSuggestionsRequest' on field 'term': rejected value []\") ",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "accept",
								"value": "application/json"
							},
							{
								"key": "X-Loblaw-Tenant-ID",
								"value": "JOE_FRESH"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"lang\": \"en\",\n  \"term\": \"\"\n}"
						},
						"url": {
							"raw": "{{baseURL}}/v1/catalog/product-suggestions",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"v1",
								"catalog",
								"product-suggestions"
							]
						}
					},
					"response": []
				},
				{
					"name": "Product Domain (TS- 153) [N] - One should not able to see product suggestions but expect an error thrown by the API When User adds invalid string in term field.",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status Code | 200 OK', function(){",
									"    pm.response.to.have.status(200)",
									"})",
									"",
									"const schemaToBeValidatedWith = JSON.parse(pm.environment.get('PSResponseSchema'));",
									"",
									"pm.test(\"Validate Response against Schema\", function(){",
									"    pm.response.to.have.jsonSchema(schemaToBeValidatedWith)",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "accept",
								"value": "application/json"
							},
							{
								"key": "X-Loblaw-Tenant-ID",
								"value": "JOE_FRESH"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"lang\": \"en\",\n  \"term\": \"joisk\"\n}"
						},
						"url": {
							"raw": "{{baseURL}}/v1/catalog/product-suggestions",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"v1",
								"catalog",
								"product-suggestions"
							]
						}
					},
					"response": []
				},
				{
					"name": "Product Domain (TS- 154) [P] - One should able to see product suggestions When User adds fr in lang field.",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status Code | 200 OK', function(){",
									"    pm.response.to.have.status(200)",
									"})",
									"",
									"const schemaToBeValidatedWith = JSON.parse(pm.environment.get('PSResponseSchema'));",
									"",
									"pm.test(\"Validate Response against Schema\", function(){",
									"    pm.response.to.have.jsonSchema(schemaToBeValidatedWith)",
									"})",
									"",
									"var responseBody = pm.response.json();",
									"",
									"var Ajv = require('ajv'),",
									"    ajv = new Ajv({logger: console,  allErrors: true});",
									"",
									"var schema = JSON.parse(pm.environment.get('Suggestions'))",
									"",
									"responseBody.suggestions.forEach(function(index){",
									"pm.test('Validate Suggestions in Product', function(){",
									"    pm.expect(ajv.validate(schema, index)).to.be.true;",
									"})",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "accept",
								"value": "application/json"
							},
							{
								"key": "X-Loblaw-Tenant-ID",
								"value": "JOE_FRESH"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"lang\": \"fr\",\n  \"term\": \"Shirt\"\n}"
						},
						"url": {
							"raw": "{{baseURL}}/v1/catalog/product-suggestions",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"v1",
								"catalog",
								"product-suggestions"
							]
						}
					},
					"response": []
				},
				{
					"name": "Product Domain (TS- 155) [P] - One should able to see product suggestions with null thumbnail image url When User adds mandatory fields.",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status Code | 200 OK', function(){",
									"    pm.response.to.have.status(200)",
									"})",
									"",
									"const schemaToBeValidatedWith = JSON.parse(pm.environment.get('PSResponseSchema'));",
									"",
									"pm.test(\"Validate Response against Schema\", function(){",
									"    pm.response.to.have.jsonSchema(schemaToBeValidatedWith)",
									"})",
									"",
									"var responseBody = pm.response.json();",
									"",
									"var Ajv = require('ajv'),",
									"    ajv = new Ajv({logger: console,  allErrors: true});",
									"",
									"var schema = JSON.parse(pm.environment.get('Suggestions'))",
									"",
									"responseBody.suggestions.forEach(function(index){",
									"pm.test('Validate Suggestions in Product', function(){",
									"    pm.expect(ajv.validate(schema, index)).to.be.true;",
									"})",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "accept",
								"value": "application/json"
							},
							{
								"key": "X-Loblaw-Tenant-ID",
								"value": "JOE_FRESH"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"lang\": \"en\",\n  \"term\": \"Pant\"\n}"
						},
						"url": {
							"raw": "{{baseURL}}/v1/catalog/product-suggestions",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"v1",
								"catalog",
								"product-suggestions"
							]
						}
					},
					"response": []
				},
				{
					"name": "Product Domain (TS- 156) [N] - One should not able to see product suggestions but expect an error thrown by the API When User adds negative size.",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status Code | 400', function(){",
									"    pm.response.to.have.status(400)",
									"})",
									"",
									"const schemaToBeValidatedWith = JSON.parse(pm.environment.get('ErrorSchema'));",
									"",
									"pm.test(\"Validate Response against Schema\", function(){",
									"    pm.response.to.have.jsonSchema(schemaToBeValidatedWith)",
									"})",
									"",
									"pm.test('Response Assert', function(){",
									"   pm.expect(pm.response.text()).to.include('default message [must be greater than or equal to 0]') ",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "accept",
								"value": "application/json"
							},
							{
								"key": "X-Loblaw-Tenant-ID",
								"value": "JOE_FRESH"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"lang\": \"en\",\n  \"term\": \"Denim\",\n  \"size\": -1\n}"
						},
						"url": {
							"raw": "{{baseURL}}/v1/catalog/product-suggestions",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"v1",
								"catalog",
								"product-suggestions"
							]
						}
					},
					"response": []
				},
				{
					"name": "Product Domain (TS- 157) [N] - As a User, I want to add empty value in Tenant-ID header field",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status Code | 404', function(){",
									"    pm.response.to.have.status(404)",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "accept",
								"value": "application/json"
							},
							{
								"key": "X-Loblaw-Tenant-ID",
								"value": ""
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"lang\": \"en\",\n  \"term\": \"Denim\"\n}"
						},
						"url": {
							"raw": "{{baseURL}}/v1/catalog/product-suggestions",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"v1",
								"catalog",
								"product-suggestions"
							]
						}
					},
					"response": []
				},
				{
					"name": "Product Domain (TS- 158) [N] - As a User, I want to add invalid value in Tenant-ID header field.",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status Code | 404', function(){",
									"    pm.response.to.have.status(404)",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "accept",
								"value": "application/json"
							},
							{
								"key": "X-Loblaw-Tenant-ID",
								"value": "MARKETPLACE"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"lang\": \"en\",\n  \"term\": \"Denim\"\n}"
						},
						"url": {
							"raw": "{{baseURL}}/v1/catalog/product-suggestions",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"v1",
								"catalog",
								"product-suggestions"
							]
						}
					},
					"response": []
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					"const responseSchema = {",
					"  \"type\": \"object\",",
					"  \"properties\": {",
					"    \"total\": {",
					"      \"type\": \"integer\"",
					"    },",
					"    \"products\": {",
					"      \"type\": \"array\"",
					"    },",
					"    \"facets\": {",
					"      \"type\": \"object\",",
					"      \"properties\": {",
					"        \"price_ranges\": {",
					"          \"type\": \"object\",",
					"          \"items\": {}",
					"        },",
					"        \"sizes\": {",
					"          \"type\": \"object\",",
					"          \"items\": {}",
					"        },",
					"        \"item_types\": {",
					"          \"type\": \"object\",",
					"          \"items\": {}",
					"        },",
					"        \"colors\": {",
					"          \"type\": \"object\",",
					"          \"items\": {}",
					"        },",
					"        \"standard_color_urls\": {",
					"          \"type\": \"object\",",
					"          \"items\": {}",
					"        },",
					"        \"category_paths\": {",
					"          \"type\": \"object\",",
					"          \"items\": {}",
					"        },",
					"        \"category_codes_names\": {",
					"          \"type\": \"object\",",
					"          \"items\": {}",
					"        }",
					"      }",
					"    }",
					"  },",
					"  \"required\": [",
					"    \"total\",",
					"    \"products\",",
					"    \"facets\"",
					"  ]",
					"}",
					"pm.environment.set('ResponseSchema', JSON.stringify(responseSchema));",
					"",
					"const ProductSchema = {",
					"  \"type\": \"object\",",
					"  \"properties\": {",
					"    \"variant_group_id\": {",
					"      \"type\": \"string\"",
					"    },",
					"    \"code\": {",
					"      \"type\": \"string\"",
					"    },",
					"    \"seller\": {",
					"      \"type\": \"object\",",
					"      \"properties\": {",
					"        \"has_loyalty\": {",
					"          \"type\": \"boolean\"",
					"        }",
					"      }",
					"    }",
					"  }",
					"}",
					"",
					"pm.environment.set('ProductSchema', JSON.stringify(ProductSchema));",
					"",
					"const errorSchema = {",
					"  \"type\": \"object\",",
					"  \"properties\": {",
					"    \"reason\": {",
					"      \"type\": \"string\"",
					"    },",
					"    \"message\": {",
					"      \"type\": \"string\"",
					"    },",
					"    \"httpCode\": {",
					"      \"type\": \"integer\"",
					"    }",
					"  },",
					"  \"required\": [",
					"    \"reason\",",
					"    \"message\",",
					"    \"httpCode\"",
					"  ]",
					"}",
					"",
					"pm.environment.set('ErrorSchema', JSON.stringify(errorSchema));",
					"",
					"const ProductSuggestionResponse = {",
					"  \"type\": \"object\",",
					"  \"properties\": {",
					"    \"total\": {",
					"      \"type\": \"integer\"",
					"    },",
					"    \"suggestions\": {",
					"      \"type\": \"array\"",
					"    }",
					"  },",
					"  \"required\": [",
					"    \"total\",",
					"    \"suggestions\"",
					"  ]",
					"}",
					"pm.environment.set('PSResponseSchema', JSON.stringify(ProductSuggestionResponse));",
					"",
					"const Suggestions = {",
					"  \"type\": \"object\",",
					"  \"properties\": {",
					"    \"code\": {",
					"      \"type\": \"string\"",
					"    },",
					"    \"name\": {",
					"      \"type\": \"string\"",
					"    },",
					"    \"thumbnail_image_url\": {",
					"      \"type\": [\"null\",\"string\"]",
					"    }",
					"  }",
					"}",
					"",
					"pm.environment.set('Suggestions', JSON.stringify(Suggestions));"
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	]
}